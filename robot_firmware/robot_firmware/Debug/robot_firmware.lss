
robot_firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00001100  00001194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001100  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e4  00800122  00800122  000011b6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000011b6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  00001212  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ef6  00000000  00000000  000012fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000723  00000000  00000000  000021f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000053a  00000000  00000000  00002913  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000270  00000000  00000000  00002e50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000472  00000000  00000000  000030c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ab4  00000000  00000000  00003532  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00003fe6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 10 03 	jmp	0x620	; 0x620 <__vector_18>
      4c:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__vector_19>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e0 e0       	ldi	r30, 0x00	; 0
      7c:	f1 e1       	ldi	r31, 0x11	; 17
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 32       	cpi	r26, 0x22	; 34
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	a2 e2       	ldi	r26, 0x22	; 34
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a6 30       	cpi	r26, 0x06	; 6
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 25 01 	call	0x24a	; 0x24a <main>
      9e:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <motor_pwm_init>:
	
	motor_set_direction(motor, 1);
}

void motor_pwm_init() {
	DDRD |= (1 << PORTD6) | (1 << PORTD5);
      a6:	8a b1       	in	r24, 0x0a	; 10
      a8:	80 66       	ori	r24, 0x60	; 96
      aa:	8a b9       	out	0x0a, r24	; 10

	TCCR0A |= (1 << WGM00) | (1 << COM0A1) | (1 << COM0B1);		// PWM, Phase Correct
      ac:	84 b5       	in	r24, 0x24	; 36
      ae:	81 6a       	ori	r24, 0xA1	; 161
      b0:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS02);										// 256 prescaler (ska väl kanske ändras)
      b2:	85 b5       	in	r24, 0x25	; 37
      b4:	84 60       	ori	r24, 0x04	; 4
      b6:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;													// Reset TCNT0
      b8:	16 bc       	out	0x26, r1	; 38
	
	OCR0A = 0;
      ba:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0;
      bc:	18 bc       	out	0x28, r1	; 40
      be:	08 95       	ret

000000c0 <motor_set_throttle>:
}

void motor_set_throttle(Motor *motor, uint8_t th, float scale) 
{
      c0:	6f 92       	push	r6
      c2:	7f 92       	push	r7
      c4:	8f 92       	push	r8
      c6:	9f 92       	push	r9
      c8:	af 92       	push	r10
      ca:	bf 92       	push	r11
      cc:	cf 92       	push	r12
      ce:	df 92       	push	r13
      d0:	ef 92       	push	r14
      d2:	ff 92       	push	r15
      d4:	0f 93       	push	r16
      d6:	1f 93       	push	r17
      d8:	cf 93       	push	r28
      da:	df 93       	push	r29
      dc:	ec 01       	movw	r28, r24
      de:	76 2e       	mov	r7, r22
      e0:	69 01       	movw	r12, r18
      e2:	7a 01       	movw	r14, r20
	const float max_in = 127;
	float max_ut = 255 - motor->throttle_offset;
      e4:	68 80       	ld	r6, Y
      e6:	06 2d       	mov	r16, r6
      e8:	11 27       	eor	r17, r17
      ea:	07 fd       	sbrc	r16, 7
      ec:	10 95       	com	r17
	float	perc = th / max_in;
      ee:	70 e0       	ldi	r23, 0x00	; 0
	uint8_t finalThrottle = (perc * max_ut * scale + 0.5) + motor->throttle_offset;
	
	
	
	
	if(th + motor->throttle_offset > 255) {
      f0:	c8 01       	movw	r24, r16
      f2:	86 0f       	add	r24, r22
      f4:	97 1f       	adc	r25, r23
      f6:	8f 3f       	cpi	r24, 0xFF	; 255
      f8:	91 05       	cpc	r25, r1
      fa:	09 f0       	breq	.+2      	; 0xfe <motor_set_throttle+0x3e>
      fc:	ec f5       	brge	.+122    	; 0x178 <motor_set_throttle+0xb8>
		finalThrottle = 255;
	}
	else if(th + motor->throttle_offset < 0) {
      fe:	99 23       	and	r25, r25
     100:	ec f1       	brlt	.+122    	; 0x17c <motor_set_throttle+0xbc>

void motor_set_throttle(Motor *motor, uint8_t th, float scale) 
{
	const float max_in = 127;
	float max_ut = 255 - motor->throttle_offset;
	float	perc = th / max_in;
     102:	88 27       	eor	r24, r24
     104:	77 fd       	sbrc	r23, 7
     106:	80 95       	com	r24
     108:	98 2f       	mov	r25, r24
     10a:	0e 94 aa 04 	call	0x954	; 0x954 <__floatsisf>
     10e:	20 e0       	ldi	r18, 0x00	; 0
     110:	30 e0       	ldi	r19, 0x00	; 0
     112:	4e ef       	ldi	r20, 0xFE	; 254
     114:	52 e4       	ldi	r21, 0x42	; 66
     116:	0e 94 14 04 	call	0x828	; 0x828 <__divsf3>
     11a:	4b 01       	movw	r8, r22
     11c:	5c 01       	movw	r10, r24
}

void motor_set_throttle(Motor *motor, uint8_t th, float scale) 
{
	const float max_in = 127;
	float max_ut = 255 - motor->throttle_offset;
     11e:	6f ef       	ldi	r22, 0xFF	; 255
     120:	70 e0       	ldi	r23, 0x00	; 0
     122:	60 1b       	sub	r22, r16
     124:	71 0b       	sbc	r23, r17
     126:	88 27       	eor	r24, r24
     128:	77 fd       	sbrc	r23, 7
     12a:	80 95       	com	r24
     12c:	98 2f       	mov	r25, r24
     12e:	0e 94 aa 04 	call	0x954	; 0x954 <__floatsisf>
     132:	9b 01       	movw	r18, r22
     134:	ac 01       	movw	r20, r24
	float	perc = th / max_in;
	uint8_t finalThrottle = (perc * max_ut * scale + 0.5) + motor->throttle_offset;
     136:	c5 01       	movw	r24, r10
     138:	b4 01       	movw	r22, r8
     13a:	0e 94 36 05 	call	0xa6c	; 0xa6c <__mulsf3>
     13e:	a7 01       	movw	r20, r14
     140:	96 01       	movw	r18, r12
     142:	0e 94 36 05 	call	0xa6c	; 0xa6c <__mulsf3>
     146:	20 e0       	ldi	r18, 0x00	; 0
     148:	30 e0       	ldi	r19, 0x00	; 0
     14a:	40 e0       	ldi	r20, 0x00	; 0
     14c:	5f e3       	ldi	r21, 0x3F	; 63
     14e:	0e 94 b0 03 	call	0x760	; 0x760 <__addsf3>
     152:	6b 01       	movw	r12, r22
     154:	7c 01       	movw	r14, r24
     156:	66 2d       	mov	r22, r6
     158:	77 27       	eor	r23, r23
     15a:	67 fd       	sbrc	r22, 7
     15c:	70 95       	com	r23
     15e:	87 2f       	mov	r24, r23
     160:	97 2f       	mov	r25, r23
     162:	0e 94 aa 04 	call	0x954	; 0x954 <__floatsisf>
     166:	9b 01       	movw	r18, r22
     168:	ac 01       	movw	r20, r24
     16a:	c7 01       	movw	r24, r14
     16c:	b6 01       	movw	r22, r12
     16e:	0e 94 b0 03 	call	0x760	; 0x760 <__addsf3>
     172:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__fixunssfsi>
     176:	03 c0       	rjmp	.+6      	; 0x17e <motor_set_throttle+0xbe>
	
	
	
	
	if(th + motor->throttle_offset > 255) {
		finalThrottle = 255;
     178:	6f ef       	ldi	r22, 0xFF	; 255
     17a:	01 c0       	rjmp	.+2      	; 0x17e <motor_set_throttle+0xbe>
	}
	else if(th + motor->throttle_offset < 0) {
		finalThrottle = 0;
     17c:	60 e0       	ldi	r22, 0x00	; 0
	}
	//Set to stop!
	if (th == 0)
     17e:	71 10       	cpse	r7, r1
     180:	01 c0       	rjmp	.+2      	; 0x184 <motor_set_throttle+0xc4>
	{
		finalThrottle = 0;
     182:	60 e0       	ldi	r22, 0x00	; 0
	}
	
	// Reverse PWM output if going in reverse.
	if(motor->direction == 0) {
     184:	8b 81       	ldd	r24, Y+3	; 0x03
     186:	81 11       	cpse	r24, r1
     188:	01 c0       	rjmp	.+2      	; 0x18c <motor_set_throttle+0xcc>
		finalThrottle = 255 - finalThrottle;
     18a:	60 95       	com	r22
	}
	
	*(motor->OCR) = finalThrottle;
     18c:	e9 81       	ldd	r30, Y+1	; 0x01
     18e:	fa 81       	ldd	r31, Y+2	; 0x02
     190:	60 83       	st	Z, r22
}
     192:	df 91       	pop	r29
     194:	cf 91       	pop	r28
     196:	1f 91       	pop	r17
     198:	0f 91       	pop	r16
     19a:	ff 90       	pop	r15
     19c:	ef 90       	pop	r14
     19e:	df 90       	pop	r13
     1a0:	cf 90       	pop	r12
     1a2:	bf 90       	pop	r11
     1a4:	af 90       	pop	r10
     1a6:	9f 90       	pop	r9
     1a8:	8f 90       	pop	r8
     1aa:	7f 90       	pop	r7
     1ac:	6f 90       	pop	r6
     1ae:	08 95       	ret

000001b0 <motor_set_direction>:

void motor_set_direction(Motor *motor, uint8_t dir) {
     1b0:	fc 01       	movw	r30, r24
	if(dir == 1) {
     1b2:	61 30       	cpi	r22, 0x01	; 1
     1b4:	91 f4       	brne	.+36     	; 0x1da <motor_set_direction+0x2a>
		motor->direction = dir;
     1b6:	81 e0       	ldi	r24, 0x01	; 1
     1b8:	83 83       	std	Z+3, r24	; 0x03
		*(motor->dirPort) &= ~(1 << motor->dirPin);
     1ba:	a4 81       	ldd	r26, Z+4	; 0x04
     1bc:	b5 81       	ldd	r27, Z+5	; 0x05
     1be:	4c 91       	ld	r20, X
     1c0:	21 e0       	ldi	r18, 0x01	; 1
     1c2:	30 e0       	ldi	r19, 0x00	; 0
     1c4:	c9 01       	movw	r24, r18
     1c6:	06 80       	ldd	r0, Z+6	; 0x06
     1c8:	02 c0       	rjmp	.+4      	; 0x1ce <motor_set_direction+0x1e>
     1ca:	88 0f       	add	r24, r24
     1cc:	99 1f       	adc	r25, r25
     1ce:	0a 94       	dec	r0
     1d0:	e2 f7       	brpl	.-8      	; 0x1ca <motor_set_direction+0x1a>
     1d2:	80 95       	com	r24
     1d4:	84 23       	and	r24, r20
     1d6:	8c 93       	st	X, r24
     1d8:	08 95       	ret
	}
	else if(dir == 0) {
     1da:	61 11       	cpse	r22, r1
     1dc:	0f c0       	rjmp	.+30     	; 0x1fc <motor_set_direction+0x4c>
		motor->direction = dir;
     1de:	13 82       	std	Z+3, r1	; 0x03
		*(motor->dirPort) |= (1 << motor->dirPin);
     1e0:	a4 81       	ldd	r26, Z+4	; 0x04
     1e2:	b5 81       	ldd	r27, Z+5	; 0x05
     1e4:	4c 91       	ld	r20, X
     1e6:	21 e0       	ldi	r18, 0x01	; 1
     1e8:	30 e0       	ldi	r19, 0x00	; 0
     1ea:	c9 01       	movw	r24, r18
     1ec:	06 80       	ldd	r0, Z+6	; 0x06
     1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <motor_set_direction+0x44>
     1f0:	88 0f       	add	r24, r24
     1f2:	99 1f       	adc	r25, r25
     1f4:	0a 94       	dec	r0
     1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <motor_set_direction+0x40>
     1f8:	84 2b       	or	r24, r20
     1fa:	8c 93       	st	X, r24
     1fc:	08 95       	ret

000001fe <motor_init>:
#include "motor.h"

void motor_init(Motor *motor, uint8_t th_offset, volatile uint8_t *OCR, volatile uint8_t *DDR, volatile uint8_t *dirPort, uint8_t dirPin) {
     1fe:	ef 92       	push	r14
     200:	ff 92       	push	r15
     202:	0f 93       	push	r16
     204:	1f 93       	push	r17
	motor->throttle_offset = th_offset;
     206:	fc 01       	movw	r30, r24
     208:	60 83       	st	Z, r22
	motor->OCR = OCR;
     20a:	52 83       	std	Z+2, r21	; 0x02
     20c:	41 83       	std	Z+1, r20	; 0x01
	motor->dirPort = dirPort;
     20e:	15 83       	std	Z+5, r17	; 0x05
     210:	04 83       	std	Z+4, r16	; 0x04
	motor->dirPin = dirPin;
     212:	e6 82       	std	Z+6, r14	; 0x06
	*DDR |= (1 << dirPin);
     214:	f9 01       	movw	r30, r18
     216:	60 81       	ld	r22, Z
     218:	41 e0       	ldi	r20, 0x01	; 1
     21a:	50 e0       	ldi	r21, 0x00	; 0
     21c:	fa 01       	movw	r30, r20
     21e:	02 c0       	rjmp	.+4      	; 0x224 <motor_init+0x26>
     220:	ee 0f       	add	r30, r30
     222:	ff 1f       	adc	r31, r31
     224:	ea 94       	dec	r14
     226:	e2 f7       	brpl	.-8      	; 0x220 <motor_init+0x22>
     228:	7f 01       	movw	r14, r30
     22a:	e6 2a       	or	r14, r22
     22c:	f9 01       	movw	r30, r18
     22e:	e0 82       	st	Z, r14
	
	motor_set_direction(motor, 1);
     230:	61 e0       	ldi	r22, 0x01	; 1
     232:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <motor_set_direction>
}
     236:	1f 91       	pop	r17
     238:	0f 91       	pop	r16
     23a:	ff 90       	pop	r15
     23c:	ef 90       	pop	r14
     23e:	08 95       	ret

00000240 <uart_putchar>:

FILE mystdout;

int uart_putchar(char c, FILE *stream) 
{ 
	send_c(c);
     240:	0e 94 69 03 	call	0x6d2	; 0x6d2 <send_c>
	return 0;
}
     244:	80 e0       	ldi	r24, 0x00	; 0
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	08 95       	ret

0000024a <main>:



int main()
{
     24a:	cf 93       	push	r28
     24c:	df 93       	push	r29
     24e:	cd b7       	in	r28, 0x3d	; 61
     250:	de b7       	in	r29, 0x3e	; 62
     252:	63 97       	sbiw	r28, 0x13	; 19
     254:	0f b6       	in	r0, 0x3f	; 63
     256:	f8 94       	cli
     258:	de bf       	out	0x3e, r29	; 62
     25a:	0f be       	out	0x3f, r0	; 63
     25c:	cd bf       	out	0x3d, r28	; 61
	DDRD = 2;				// output
     25e:	82 e0       	ldi	r24, 0x02	; 2
     260:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xff;					// input
     262:	8f ef       	ldi	r24, 0xFF	; 255
     264:	84 b9       	out	0x04, r24	; 4
	SETBIT(PORTB,PB0);			// enable pull-up
     266:	28 9a       	sbi	0x05, 0	; 5
	SETBIT(PORTB,PB1);			// enable pull-up
     268:	29 9a       	sbi	0x05, 1	; 5
	
	//Set up motor pwm
	Motor leftMotor;
	Motor rightMotor;
	//left OCA & PD7
	motor_init(&leftMotor, 10, &OCR0A, &DDRD, &PORTD, 7);
     26a:	0f 2e       	mov	r0, r31
     26c:	f7 e0       	ldi	r31, 0x07	; 7
     26e:	ef 2e       	mov	r14, r31
     270:	f0 2d       	mov	r31, r0
     272:	0b e2       	ldi	r16, 0x2B	; 43
     274:	10 e0       	ldi	r17, 0x00	; 0
     276:	2a e2       	ldi	r18, 0x2A	; 42
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	47 e4       	ldi	r20, 0x47	; 71
     27c:	50 e0       	ldi	r21, 0x00	; 0
     27e:	6a e0       	ldi	r22, 0x0A	; 10
     280:	ce 01       	movw	r24, r28
     282:	01 96       	adiw	r24, 0x01	; 1
     284:	0e 94 ff 00 	call	0x1fe	; 0x1fe <motor_init>
	//right OCB & PB7
	motor_init(&rightMotor, 10, &OCR0B, &DDRB, &PORTB, 7);
     288:	05 e2       	ldi	r16, 0x25	; 37
     28a:	10 e0       	ldi	r17, 0x00	; 0
     28c:	24 e2       	ldi	r18, 0x24	; 36
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	48 e4       	ldi	r20, 0x48	; 72
     292:	50 e0       	ldi	r21, 0x00	; 0
     294:	6a e0       	ldi	r22, 0x0A	; 10
     296:	ce 01       	movw	r24, r28
     298:	08 96       	adiw	r24, 0x08	; 8
     29a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <motor_init>

	motor_pwm_init(); 
     29e:	0e 94 53 00 	call	0xa6	; 0xa6 <motor_pwm_init>
	

	sei();
     2a2:	78 94       	sei
	InitUART(9600);	
     2a4:	80 e8       	ldi	r24, 0x80	; 128
     2a6:	95 e2       	ldi	r25, 0x25	; 37
     2a8:	0e 94 33 02 	call	0x466	; 0x466 <InitUART>
	
	fdev_setup_stream(&mystdout, uart_putchar, NULL, _FDEV_SETUP_WRITE);
     2ac:	80 e2       	ldi	r24, 0x20	; 32
     2ae:	91 e0       	ldi	r25, 0x01	; 1
     2b0:	90 93 33 01 	sts	0x0133, r25
     2b4:	80 93 32 01 	sts	0x0132, r24
     2b8:	10 92 35 01 	sts	0x0135, r1
     2bc:	10 92 34 01 	sts	0x0134, r1
     2c0:	82 e0       	ldi	r24, 0x02	; 2
     2c2:	80 93 2d 01 	sts	0x012D, r24
     2c6:	10 92 37 01 	sts	0x0137, r1
     2ca:	10 92 36 01 	sts	0x0136, r1
	stdout = &mystdout;			
     2ce:	8a e2       	ldi	r24, 0x2A	; 42
     2d0:	91 e0       	ldi	r25, 0x01	; 1
     2d2:	90 93 03 02 	sts	0x0203, r25
     2d6:	80 93 02 02 	sts	0x0202, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2da:	8f e0       	ldi	r24, 0x0F	; 15
     2dc:	97 e2       	ldi	r25, 0x27	; 39
     2de:	01 97       	sbiw	r24, 0x01	; 1
     2e0:	f1 f7       	brne	.-4      	; 0x2de <main+0x94>
     2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <main+0x9a>
     2e4:	00 00       	nop
	_delay_ms(5);
	
	send_string(" Wait", 5);
     2e6:	65 e0       	ldi	r22, 0x05	; 5
     2e8:	88 e0       	ldi	r24, 0x08	; 8
     2ea:	91 e0       	ldi	r25, 0x01	; 1
     2ec:	0e 94 89 03 	call	0x712	; 0x712 <send_string>
	
	int thLeft = 127,  thRight = 127;
     2f0:	0f 2e       	mov	r0, r31
     2f2:	ff e7       	ldi	r31, 0x7F	; 127
     2f4:	ef 2e       	mov	r14, r31
     2f6:	f1 2c       	mov	r15, r1
     2f8:	f0 2d       	mov	r31, r0
     2fa:	0f e7       	ldi	r16, 0x7F	; 127
     2fc:	10 e0       	ldi	r17, 0x00	; 0
			switch(inc.type)
			{
				case 1:
					thLeft = inc.payload[0];
					thRight = inc.payload[1];
					printf("Paket! %d & %d\n\r", inc.payload[0], inc.payload[1]);
     2fe:	0f 2e       	mov	r0, r31
     300:	fe e0       	ldi	r31, 0x0E	; 14
     302:	cf 2e       	mov	r12, r31
     304:	f1 e0       	ldi	r31, 0x01	; 1
     306:	df 2e       	mov	r13, r31
     308:	f0 2d       	mov	r31, r0
		}
		
		
		if(thLeft < 127) {
			motor_set_direction(&leftMotor, 0);
			motor_set_throttle(&leftMotor, 127 - thLeft, th_scale);
     30a:	0f 2e       	mov	r0, r31
     30c:	ff e7       	ldi	r31, 0x7F	; 127
     30e:	bf 2e       	mov	r11, r31
     310:	f0 2d       	mov	r31, r0
     312:	8f e6       	ldi	r24, 0x6F	; 111
     314:	97 e1       	ldi	r25, 0x17	; 23
     316:	01 97       	sbiw	r24, 0x01	; 1
     318:	f1 f7       	brne	.-4      	; 0x316 <main+0xcc>
     31a:	00 c0       	rjmp	.+0      	; 0x31c <main+0xd2>
     31c:	00 00       	nop
	
	while(1)
	{
				
 		_delay_ms(3);
		super_paketet inc = check_for_package();
     31e:	0e 94 9b 02 	call	0x536	; 0x536 <check_for_package>
     322:	2f 87       	std	Y+15, r18	; 0x0f
     324:	38 8b       	std	Y+16, r19	; 0x10
     326:	49 8b       	std	Y+17, r20	; 0x11
     328:	5a 8b       	std	Y+18, r21	; 0x12
     32a:	6b 8b       	std	Y+19, r22	; 0x13
		if (inc.adress != 0)
     32c:	22 23       	and	r18, r18
     32e:	09 f4       	brne	.+2      	; 0x332 <main+0xe8>
     330:	44 c0       	rjmp	.+136    	; 0x3ba <main+0x170>
		{
			switch(inc.type)
     332:	31 30       	cpi	r19, 0x01	; 1
     334:	19 f0       	breq	.+6      	; 0x33c <main+0xf2>
     336:	32 30       	cpi	r19, 0x02	; 2
     338:	b1 f0       	breq	.+44     	; 0x366 <main+0x11c>
     33a:	3a c0       	rjmp	.+116    	; 0x3b0 <main+0x166>
			{
				case 1:
					thLeft = inc.payload[0];
     33c:	89 89       	ldd	r24, Y+17	; 0x11
     33e:	08 2f       	mov	r16, r24
     340:	10 e0       	ldi	r17, 0x00	; 0
					thRight = inc.payload[1];
     342:	9a 89       	ldd	r25, Y+18	; 0x12
     344:	e9 2e       	mov	r14, r25
     346:	f1 2c       	mov	r15, r1
					printf("Paket! %d & %d\n\r", inc.payload[0], inc.payload[1]);
     348:	1f 92       	push	r1
     34a:	9f 93       	push	r25
     34c:	1f 92       	push	r1
     34e:	8f 93       	push	r24
     350:	df 92       	push	r13
     352:	cf 92       	push	r12
     354:	0e 94 bb 05 	call	0xb76	; 0xb76 <printf>
					break;
     358:	0f 90       	pop	r0
     35a:	0f 90       	pop	r0
     35c:	0f 90       	pop	r0
     35e:	0f 90       	pop	r0
     360:	0f 90       	pop	r0
     362:	0f 90       	pop	r0
     364:	2a c0       	rjmp	.+84     	; 0x3ba <main+0x170>
				case 2:		//Throttle scaling
					th_scale = *(uint16_t*)inc.payload / 10000.0;
     366:	69 89       	ldd	r22, Y+17	; 0x11
     368:	7a 89       	ldd	r23, Y+18	; 0x12
     36a:	80 e0       	ldi	r24, 0x00	; 0
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	0e 94 a8 04 	call	0x950	; 0x950 <__floatunsisf>
     372:	20 e0       	ldi	r18, 0x00	; 0
     374:	30 e4       	ldi	r19, 0x40	; 64
     376:	4c e1       	ldi	r20, 0x1C	; 28
     378:	56 e4       	ldi	r21, 0x46	; 70
     37a:	0e 94 14 04 	call	0x828	; 0x828 <__divsf3>
     37e:	60 93 00 01 	sts	0x0100, r22
     382:	70 93 01 01 	sts	0x0101, r23
     386:	80 93 02 01 	sts	0x0102, r24
     38a:	90 93 03 01 	sts	0x0103, r25
					printf("Paket! %d & %d\n\r", inc.payload[0], inc.payload[1]);
     38e:	8a 89       	ldd	r24, Y+18	; 0x12
     390:	1f 92       	push	r1
     392:	8f 93       	push	r24
     394:	89 89       	ldd	r24, Y+17	; 0x11
     396:	1f 92       	push	r1
     398:	8f 93       	push	r24
     39a:	df 92       	push	r13
     39c:	cf 92       	push	r12
     39e:	0e 94 bb 05 	call	0xb76	; 0xb76 <printf>
					break;
     3a2:	0f 90       	pop	r0
     3a4:	0f 90       	pop	r0
     3a6:	0f 90       	pop	r0
     3a8:	0f 90       	pop	r0
     3aa:	0f 90       	pop	r0
     3ac:	0f 90       	pop	r0
     3ae:	05 c0       	rjmp	.+10     	; 0x3ba <main+0x170>
				default:
					send_string(".", 1);
     3b0:	61 e0       	ldi	r22, 0x01	; 1
     3b2:	8f e1       	ldi	r24, 0x1F	; 31
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	0e 94 89 03 	call	0x712	; 0x712 <send_string>
					break;
			}
		}
		
		
		if(thLeft < 127) {
     3ba:	0f 37       	cpi	r16, 0x7F	; 127
     3bc:	11 05       	cpc	r17, r1
     3be:	a4 f4       	brge	.+40     	; 0x3e8 <main+0x19e>
			motor_set_direction(&leftMotor, 0);
     3c0:	60 e0       	ldi	r22, 0x00	; 0
     3c2:	ce 01       	movw	r24, r28
     3c4:	01 96       	adiw	r24, 0x01	; 1
     3c6:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <motor_set_direction>
			motor_set_throttle(&leftMotor, 127 - thLeft, th_scale);
     3ca:	20 91 00 01 	lds	r18, 0x0100
     3ce:	30 91 01 01 	lds	r19, 0x0101
     3d2:	40 91 02 01 	lds	r20, 0x0102
     3d6:	50 91 03 01 	lds	r21, 0x0103
     3da:	6b 2d       	mov	r22, r11
     3dc:	60 1b       	sub	r22, r16
     3de:	ce 01       	movw	r24, r28
     3e0:	01 96       	adiw	r24, 0x01	; 1
     3e2:	0e 94 60 00 	call	0xc0	; 0xc0 <motor_set_throttle>
     3e6:	13 c0       	rjmp	.+38     	; 0x40e <main+0x1c4>
		}
		else 
		{
			motor_set_direction(&leftMotor, 1);
     3e8:	61 e0       	ldi	r22, 0x01	; 1
     3ea:	ce 01       	movw	r24, r28
     3ec:	01 96       	adiw	r24, 0x01	; 1
     3ee:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <motor_set_direction>
			motor_set_throttle(&leftMotor, thLeft - 127, th_scale);
     3f2:	20 91 00 01 	lds	r18, 0x0100
     3f6:	30 91 01 01 	lds	r19, 0x0101
     3fa:	40 91 02 01 	lds	r20, 0x0102
     3fe:	50 91 03 01 	lds	r21, 0x0103
     402:	61 e8       	ldi	r22, 0x81	; 129
     404:	60 0f       	add	r22, r16
     406:	ce 01       	movw	r24, r28
     408:	01 96       	adiw	r24, 0x01	; 1
     40a:	0e 94 60 00 	call	0xc0	; 0xc0 <motor_set_throttle>
		}
		
		if(thRight < 127) {
     40e:	9f e7       	ldi	r25, 0x7F	; 127
     410:	e9 16       	cp	r14, r25
     412:	f1 04       	cpc	r15, r1
     414:	a4 f4       	brge	.+40     	; 0x43e <main+0x1f4>
			motor_set_direction(&rightMotor, 0);
     416:	60 e0       	ldi	r22, 0x00	; 0
     418:	ce 01       	movw	r24, r28
     41a:	08 96       	adiw	r24, 0x08	; 8
     41c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <motor_set_direction>
			motor_set_throttle(&rightMotor, 127 - thRight, th_scale);
     420:	20 91 00 01 	lds	r18, 0x0100
     424:	30 91 01 01 	lds	r19, 0x0101
     428:	40 91 02 01 	lds	r20, 0x0102
     42c:	50 91 03 01 	lds	r21, 0x0103
     430:	6b 2d       	mov	r22, r11
     432:	6e 19       	sub	r22, r14
     434:	ce 01       	movw	r24, r28
     436:	08 96       	adiw	r24, 0x08	; 8
     438:	0e 94 60 00 	call	0xc0	; 0xc0 <motor_set_throttle>
     43c:	6a cf       	rjmp	.-300    	; 0x312 <main+0xc8>
		}
		else {
			motor_set_direction(&rightMotor, 1);
     43e:	61 e0       	ldi	r22, 0x01	; 1
     440:	ce 01       	movw	r24, r28
     442:	08 96       	adiw	r24, 0x08	; 8
     444:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <motor_set_direction>
			motor_set_throttle(&rightMotor, thRight - 127, th_scale);
     448:	20 91 00 01 	lds	r18, 0x0100
     44c:	30 91 01 01 	lds	r19, 0x0101
     450:	40 91 02 01 	lds	r20, 0x0102
     454:	50 91 03 01 	lds	r21, 0x0103
     458:	61 e8       	ldi	r22, 0x81	; 129
     45a:	6e 0d       	add	r22, r14
     45c:	ce 01       	movw	r24, r28
     45e:	08 96       	adiw	r24, 0x08	; 8
     460:	0e 94 60 00 	call	0xc0	; 0xc0 <motor_set_throttle>
		}
		
	}
     464:	56 cf       	rjmp	.-340    	; 0x312 <main+0xc8>

00000466 <InitUART>:
#define PREAMBLE 0x55FF
#define PACKAGE_SIZE sizeof(super_paketet)

void InitUART( unsigned int baud )
{
	int baudfactor = (F_CPU/16/baud-1);
     466:	9c 01       	movw	r18, r24
     468:	40 e0       	ldi	r20, 0x00	; 0
     46a:	50 e0       	ldi	r21, 0x00	; 0
     46c:	60 e2       	ldi	r22, 0x20	; 32
     46e:	71 ea       	ldi	r23, 0xA1	; 161
     470:	87 e0       	ldi	r24, 0x07	; 7
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	0e 94 99 05 	call	0xb32	; 0xb32 <__udivmodsi4>
     478:	21 50       	subi	r18, 0x01	; 1
     47a:	31 09       	sbc	r19, r1
	UBRR0H = (unsigned char)(baudfactor>>8);	//set the baud rate
     47c:	30 93 c5 00 	sts	0x00C5, r19
	UBRR0L = (unsigned char)baudfactor;
     480:	20 93 c4 00 	sts	0x00C4, r18
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);			//enable UART receiver and transmitter
     484:	e1 ec       	ldi	r30, 0xC1	; 193
     486:	f0 e0       	ldi	r31, 0x00	; 0
     488:	88 e1       	ldi	r24, 0x18	; 24
     48a:	80 83       	st	Z, r24
	/* Set frame format: 8data */
	UCSR0C = (3<<UCSZ00);
     48c:	86 e0       	ldi	r24, 0x06	; 6
     48e:	80 93 c2 00 	sts	0x00C2, r24
	//Activate interrupts
	UCSR0B |= (1 << UDRIE0) + (1 << RXCIE0);
     492:	80 81       	ld	r24, Z
     494:	80 6a       	ori	r24, 0xA0	; 160
     496:	80 83       	st	Z, r24
     498:	08 95       	ret

0000049a <do_crc>:

//make crc checksum
uint8_t do_crc(uint8_t in_data[], uint8_t length)
{
	uint8_t ret = 0;
	for (int i = 0; i < length; i++)
     49a:	70 e0       	ldi	r23, 0x00	; 0
     49c:	16 16       	cp	r1, r22
     49e:	17 06       	cpc	r1, r23
     4a0:	6c f4       	brge	.+26     	; 0x4bc <do_crc+0x22>
     4a2:	e8 2f       	mov	r30, r24
     4a4:	f9 2f       	mov	r31, r25
     4a6:	20 e0       	ldi	r18, 0x00	; 0
     4a8:	30 e0       	ldi	r19, 0x00	; 0


//make crc checksum
uint8_t do_crc(uint8_t in_data[], uint8_t length)
{
	uint8_t ret = 0;
     4aa:	80 e0       	ldi	r24, 0x00	; 0
	for (int i = 0; i < length; i++)
	{
		//xor
		ret ^= in_data[i];
     4ac:	91 91       	ld	r25, Z+
     4ae:	89 27       	eor	r24, r25

//make crc checksum
uint8_t do_crc(uint8_t in_data[], uint8_t length)
{
	uint8_t ret = 0;
	for (int i = 0; i < length; i++)
     4b0:	2f 5f       	subi	r18, 0xFF	; 255
     4b2:	3f 4f       	sbci	r19, 0xFF	; 255
     4b4:	26 17       	cp	r18, r22
     4b6:	37 07       	cpc	r19, r23
     4b8:	cc f3       	brlt	.-14     	; 0x4ac <do_crc+0x12>
     4ba:	08 95       	ret


//make crc checksum
uint8_t do_crc(uint8_t in_data[], uint8_t length)
{
	uint8_t ret = 0;
     4bc:	80 e0       	ldi	r24, 0x00	; 0
	{
		//xor
		ret ^= in_data[i];
	}
	return ret;
}
     4be:	08 95       	ret

000004c0 <process_data_for_package>:

//Call from isr
super_paketet process_data_for_package(char incomming_byte)
{
     4c0:	1f 93       	push	r17
     4c2:	cf 93       	push	r28
     4c4:	df 93       	push	r29
     4c6:	00 d0       	rcall	.+0      	; 0x4c8 <process_data_for_package+0x8>
     4c8:	00 d0       	rcall	.+0      	; 0x4ca <process_data_for_package+0xa>
     4ca:	1f 92       	push	r1
     4cc:	cd b7       	in	r28, 0x3d	; 61
     4ce:	de b7       	in	r29, 0x3e	; 62
     4d0:	18 2f       	mov	r17, r24
	//static uint8_t		counter = 0;
	super_paketet *package = (super_paketet *)buffer;
	super_paketet *new_package = (super_paketet *)(buffer + 1);
	
	//move into last place in buffer
	buffer[PACKAGE_SIZE] = incomming_byte;
     4d2:	80 93 27 01 	sts	0x0127, r24
// 			//*buffer = *++buffer;
// 		}
// 	}
// 	
	//Copy new content
	*package = *new_package;
     4d6:	95 e0       	ldi	r25, 0x05	; 5
     4d8:	e3 e2       	ldi	r30, 0x23	; 35
     4da:	f1 e0       	ldi	r31, 0x01	; 1
     4dc:	a2 e2       	ldi	r26, 0x22	; 34
     4de:	b1 e0       	ldi	r27, 0x01	; 1
     4e0:	01 90       	ld	r0, Z+
     4e2:	0d 92       	st	X+, r0
     4e4:	9a 95       	dec	r25
     4e6:	e1 f7       	brne	.-8      	; 0x4e0 <process_data_for_package+0x20>
	//check for package
	
	
	if (package->adress == ADRESS)
     4e8:	80 91 22 01 	lds	r24, 0x0122
     4ec:	86 36       	cpi	r24, 0x66	; 102
     4ee:	89 f4       	brne	.+34     	; 0x512 <process_data_for_package+0x52>
	{
		//Woo paket!
		//Crc osv
		if (package->crc == do_crc((uint8_t*)package, PACKAGE_SIZE - 1))
     4f0:	64 e0       	ldi	r22, 0x04	; 4
     4f2:	82 e2       	ldi	r24, 0x22	; 34
     4f4:	91 e0       	ldi	r25, 0x01	; 1
     4f6:	0e 94 4d 02 	call	0x49a	; 0x49a <do_crc>
     4fa:	18 13       	cpse	r17, r24
     4fc:	0a c0       	rjmp	.+20     	; 0x512 <process_data_for_package+0x52>
		{
			return *package;
     4fe:	85 e0       	ldi	r24, 0x05	; 5
     500:	e2 e2       	ldi	r30, 0x22	; 34
     502:	f1 e0       	ldi	r31, 0x01	; 1
     504:	de 01       	movw	r26, r28
     506:	11 96       	adiw	r26, 0x01	; 1
     508:	01 90       	ld	r0, Z+
     50a:	0d 92       	st	X+, r0
     50c:	8a 95       	dec	r24
     50e:	e1 f7       	brne	.-8      	; 0x508 <process_data_for_package+0x48>
     510:	01 c0       	rjmp	.+2      	; 0x514 <process_data_for_package+0x54>
		}
	}
	super_paketet fail_return;
	fail_return.adress = 0;
	
	return fail_return;
     512:	19 82       	std	Y+1, r1	; 0x01
     514:	29 81       	ldd	r18, Y+1	; 0x01
     516:	3a 81       	ldd	r19, Y+2	; 0x02
     518:	4b 81       	ldd	r20, Y+3	; 0x03
     51a:	5c 81       	ldd	r21, Y+4	; 0x04
     51c:	6d 81       	ldd	r22, Y+5	; 0x05
}
     51e:	70 e0       	ldi	r23, 0x00	; 0
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	0f 90       	pop	r0
     526:	0f 90       	pop	r0
     528:	0f 90       	pop	r0
     52a:	0f 90       	pop	r0
     52c:	0f 90       	pop	r0
     52e:	df 91       	pop	r29
     530:	cf 91       	pop	r28
     532:	1f 91       	pop	r17
     534:	08 95       	ret

00000536 <check_for_package>:

//Fetch new packages if there is one
super_paketet check_for_package()
{
     536:	cf 93       	push	r28
     538:	df 93       	push	r29
     53a:	cd b7       	in	r28, 0x3d	; 61
     53c:	de b7       	in	r29, 0x3e	; 62
     53e:	2b 97       	sbiw	r28, 0x0b	; 11
     540:	0f b6       	in	r0, 0x3f	; 63
     542:	f8 94       	cli
     544:	de bf       	out	0x3e, r29	; 62
     546:	0f be       	out	0x3f, r0	; 63
     548:	cd bf       	out	0x3d, r28	; 61
	char incomming_byte;
	//Check if we have data
	while (ReceiveByte(&incomming_byte))
     54a:	14 c0       	rjmp	.+40     	; 0x574 <check_for_package+0x3e>
	{
		super_paketet incomming_package;
		//Send new data for processing
		incomming_package = process_data_for_package(incomming_byte);
     54c:	8e 81       	ldd	r24, Y+6	; 0x06
     54e:	0e 94 60 02 	call	0x4c0	; 0x4c0 <process_data_for_package>
     552:	2f 83       	std	Y+7, r18	; 0x07
     554:	38 87       	std	Y+8, r19	; 0x08
     556:	49 87       	std	Y+9, r20	; 0x09
     558:	5a 87       	std	Y+10, r21	; 0x0a
     55a:	6b 87       	std	Y+11, r22	; 0x0b
		//Check if we got a package
		if (incomming_package.adress != 0)
     55c:	22 23       	and	r18, r18
     55e:	51 f0       	breq	.+20     	; 0x574 <check_for_package+0x3e>
		{
			return incomming_package;
     560:	85 e0       	ldi	r24, 0x05	; 5
     562:	fe 01       	movw	r30, r28
     564:	37 96       	adiw	r30, 0x07	; 7
     566:	de 01       	movw	r26, r28
     568:	11 96       	adiw	r26, 0x01	; 1
     56a:	01 90       	ld	r0, Z+
     56c:	0d 92       	st	X+, r0
     56e:	8a 95       	dec	r24
     570:	e1 f7       	brne	.-8      	; 0x56a <check_for_package+0x34>
     572:	07 c0       	rjmp	.+14     	; 0x582 <check_for_package+0x4c>
//Fetch new packages if there is one
super_paketet check_for_package()
{
	char incomming_byte;
	//Check if we have data
	while (ReceiveByte(&incomming_byte))
     574:	ce 01       	movw	r24, r28
     576:	06 96       	adiw	r24, 0x06	; 6
     578:	0e 94 48 03 	call	0x690	; 0x690 <ReceiveByte>
     57c:	81 11       	cpse	r24, r1
     57e:	e6 cf       	rjmp	.-52     	; 0x54c <check_for_package+0x16>
		}
	}
	super_paketet fail_return;
	fail_return.adress = 0;
	
	return fail_return;
     580:	19 82       	std	Y+1, r1	; 0x01
     582:	29 81       	ldd	r18, Y+1	; 0x01
     584:	3a 81       	ldd	r19, Y+2	; 0x02
     586:	4b 81       	ldd	r20, Y+3	; 0x03
     588:	5c 81       	ldd	r21, Y+4	; 0x04
     58a:	6d 81       	ldd	r22, Y+5	; 0x05
}
     58c:	70 e0       	ldi	r23, 0x00	; 0
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	2b 96       	adiw	r28, 0x0b	; 11
     594:	0f b6       	in	r0, 0x3f	; 63
     596:	f8 94       	cli
     598:	de bf       	out	0x3e, r29	; 62
     59a:	0f be       	out	0x3f, r0	; 63
     59c:	cd bf       	out	0x3d, r28	; 61
     59e:	df 91       	pop	r29
     5a0:	cf 91       	pop	r28
     5a2:	08 95       	ret

000005a4 <__vector_19>:
#define release_lock()	sei()

//Usart transmit interrupt
//This interrupt is always called when UDR is empty
ISR(USART_UDRE_vect)
{
     5a4:	1f 92       	push	r1
     5a6:	0f 92       	push	r0
     5a8:	0f b6       	in	r0, 0x3f	; 63
     5aa:	0f 92       	push	r0
     5ac:	11 24       	eor	r1, r1
     5ae:	2f 93       	push	r18
     5b0:	8f 93       	push	r24
     5b2:	9f 93       	push	r25
     5b4:	ef 93       	push	r30
     5b6:	ff 93       	push	r31
	// check for empty transmit buffer	and if we have data
	if ( 0 != outgoing_data_counter)
     5b8:	80 91 29 01 	lds	r24, 0x0129
     5bc:	88 23       	and	r24, r24
     5be:	09 f1       	breq	.+66     	; 0x602 <__vector_19+0x5e>
	{
		outgoing_data_counter--;
     5c0:	80 91 29 01 	lds	r24, 0x0129
     5c4:	81 50       	subi	r24, 0x01	; 1
     5c6:	80 93 29 01 	sts	0x0129, r24
		UDR0 = *outgoing_data_head; 		// start transmition
     5ca:	e0 91 06 01 	lds	r30, 0x0106
     5ce:	f0 91 07 01 	lds	r31, 0x0107
     5d2:	80 81       	ld	r24, Z
     5d4:	80 93 c6 00 	sts	0x00C6, r24
		outgoing_data_head++;
     5d8:	80 91 06 01 	lds	r24, 0x0106
     5dc:	90 91 07 01 	lds	r25, 0x0107
     5e0:	01 96       	adiw	r24, 0x01	; 1
		if (outgoing_data_head >= (outgoing_data + USART_TX_BUFFER_SIZE))
     5e2:	22 e0       	ldi	r18, 0x02	; 2
     5e4:	80 30       	cpi	r24, 0x00	; 0
     5e6:	92 07       	cpc	r25, r18
     5e8:	28 f4       	brcc	.+10     	; 0x5f4 <__vector_19+0x50>
	// check for empty transmit buffer	and if we have data
	if ( 0 != outgoing_data_counter)
	{
		outgoing_data_counter--;
		UDR0 = *outgoing_data_head; 		// start transmition
		outgoing_data_head++;
     5ea:	90 93 07 01 	sts	0x0107, r25
     5ee:	80 93 06 01 	sts	0x0106, r24
     5f2:	0c c0       	rjmp	.+24     	; 0x60c <__vector_19+0x68>
		if (outgoing_data_head >= (outgoing_data + USART_TX_BUFFER_SIZE))
		{
			outgoing_data_head = outgoing_data;	//reset ring buffer
     5f4:	8c e9       	ldi	r24, 0x9C	; 156
     5f6:	91 e0       	ldi	r25, 0x01	; 1
     5f8:	90 93 07 01 	sts	0x0107, r25
     5fc:	80 93 06 01 	sts	0x0106, r24
     600:	05 c0       	rjmp	.+10     	; 0x60c <__vector_19+0x68>
		}
	}else{
		//Inactivate interrupt
		UCSR0B &= ~(1 << UDRIE0);
     602:	e1 ec       	ldi	r30, 0xC1	; 193
     604:	f0 e0       	ldi	r31, 0x00	; 0
     606:	80 81       	ld	r24, Z
     608:	8f 7d       	andi	r24, 0xDF	; 223
     60a:	80 83       	st	Z, r24
		
	}
}
     60c:	ff 91       	pop	r31
     60e:	ef 91       	pop	r30
     610:	9f 91       	pop	r25
     612:	8f 91       	pop	r24
     614:	2f 91       	pop	r18
     616:	0f 90       	pop	r0
     618:	0f be       	out	0x3f, r0	; 63
     61a:	0f 90       	pop	r0
     61c:	1f 90       	pop	r1
     61e:	18 95       	reti

00000620 <__vector_18>:
//Usart receive interrupt
ISR(USART_RX_vect)
{
     620:	1f 92       	push	r1
     622:	0f 92       	push	r0
     624:	0f b6       	in	r0, 0x3f	; 63
     626:	0f 92       	push	r0
     628:	11 24       	eor	r1, r1
     62a:	2f 93       	push	r18
     62c:	8f 93       	push	r24
     62e:	9f 93       	push	r25
     630:	ef 93       	push	r30
     632:	ff 93       	push	r31
	//place char into buffer
	*incomming_data_head = UDR0;	//Read from UDR gets RX byte
     634:	e0 91 04 01 	lds	r30, 0x0104
     638:	f0 91 05 01 	lds	r31, 0x0105
     63c:	80 91 c6 00 	lds	r24, 0x00C6
     640:	80 83       	st	Z, r24
	
	//increase head
	incomming_data_head++;
     642:	80 91 04 01 	lds	r24, 0x0104
     646:	90 91 05 01 	lds	r25, 0x0105
     64a:	01 96       	adiw	r24, 0x01	; 1
	
	
	//Check for overflow head
	if (incomming_data_head >= (incomming_data + USART_RX_BUFFER_SIZE))
     64c:	21 e0       	ldi	r18, 0x01	; 1
     64e:	8c 39       	cpi	r24, 0x9C	; 156
     650:	92 07       	cpc	r25, r18
     652:	28 f4       	brcc	.+10     	; 0x65e <__vector_18+0x3e>
{
	//place char into buffer
	*incomming_data_head = UDR0;	//Read from UDR gets RX byte
	
	//increase head
	incomming_data_head++;
     654:	90 93 05 01 	sts	0x0105, r25
     658:	80 93 04 01 	sts	0x0104, r24
     65c:	06 c0       	rjmp	.+12     	; 0x66a <__vector_18+0x4a>
	
	//Check for overflow head
	if (incomming_data_head >= (incomming_data + USART_RX_BUFFER_SIZE))
	{
		//End of ring, go around
		incomming_data_head = incomming_data;
     65e:	88 e3       	ldi	r24, 0x38	; 56
     660:	91 e0       	ldi	r25, 0x01	; 1
     662:	90 93 05 01 	sts	0x0105, r25
     666:	80 93 04 01 	sts	0x0104, r24
	}
	//Check for overflow counter
	if(incomming_data_counter < USART_RX_BUFFER_SIZE)
     66a:	80 91 28 01 	lds	r24, 0x0128
     66e:	84 36       	cpi	r24, 0x64	; 100
     670:	28 f4       	brcc	.+10     	; 0x67c <__vector_18+0x5c>
	{
		incomming_data_counter++;
     672:	80 91 28 01 	lds	r24, 0x0128
     676:	8f 5f       	subi	r24, 0xFF	; 255
     678:	80 93 28 01 	sts	0x0128, r24
	}
}
     67c:	ff 91       	pop	r31
     67e:	ef 91       	pop	r30
     680:	9f 91       	pop	r25
     682:	8f 91       	pop	r24
     684:	2f 91       	pop	r18
     686:	0f 90       	pop	r0
     688:	0f be       	out	0x3f, r0	; 63
     68a:	0f 90       	pop	r0
     68c:	1f 90       	pop	r1
     68e:	18 95       	reti

00000690 <ReceiveByte>:

/* Read and write functions */
char ReceiveByte(char * result)
{
	get_lock();
     690:	f8 94       	cli
	//If we have data
	if (incomming_data_counter > 0)
     692:	20 91 28 01 	lds	r18, 0x0128
     696:	22 23       	and	r18, r18
     698:	c9 f0       	breq	.+50     	; 0x6cc <ReceiveByte+0x3c>
	{
		//Assign pointer to data 
		//Read buffer in reverse because we add positive
		volatile char * temp = incomming_data_head - incomming_data_counter;
     69a:	20 91 28 01 	lds	r18, 0x0128
     69e:	e0 91 04 01 	lds	r30, 0x0104
     6a2:	f0 91 05 01 	lds	r31, 0x0105
     6a6:	e2 1b       	sub	r30, r18
     6a8:	f1 09       	sbc	r31, r1
		
		//Check pointer for overflow
		if (temp < incomming_data )
     6aa:	21 e0       	ldi	r18, 0x01	; 1
     6ac:	e8 33       	cpi	r30, 0x38	; 56
     6ae:	f2 07       	cpc	r31, r18
     6b0:	10 f4       	brcc	.+4      	; 0x6b6 <ReceiveByte+0x26>
		{
			temp += USART_RX_BUFFER_SIZE;	//Wrap around
     6b2:	ec 59       	subi	r30, 0x9C	; 156
     6b4:	ff 4f       	sbci	r31, 0xFF	; 255
		}
		//Decrease counter
		incomming_data_counter--;
     6b6:	20 91 28 01 	lds	r18, 0x0128
     6ba:	21 50       	subi	r18, 0x01	; 1
     6bc:	20 93 28 01 	sts	0x0128, r18

		//return that data
		*result = *temp;
     6c0:	20 81       	ld	r18, Z
     6c2:	fc 01       	movw	r30, r24
     6c4:	20 83       	st	Z, r18
		release_lock();
     6c6:	78 94       	sei
		
		return 1;
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	08 95       	ret
	} 
	else
	{
		//Else fail
		release_lock();
     6cc:	78 94       	sei
		return 0;								// return the data
     6ce:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     6d0:	08 95       	ret

000006d2 <send_c>:
	return temp;
}

void send_c(char c)
{
	get_lock();
     6d2:	f8 94       	cli
	//Check if there is space in the buffer
	if (outgoing_data_counter < USART_TX_BUFFER_SIZE)
     6d4:	90 91 29 01 	lds	r25, 0x0129
     6d8:	94 36       	cpi	r25, 0x64	; 100
     6da:	c8 f4       	brcc	.+50     	; 0x70e <send_c+0x3c>
	{
		volatile char * temp = (outgoing_data_head + outgoing_data_counter);
     6dc:	90 91 29 01 	lds	r25, 0x0129
     6e0:	e0 91 06 01 	lds	r30, 0x0106
     6e4:	f0 91 07 01 	lds	r31, 0x0107
     6e8:	e9 0f       	add	r30, r25
     6ea:	f1 1d       	adc	r31, r1
	
		//Check for overflow
		if (temp >= (outgoing_data + USART_TX_BUFFER_SIZE))
     6ec:	92 e0       	ldi	r25, 0x02	; 2
     6ee:	e0 30       	cpi	r30, 0x00	; 0
     6f0:	f9 07       	cpc	r31, r25
     6f2:	10 f0       	brcs	.+4      	; 0x6f8 <send_c+0x26>
		{
			temp -= USART_TX_BUFFER_SIZE;
     6f4:	e4 56       	subi	r30, 0x64	; 100
     6f6:	f1 09       	sbc	r31, r1
		}

		*temp = c;		//add to queue
     6f8:	80 83       	st	Z, r24
		outgoing_data_counter++;
     6fa:	80 91 29 01 	lds	r24, 0x0129
     6fe:	8f 5f       	subi	r24, 0xFF	; 255
     700:	80 93 29 01 	sts	0x0129, r24
		//Activate TX interrupt
		UCSR0B |= (1 << UDRIE0);
     704:	e1 ec       	ldi	r30, 0xC1	; 193
     706:	f0 e0       	ldi	r31, 0x00	; 0
     708:	80 81       	ld	r24, Z
     70a:	80 62       	ori	r24, 0x20	; 32
     70c:	80 83       	st	Z, r24
	}
	release_lock();
     70e:	78 94       	sei
     710:	08 95       	ret

00000712 <send_string>:
}

int8_t send_string(char data[], uint8_t length)
{
     712:	0f 93       	push	r16
     714:	1f 93       	push	r17
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	06 2f       	mov	r16, r22
	if (data == 0)	//Check for valid pointer
     71c:	00 97       	sbiw	r24, 0x00	; 0
     71e:	99 f0       	breq	.+38     	; 0x746 <send_string+0x34>
	{
		return -1;
	}
	//Check for space in buffer
	if ((length + outgoing_data_counter )>= USART_TX_BUFFER_SIZE)
     720:	20 91 29 01 	lds	r18, 0x0129
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	26 0f       	add	r18, r22
     728:	31 1d       	adc	r19, r1
     72a:	24 36       	cpi	r18, 0x64	; 100
     72c:	31 05       	cpc	r19, r1
     72e:	6c f4       	brge	.+26     	; 0x74a <send_string+0x38>
	{
		return -2;
	}
	//All good, add to buffer
	for (uint8_t i = 0; i < length; i++ )
     730:	66 23       	and	r22, r22
     732:	69 f0       	breq	.+26     	; 0x74e <send_string+0x3c>
     734:	ec 01       	movw	r28, r24
     736:	10 e0       	ldi	r17, 0x00	; 0
	{
		send_c(data[i]);
     738:	89 91       	ld	r24, Y+
     73a:	0e 94 69 03 	call	0x6d2	; 0x6d2 <send_c>
	if ((length + outgoing_data_counter )>= USART_TX_BUFFER_SIZE)
	{
		return -2;
	}
	//All good, add to buffer
	for (uint8_t i = 0; i < length; i++ )
     73e:	1f 5f       	subi	r17, 0xFF	; 255
     740:	10 13       	cpse	r17, r16
     742:	fa cf       	rjmp	.-12     	; 0x738 <send_string+0x26>
     744:	06 c0       	rjmp	.+12     	; 0x752 <send_string+0x40>

int8_t send_string(char data[], uint8_t length)
{
	if (data == 0)	//Check for valid pointer
	{
		return -1;
     746:	8f ef       	ldi	r24, 0xFF	; 255
     748:	05 c0       	rjmp	.+10     	; 0x754 <send_string+0x42>
	}
	//Check for space in buffer
	if ((length + outgoing_data_counter )>= USART_TX_BUFFER_SIZE)
	{
		return -2;
     74a:	8e ef       	ldi	r24, 0xFE	; 254
     74c:	03 c0       	rjmp	.+6      	; 0x754 <send_string+0x42>
	for (uint8_t i = 0; i < length; i++ )
	{
		send_c(data[i]);
	}
	
	return 0;
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	01 c0       	rjmp	.+2      	; 0x754 <send_string+0x42>
     752:	80 e0       	ldi	r24, 0x00	; 0
} 
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	1f 91       	pop	r17
     75a:	0f 91       	pop	r16
     75c:	08 95       	ret

0000075e <__subsf3>:
     75e:	50 58       	subi	r21, 0x80	; 128

00000760 <__addsf3>:
     760:	bb 27       	eor	r27, r27
     762:	aa 27       	eor	r26, r26
     764:	0e d0       	rcall	.+28     	; 0x782 <__addsf3x>
     766:	48 c1       	rjmp	.+656    	; 0x9f8 <__fp_round>
     768:	39 d1       	rcall	.+626    	; 0x9dc <__fp_pscA>
     76a:	30 f0       	brcs	.+12     	; 0x778 <__addsf3+0x18>
     76c:	3e d1       	rcall	.+636    	; 0x9ea <__fp_pscB>
     76e:	20 f0       	brcs	.+8      	; 0x778 <__addsf3+0x18>
     770:	31 f4       	brne	.+12     	; 0x77e <__addsf3+0x1e>
     772:	9f 3f       	cpi	r25, 0xFF	; 255
     774:	11 f4       	brne	.+4      	; 0x77a <__addsf3+0x1a>
     776:	1e f4       	brtc	.+6      	; 0x77e <__addsf3+0x1e>
     778:	2e c1       	rjmp	.+604    	; 0x9d6 <__fp_nan>
     77a:	0e f4       	brtc	.+2      	; 0x77e <__addsf3+0x1e>
     77c:	e0 95       	com	r30
     77e:	e7 fb       	bst	r30, 7
     780:	24 c1       	rjmp	.+584    	; 0x9ca <__fp_inf>

00000782 <__addsf3x>:
     782:	e9 2f       	mov	r30, r25
     784:	4a d1       	rcall	.+660    	; 0xa1a <__fp_split3>
     786:	80 f3       	brcs	.-32     	; 0x768 <__addsf3+0x8>
     788:	ba 17       	cp	r27, r26
     78a:	62 07       	cpc	r22, r18
     78c:	73 07       	cpc	r23, r19
     78e:	84 07       	cpc	r24, r20
     790:	95 07       	cpc	r25, r21
     792:	18 f0       	brcs	.+6      	; 0x79a <__addsf3x+0x18>
     794:	71 f4       	brne	.+28     	; 0x7b2 <__addsf3x+0x30>
     796:	9e f5       	brtc	.+102    	; 0x7fe <__addsf3x+0x7c>
     798:	62 c1       	rjmp	.+708    	; 0xa5e <__fp_zero>
     79a:	0e f4       	brtc	.+2      	; 0x79e <__addsf3x+0x1c>
     79c:	e0 95       	com	r30
     79e:	0b 2e       	mov	r0, r27
     7a0:	ba 2f       	mov	r27, r26
     7a2:	a0 2d       	mov	r26, r0
     7a4:	0b 01       	movw	r0, r22
     7a6:	b9 01       	movw	r22, r18
     7a8:	90 01       	movw	r18, r0
     7aa:	0c 01       	movw	r0, r24
     7ac:	ca 01       	movw	r24, r20
     7ae:	a0 01       	movw	r20, r0
     7b0:	11 24       	eor	r1, r1
     7b2:	ff 27       	eor	r31, r31
     7b4:	59 1b       	sub	r21, r25
     7b6:	99 f0       	breq	.+38     	; 0x7de <__addsf3x+0x5c>
     7b8:	59 3f       	cpi	r21, 0xF9	; 249
     7ba:	50 f4       	brcc	.+20     	; 0x7d0 <__addsf3x+0x4e>
     7bc:	50 3e       	cpi	r21, 0xE0	; 224
     7be:	68 f1       	brcs	.+90     	; 0x81a <__addsf3x+0x98>
     7c0:	1a 16       	cp	r1, r26
     7c2:	f0 40       	sbci	r31, 0x00	; 0
     7c4:	a2 2f       	mov	r26, r18
     7c6:	23 2f       	mov	r18, r19
     7c8:	34 2f       	mov	r19, r20
     7ca:	44 27       	eor	r20, r20
     7cc:	58 5f       	subi	r21, 0xF8	; 248
     7ce:	f3 cf       	rjmp	.-26     	; 0x7b6 <__addsf3x+0x34>
     7d0:	46 95       	lsr	r20
     7d2:	37 95       	ror	r19
     7d4:	27 95       	ror	r18
     7d6:	a7 95       	ror	r26
     7d8:	f0 40       	sbci	r31, 0x00	; 0
     7da:	53 95       	inc	r21
     7dc:	c9 f7       	brne	.-14     	; 0x7d0 <__addsf3x+0x4e>
     7de:	7e f4       	brtc	.+30     	; 0x7fe <__addsf3x+0x7c>
     7e0:	1f 16       	cp	r1, r31
     7e2:	ba 0b       	sbc	r27, r26
     7e4:	62 0b       	sbc	r22, r18
     7e6:	73 0b       	sbc	r23, r19
     7e8:	84 0b       	sbc	r24, r20
     7ea:	ba f0       	brmi	.+46     	; 0x81a <__addsf3x+0x98>
     7ec:	91 50       	subi	r25, 0x01	; 1
     7ee:	a1 f0       	breq	.+40     	; 0x818 <__addsf3x+0x96>
     7f0:	ff 0f       	add	r31, r31
     7f2:	bb 1f       	adc	r27, r27
     7f4:	66 1f       	adc	r22, r22
     7f6:	77 1f       	adc	r23, r23
     7f8:	88 1f       	adc	r24, r24
     7fa:	c2 f7       	brpl	.-16     	; 0x7ec <__addsf3x+0x6a>
     7fc:	0e c0       	rjmp	.+28     	; 0x81a <__addsf3x+0x98>
     7fe:	ba 0f       	add	r27, r26
     800:	62 1f       	adc	r22, r18
     802:	73 1f       	adc	r23, r19
     804:	84 1f       	adc	r24, r20
     806:	48 f4       	brcc	.+18     	; 0x81a <__addsf3x+0x98>
     808:	87 95       	ror	r24
     80a:	77 95       	ror	r23
     80c:	67 95       	ror	r22
     80e:	b7 95       	ror	r27
     810:	f7 95       	ror	r31
     812:	9e 3f       	cpi	r25, 0xFE	; 254
     814:	08 f0       	brcs	.+2      	; 0x818 <__addsf3x+0x96>
     816:	b3 cf       	rjmp	.-154    	; 0x77e <__addsf3+0x1e>
     818:	93 95       	inc	r25
     81a:	88 0f       	add	r24, r24
     81c:	08 f0       	brcs	.+2      	; 0x820 <__addsf3x+0x9e>
     81e:	99 27       	eor	r25, r25
     820:	ee 0f       	add	r30, r30
     822:	97 95       	ror	r25
     824:	87 95       	ror	r24
     826:	08 95       	ret

00000828 <__divsf3>:
     828:	0c d0       	rcall	.+24     	; 0x842 <__divsf3x>
     82a:	e6 c0       	rjmp	.+460    	; 0x9f8 <__fp_round>
     82c:	de d0       	rcall	.+444    	; 0x9ea <__fp_pscB>
     82e:	40 f0       	brcs	.+16     	; 0x840 <__divsf3+0x18>
     830:	d5 d0       	rcall	.+426    	; 0x9dc <__fp_pscA>
     832:	30 f0       	brcs	.+12     	; 0x840 <__divsf3+0x18>
     834:	21 f4       	brne	.+8      	; 0x83e <__divsf3+0x16>
     836:	5f 3f       	cpi	r21, 0xFF	; 255
     838:	19 f0       	breq	.+6      	; 0x840 <__divsf3+0x18>
     83a:	c7 c0       	rjmp	.+398    	; 0x9ca <__fp_inf>
     83c:	51 11       	cpse	r21, r1
     83e:	10 c1       	rjmp	.+544    	; 0xa60 <__fp_szero>
     840:	ca c0       	rjmp	.+404    	; 0x9d6 <__fp_nan>

00000842 <__divsf3x>:
     842:	eb d0       	rcall	.+470    	; 0xa1a <__fp_split3>
     844:	98 f3       	brcs	.-26     	; 0x82c <__divsf3+0x4>

00000846 <__divsf3_pse>:
     846:	99 23       	and	r25, r25
     848:	c9 f3       	breq	.-14     	; 0x83c <__divsf3+0x14>
     84a:	55 23       	and	r21, r21
     84c:	b1 f3       	breq	.-20     	; 0x83a <__divsf3+0x12>
     84e:	95 1b       	sub	r25, r21
     850:	55 0b       	sbc	r21, r21
     852:	bb 27       	eor	r27, r27
     854:	aa 27       	eor	r26, r26
     856:	62 17       	cp	r22, r18
     858:	73 07       	cpc	r23, r19
     85a:	84 07       	cpc	r24, r20
     85c:	38 f0       	brcs	.+14     	; 0x86c <__divsf3_pse+0x26>
     85e:	9f 5f       	subi	r25, 0xFF	; 255
     860:	5f 4f       	sbci	r21, 0xFF	; 255
     862:	22 0f       	add	r18, r18
     864:	33 1f       	adc	r19, r19
     866:	44 1f       	adc	r20, r20
     868:	aa 1f       	adc	r26, r26
     86a:	a9 f3       	breq	.-22     	; 0x856 <__divsf3_pse+0x10>
     86c:	33 d0       	rcall	.+102    	; 0x8d4 <__divsf3_pse+0x8e>
     86e:	0e 2e       	mov	r0, r30
     870:	3a f0       	brmi	.+14     	; 0x880 <__divsf3_pse+0x3a>
     872:	e0 e8       	ldi	r30, 0x80	; 128
     874:	30 d0       	rcall	.+96     	; 0x8d6 <__divsf3_pse+0x90>
     876:	91 50       	subi	r25, 0x01	; 1
     878:	50 40       	sbci	r21, 0x00	; 0
     87a:	e6 95       	lsr	r30
     87c:	00 1c       	adc	r0, r0
     87e:	ca f7       	brpl	.-14     	; 0x872 <__divsf3_pse+0x2c>
     880:	29 d0       	rcall	.+82     	; 0x8d4 <__divsf3_pse+0x8e>
     882:	fe 2f       	mov	r31, r30
     884:	27 d0       	rcall	.+78     	; 0x8d4 <__divsf3_pse+0x8e>
     886:	66 0f       	add	r22, r22
     888:	77 1f       	adc	r23, r23
     88a:	88 1f       	adc	r24, r24
     88c:	bb 1f       	adc	r27, r27
     88e:	26 17       	cp	r18, r22
     890:	37 07       	cpc	r19, r23
     892:	48 07       	cpc	r20, r24
     894:	ab 07       	cpc	r26, r27
     896:	b0 e8       	ldi	r27, 0x80	; 128
     898:	09 f0       	breq	.+2      	; 0x89c <__divsf3_pse+0x56>
     89a:	bb 0b       	sbc	r27, r27
     89c:	80 2d       	mov	r24, r0
     89e:	bf 01       	movw	r22, r30
     8a0:	ff 27       	eor	r31, r31
     8a2:	93 58       	subi	r25, 0x83	; 131
     8a4:	5f 4f       	sbci	r21, 0xFF	; 255
     8a6:	2a f0       	brmi	.+10     	; 0x8b2 <__divsf3_pse+0x6c>
     8a8:	9e 3f       	cpi	r25, 0xFE	; 254
     8aa:	51 05       	cpc	r21, r1
     8ac:	68 f0       	brcs	.+26     	; 0x8c8 <__divsf3_pse+0x82>
     8ae:	8d c0       	rjmp	.+282    	; 0x9ca <__fp_inf>
     8b0:	d7 c0       	rjmp	.+430    	; 0xa60 <__fp_szero>
     8b2:	5f 3f       	cpi	r21, 0xFF	; 255
     8b4:	ec f3       	brlt	.-6      	; 0x8b0 <__divsf3_pse+0x6a>
     8b6:	98 3e       	cpi	r25, 0xE8	; 232
     8b8:	dc f3       	brlt	.-10     	; 0x8b0 <__divsf3_pse+0x6a>
     8ba:	86 95       	lsr	r24
     8bc:	77 95       	ror	r23
     8be:	67 95       	ror	r22
     8c0:	b7 95       	ror	r27
     8c2:	f7 95       	ror	r31
     8c4:	9f 5f       	subi	r25, 0xFF	; 255
     8c6:	c9 f7       	brne	.-14     	; 0x8ba <__divsf3_pse+0x74>
     8c8:	88 0f       	add	r24, r24
     8ca:	91 1d       	adc	r25, r1
     8cc:	96 95       	lsr	r25
     8ce:	87 95       	ror	r24
     8d0:	97 f9       	bld	r25, 7
     8d2:	08 95       	ret
     8d4:	e1 e0       	ldi	r30, 0x01	; 1
     8d6:	66 0f       	add	r22, r22
     8d8:	77 1f       	adc	r23, r23
     8da:	88 1f       	adc	r24, r24
     8dc:	bb 1f       	adc	r27, r27
     8de:	62 17       	cp	r22, r18
     8e0:	73 07       	cpc	r23, r19
     8e2:	84 07       	cpc	r24, r20
     8e4:	ba 07       	cpc	r27, r26
     8e6:	20 f0       	brcs	.+8      	; 0x8f0 <__divsf3_pse+0xaa>
     8e8:	62 1b       	sub	r22, r18
     8ea:	73 0b       	sbc	r23, r19
     8ec:	84 0b       	sbc	r24, r20
     8ee:	ba 0b       	sbc	r27, r26
     8f0:	ee 1f       	adc	r30, r30
     8f2:	88 f7       	brcc	.-30     	; 0x8d6 <__divsf3_pse+0x90>
     8f4:	e0 95       	com	r30
     8f6:	08 95       	ret

000008f8 <__fixunssfsi>:
     8f8:	98 d0       	rcall	.+304    	; 0xa2a <__fp_splitA>
     8fa:	88 f0       	brcs	.+34     	; 0x91e <__stack+0x1f>
     8fc:	9f 57       	subi	r25, 0x7F	; 127
     8fe:	90 f0       	brcs	.+36     	; 0x924 <__stack+0x25>
     900:	b9 2f       	mov	r27, r25
     902:	99 27       	eor	r25, r25
     904:	b7 51       	subi	r27, 0x17	; 23
     906:	a0 f0       	brcs	.+40     	; 0x930 <__stack+0x31>
     908:	d1 f0       	breq	.+52     	; 0x93e <__stack+0x3f>
     90a:	66 0f       	add	r22, r22
     90c:	77 1f       	adc	r23, r23
     90e:	88 1f       	adc	r24, r24
     910:	99 1f       	adc	r25, r25
     912:	1a f0       	brmi	.+6      	; 0x91a <__stack+0x1b>
     914:	ba 95       	dec	r27
     916:	c9 f7       	brne	.-14     	; 0x90a <__stack+0xb>
     918:	12 c0       	rjmp	.+36     	; 0x93e <__stack+0x3f>
     91a:	b1 30       	cpi	r27, 0x01	; 1
     91c:	81 f0       	breq	.+32     	; 0x93e <__stack+0x3f>
     91e:	9f d0       	rcall	.+318    	; 0xa5e <__fp_zero>
     920:	b1 e0       	ldi	r27, 0x01	; 1
     922:	08 95       	ret
     924:	9c c0       	rjmp	.+312    	; 0xa5e <__fp_zero>
     926:	67 2f       	mov	r22, r23
     928:	78 2f       	mov	r23, r24
     92a:	88 27       	eor	r24, r24
     92c:	b8 5f       	subi	r27, 0xF8	; 248
     92e:	39 f0       	breq	.+14     	; 0x93e <__stack+0x3f>
     930:	b9 3f       	cpi	r27, 0xF9	; 249
     932:	cc f3       	brlt	.-14     	; 0x926 <__stack+0x27>
     934:	86 95       	lsr	r24
     936:	77 95       	ror	r23
     938:	67 95       	ror	r22
     93a:	b3 95       	inc	r27
     93c:	d9 f7       	brne	.-10     	; 0x934 <__stack+0x35>
     93e:	3e f4       	brtc	.+14     	; 0x94e <__stack+0x4f>
     940:	90 95       	com	r25
     942:	80 95       	com	r24
     944:	70 95       	com	r23
     946:	61 95       	neg	r22
     948:	7f 4f       	sbci	r23, 0xFF	; 255
     94a:	8f 4f       	sbci	r24, 0xFF	; 255
     94c:	9f 4f       	sbci	r25, 0xFF	; 255
     94e:	08 95       	ret

00000950 <__floatunsisf>:
     950:	e8 94       	clt
     952:	09 c0       	rjmp	.+18     	; 0x966 <__floatsisf+0x12>

00000954 <__floatsisf>:
     954:	97 fb       	bst	r25, 7
     956:	3e f4       	brtc	.+14     	; 0x966 <__floatsisf+0x12>
     958:	90 95       	com	r25
     95a:	80 95       	com	r24
     95c:	70 95       	com	r23
     95e:	61 95       	neg	r22
     960:	7f 4f       	sbci	r23, 0xFF	; 255
     962:	8f 4f       	sbci	r24, 0xFF	; 255
     964:	9f 4f       	sbci	r25, 0xFF	; 255
     966:	99 23       	and	r25, r25
     968:	a9 f0       	breq	.+42     	; 0x994 <__floatsisf+0x40>
     96a:	f9 2f       	mov	r31, r25
     96c:	96 e9       	ldi	r25, 0x96	; 150
     96e:	bb 27       	eor	r27, r27
     970:	93 95       	inc	r25
     972:	f6 95       	lsr	r31
     974:	87 95       	ror	r24
     976:	77 95       	ror	r23
     978:	67 95       	ror	r22
     97a:	b7 95       	ror	r27
     97c:	f1 11       	cpse	r31, r1
     97e:	f8 cf       	rjmp	.-16     	; 0x970 <__floatsisf+0x1c>
     980:	fa f4       	brpl	.+62     	; 0x9c0 <__floatsisf+0x6c>
     982:	bb 0f       	add	r27, r27
     984:	11 f4       	brne	.+4      	; 0x98a <__floatsisf+0x36>
     986:	60 ff       	sbrs	r22, 0
     988:	1b c0       	rjmp	.+54     	; 0x9c0 <__floatsisf+0x6c>
     98a:	6f 5f       	subi	r22, 0xFF	; 255
     98c:	7f 4f       	sbci	r23, 0xFF	; 255
     98e:	8f 4f       	sbci	r24, 0xFF	; 255
     990:	9f 4f       	sbci	r25, 0xFF	; 255
     992:	16 c0       	rjmp	.+44     	; 0x9c0 <__floatsisf+0x6c>
     994:	88 23       	and	r24, r24
     996:	11 f0       	breq	.+4      	; 0x99c <__floatsisf+0x48>
     998:	96 e9       	ldi	r25, 0x96	; 150
     99a:	11 c0       	rjmp	.+34     	; 0x9be <__floatsisf+0x6a>
     99c:	77 23       	and	r23, r23
     99e:	21 f0       	breq	.+8      	; 0x9a8 <__floatsisf+0x54>
     9a0:	9e e8       	ldi	r25, 0x8E	; 142
     9a2:	87 2f       	mov	r24, r23
     9a4:	76 2f       	mov	r23, r22
     9a6:	05 c0       	rjmp	.+10     	; 0x9b2 <__floatsisf+0x5e>
     9a8:	66 23       	and	r22, r22
     9aa:	71 f0       	breq	.+28     	; 0x9c8 <__floatsisf+0x74>
     9ac:	96 e8       	ldi	r25, 0x86	; 134
     9ae:	86 2f       	mov	r24, r22
     9b0:	70 e0       	ldi	r23, 0x00	; 0
     9b2:	60 e0       	ldi	r22, 0x00	; 0
     9b4:	2a f0       	brmi	.+10     	; 0x9c0 <__floatsisf+0x6c>
     9b6:	9a 95       	dec	r25
     9b8:	66 0f       	add	r22, r22
     9ba:	77 1f       	adc	r23, r23
     9bc:	88 1f       	adc	r24, r24
     9be:	da f7       	brpl	.-10     	; 0x9b6 <__floatsisf+0x62>
     9c0:	88 0f       	add	r24, r24
     9c2:	96 95       	lsr	r25
     9c4:	87 95       	ror	r24
     9c6:	97 f9       	bld	r25, 7
     9c8:	08 95       	ret

000009ca <__fp_inf>:
     9ca:	97 f9       	bld	r25, 7
     9cc:	9f 67       	ori	r25, 0x7F	; 127
     9ce:	80 e8       	ldi	r24, 0x80	; 128
     9d0:	70 e0       	ldi	r23, 0x00	; 0
     9d2:	60 e0       	ldi	r22, 0x00	; 0
     9d4:	08 95       	ret

000009d6 <__fp_nan>:
     9d6:	9f ef       	ldi	r25, 0xFF	; 255
     9d8:	80 ec       	ldi	r24, 0xC0	; 192
     9da:	08 95       	ret

000009dc <__fp_pscA>:
     9dc:	00 24       	eor	r0, r0
     9de:	0a 94       	dec	r0
     9e0:	16 16       	cp	r1, r22
     9e2:	17 06       	cpc	r1, r23
     9e4:	18 06       	cpc	r1, r24
     9e6:	09 06       	cpc	r0, r25
     9e8:	08 95       	ret

000009ea <__fp_pscB>:
     9ea:	00 24       	eor	r0, r0
     9ec:	0a 94       	dec	r0
     9ee:	12 16       	cp	r1, r18
     9f0:	13 06       	cpc	r1, r19
     9f2:	14 06       	cpc	r1, r20
     9f4:	05 06       	cpc	r0, r21
     9f6:	08 95       	ret

000009f8 <__fp_round>:
     9f8:	09 2e       	mov	r0, r25
     9fa:	03 94       	inc	r0
     9fc:	00 0c       	add	r0, r0
     9fe:	11 f4       	brne	.+4      	; 0xa04 <__fp_round+0xc>
     a00:	88 23       	and	r24, r24
     a02:	52 f0       	brmi	.+20     	; 0xa18 <__fp_round+0x20>
     a04:	bb 0f       	add	r27, r27
     a06:	40 f4       	brcc	.+16     	; 0xa18 <__fp_round+0x20>
     a08:	bf 2b       	or	r27, r31
     a0a:	11 f4       	brne	.+4      	; 0xa10 <__fp_round+0x18>
     a0c:	60 ff       	sbrs	r22, 0
     a0e:	04 c0       	rjmp	.+8      	; 0xa18 <__fp_round+0x20>
     a10:	6f 5f       	subi	r22, 0xFF	; 255
     a12:	7f 4f       	sbci	r23, 0xFF	; 255
     a14:	8f 4f       	sbci	r24, 0xFF	; 255
     a16:	9f 4f       	sbci	r25, 0xFF	; 255
     a18:	08 95       	ret

00000a1a <__fp_split3>:
     a1a:	57 fd       	sbrc	r21, 7
     a1c:	90 58       	subi	r25, 0x80	; 128
     a1e:	44 0f       	add	r20, r20
     a20:	55 1f       	adc	r21, r21
     a22:	59 f0       	breq	.+22     	; 0xa3a <__fp_splitA+0x10>
     a24:	5f 3f       	cpi	r21, 0xFF	; 255
     a26:	71 f0       	breq	.+28     	; 0xa44 <__fp_splitA+0x1a>
     a28:	47 95       	ror	r20

00000a2a <__fp_splitA>:
     a2a:	88 0f       	add	r24, r24
     a2c:	97 fb       	bst	r25, 7
     a2e:	99 1f       	adc	r25, r25
     a30:	61 f0       	breq	.+24     	; 0xa4a <__fp_splitA+0x20>
     a32:	9f 3f       	cpi	r25, 0xFF	; 255
     a34:	79 f0       	breq	.+30     	; 0xa54 <__fp_splitA+0x2a>
     a36:	87 95       	ror	r24
     a38:	08 95       	ret
     a3a:	12 16       	cp	r1, r18
     a3c:	13 06       	cpc	r1, r19
     a3e:	14 06       	cpc	r1, r20
     a40:	55 1f       	adc	r21, r21
     a42:	f2 cf       	rjmp	.-28     	; 0xa28 <__fp_split3+0xe>
     a44:	46 95       	lsr	r20
     a46:	f1 df       	rcall	.-30     	; 0xa2a <__fp_splitA>
     a48:	08 c0       	rjmp	.+16     	; 0xa5a <__fp_splitA+0x30>
     a4a:	16 16       	cp	r1, r22
     a4c:	17 06       	cpc	r1, r23
     a4e:	18 06       	cpc	r1, r24
     a50:	99 1f       	adc	r25, r25
     a52:	f1 cf       	rjmp	.-30     	; 0xa36 <__fp_splitA+0xc>
     a54:	86 95       	lsr	r24
     a56:	71 05       	cpc	r23, r1
     a58:	61 05       	cpc	r22, r1
     a5a:	08 94       	sec
     a5c:	08 95       	ret

00000a5e <__fp_zero>:
     a5e:	e8 94       	clt

00000a60 <__fp_szero>:
     a60:	bb 27       	eor	r27, r27
     a62:	66 27       	eor	r22, r22
     a64:	77 27       	eor	r23, r23
     a66:	cb 01       	movw	r24, r22
     a68:	97 f9       	bld	r25, 7
     a6a:	08 95       	ret

00000a6c <__mulsf3>:
     a6c:	0b d0       	rcall	.+22     	; 0xa84 <__mulsf3x>
     a6e:	c4 cf       	rjmp	.-120    	; 0x9f8 <__fp_round>
     a70:	b5 df       	rcall	.-150    	; 0x9dc <__fp_pscA>
     a72:	28 f0       	brcs	.+10     	; 0xa7e <__mulsf3+0x12>
     a74:	ba df       	rcall	.-140    	; 0x9ea <__fp_pscB>
     a76:	18 f0       	brcs	.+6      	; 0xa7e <__mulsf3+0x12>
     a78:	95 23       	and	r25, r21
     a7a:	09 f0       	breq	.+2      	; 0xa7e <__mulsf3+0x12>
     a7c:	a6 cf       	rjmp	.-180    	; 0x9ca <__fp_inf>
     a7e:	ab cf       	rjmp	.-170    	; 0x9d6 <__fp_nan>
     a80:	11 24       	eor	r1, r1
     a82:	ee cf       	rjmp	.-36     	; 0xa60 <__fp_szero>

00000a84 <__mulsf3x>:
     a84:	ca df       	rcall	.-108    	; 0xa1a <__fp_split3>
     a86:	a0 f3       	brcs	.-24     	; 0xa70 <__mulsf3+0x4>

00000a88 <__mulsf3_pse>:
     a88:	95 9f       	mul	r25, r21
     a8a:	d1 f3       	breq	.-12     	; 0xa80 <__mulsf3+0x14>
     a8c:	95 0f       	add	r25, r21
     a8e:	50 e0       	ldi	r21, 0x00	; 0
     a90:	55 1f       	adc	r21, r21
     a92:	62 9f       	mul	r22, r18
     a94:	f0 01       	movw	r30, r0
     a96:	72 9f       	mul	r23, r18
     a98:	bb 27       	eor	r27, r27
     a9a:	f0 0d       	add	r31, r0
     a9c:	b1 1d       	adc	r27, r1
     a9e:	63 9f       	mul	r22, r19
     aa0:	aa 27       	eor	r26, r26
     aa2:	f0 0d       	add	r31, r0
     aa4:	b1 1d       	adc	r27, r1
     aa6:	aa 1f       	adc	r26, r26
     aa8:	64 9f       	mul	r22, r20
     aaa:	66 27       	eor	r22, r22
     aac:	b0 0d       	add	r27, r0
     aae:	a1 1d       	adc	r26, r1
     ab0:	66 1f       	adc	r22, r22
     ab2:	82 9f       	mul	r24, r18
     ab4:	22 27       	eor	r18, r18
     ab6:	b0 0d       	add	r27, r0
     ab8:	a1 1d       	adc	r26, r1
     aba:	62 1f       	adc	r22, r18
     abc:	73 9f       	mul	r23, r19
     abe:	b0 0d       	add	r27, r0
     ac0:	a1 1d       	adc	r26, r1
     ac2:	62 1f       	adc	r22, r18
     ac4:	83 9f       	mul	r24, r19
     ac6:	a0 0d       	add	r26, r0
     ac8:	61 1d       	adc	r22, r1
     aca:	22 1f       	adc	r18, r18
     acc:	74 9f       	mul	r23, r20
     ace:	33 27       	eor	r19, r19
     ad0:	a0 0d       	add	r26, r0
     ad2:	61 1d       	adc	r22, r1
     ad4:	23 1f       	adc	r18, r19
     ad6:	84 9f       	mul	r24, r20
     ad8:	60 0d       	add	r22, r0
     ada:	21 1d       	adc	r18, r1
     adc:	82 2f       	mov	r24, r18
     ade:	76 2f       	mov	r23, r22
     ae0:	6a 2f       	mov	r22, r26
     ae2:	11 24       	eor	r1, r1
     ae4:	9f 57       	subi	r25, 0x7F	; 127
     ae6:	50 40       	sbci	r21, 0x00	; 0
     ae8:	8a f0       	brmi	.+34     	; 0xb0c <__mulsf3_pse+0x84>
     aea:	e1 f0       	breq	.+56     	; 0xb24 <__mulsf3_pse+0x9c>
     aec:	88 23       	and	r24, r24
     aee:	4a f0       	brmi	.+18     	; 0xb02 <__mulsf3_pse+0x7a>
     af0:	ee 0f       	add	r30, r30
     af2:	ff 1f       	adc	r31, r31
     af4:	bb 1f       	adc	r27, r27
     af6:	66 1f       	adc	r22, r22
     af8:	77 1f       	adc	r23, r23
     afa:	88 1f       	adc	r24, r24
     afc:	91 50       	subi	r25, 0x01	; 1
     afe:	50 40       	sbci	r21, 0x00	; 0
     b00:	a9 f7       	brne	.-22     	; 0xaec <__mulsf3_pse+0x64>
     b02:	9e 3f       	cpi	r25, 0xFE	; 254
     b04:	51 05       	cpc	r21, r1
     b06:	70 f0       	brcs	.+28     	; 0xb24 <__mulsf3_pse+0x9c>
     b08:	60 cf       	rjmp	.-320    	; 0x9ca <__fp_inf>
     b0a:	aa cf       	rjmp	.-172    	; 0xa60 <__fp_szero>
     b0c:	5f 3f       	cpi	r21, 0xFF	; 255
     b0e:	ec f3       	brlt	.-6      	; 0xb0a <__mulsf3_pse+0x82>
     b10:	98 3e       	cpi	r25, 0xE8	; 232
     b12:	dc f3       	brlt	.-10     	; 0xb0a <__mulsf3_pse+0x82>
     b14:	86 95       	lsr	r24
     b16:	77 95       	ror	r23
     b18:	67 95       	ror	r22
     b1a:	b7 95       	ror	r27
     b1c:	f7 95       	ror	r31
     b1e:	e7 95       	ror	r30
     b20:	9f 5f       	subi	r25, 0xFF	; 255
     b22:	c1 f7       	brne	.-16     	; 0xb14 <__mulsf3_pse+0x8c>
     b24:	fe 2b       	or	r31, r30
     b26:	88 0f       	add	r24, r24
     b28:	91 1d       	adc	r25, r1
     b2a:	96 95       	lsr	r25
     b2c:	87 95       	ror	r24
     b2e:	97 f9       	bld	r25, 7
     b30:	08 95       	ret

00000b32 <__udivmodsi4>:
     b32:	a1 e2       	ldi	r26, 0x21	; 33
     b34:	1a 2e       	mov	r1, r26
     b36:	aa 1b       	sub	r26, r26
     b38:	bb 1b       	sub	r27, r27
     b3a:	fd 01       	movw	r30, r26
     b3c:	0d c0       	rjmp	.+26     	; 0xb58 <__udivmodsi4_ep>

00000b3e <__udivmodsi4_loop>:
     b3e:	aa 1f       	adc	r26, r26
     b40:	bb 1f       	adc	r27, r27
     b42:	ee 1f       	adc	r30, r30
     b44:	ff 1f       	adc	r31, r31
     b46:	a2 17       	cp	r26, r18
     b48:	b3 07       	cpc	r27, r19
     b4a:	e4 07       	cpc	r30, r20
     b4c:	f5 07       	cpc	r31, r21
     b4e:	20 f0       	brcs	.+8      	; 0xb58 <__udivmodsi4_ep>
     b50:	a2 1b       	sub	r26, r18
     b52:	b3 0b       	sbc	r27, r19
     b54:	e4 0b       	sbc	r30, r20
     b56:	f5 0b       	sbc	r31, r21

00000b58 <__udivmodsi4_ep>:
     b58:	66 1f       	adc	r22, r22
     b5a:	77 1f       	adc	r23, r23
     b5c:	88 1f       	adc	r24, r24
     b5e:	99 1f       	adc	r25, r25
     b60:	1a 94       	dec	r1
     b62:	69 f7       	brne	.-38     	; 0xb3e <__udivmodsi4_loop>
     b64:	60 95       	com	r22
     b66:	70 95       	com	r23
     b68:	80 95       	com	r24
     b6a:	90 95       	com	r25
     b6c:	9b 01       	movw	r18, r22
     b6e:	ac 01       	movw	r20, r24
     b70:	bd 01       	movw	r22, r26
     b72:	cf 01       	movw	r24, r30
     b74:	08 95       	ret

00000b76 <printf>:
     b76:	a0 e0       	ldi	r26, 0x00	; 0
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	e1 ec       	ldi	r30, 0xC1	; 193
     b7c:	f5 e0       	ldi	r31, 0x05	; 5
     b7e:	0c 94 57 08 	jmp	0x10ae	; 0x10ae <__prologue_saves__+0x20>
     b82:	fe 01       	movw	r30, r28
     b84:	35 96       	adiw	r30, 0x05	; 5
     b86:	61 91       	ld	r22, Z+
     b88:	71 91       	ld	r23, Z+
     b8a:	af 01       	movw	r20, r30
     b8c:	80 91 02 02 	lds	r24, 0x0202
     b90:	90 91 03 02 	lds	r25, 0x0203
     b94:	0e 94 cf 05 	call	0xb9e	; 0xb9e <vfprintf>
     b98:	e2 e0       	ldi	r30, 0x02	; 2
     b9a:	0c 94 73 08 	jmp	0x10e6	; 0x10e6 <__epilogue_restores__+0x20>

00000b9e <vfprintf>:
     b9e:	ac e0       	ldi	r26, 0x0C	; 12
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	e5 ed       	ldi	r30, 0xD5	; 213
     ba4:	f5 e0       	ldi	r31, 0x05	; 5
     ba6:	0c 94 47 08 	jmp	0x108e	; 0x108e <__prologue_saves__>
     baa:	7c 01       	movw	r14, r24
     bac:	6b 01       	movw	r12, r22
     bae:	8a 01       	movw	r16, r20
     bb0:	fc 01       	movw	r30, r24
     bb2:	17 82       	std	Z+7, r1	; 0x07
     bb4:	16 82       	std	Z+6, r1	; 0x06
     bb6:	83 81       	ldd	r24, Z+3	; 0x03
     bb8:	81 ff       	sbrs	r24, 1
     bba:	bd c1       	rjmp	.+890    	; 0xf36 <vfprintf+0x398>
     bbc:	ce 01       	movw	r24, r28
     bbe:	01 96       	adiw	r24, 0x01	; 1
     bc0:	4c 01       	movw	r8, r24
     bc2:	f7 01       	movw	r30, r14
     bc4:	93 81       	ldd	r25, Z+3	; 0x03
     bc6:	f6 01       	movw	r30, r12
     bc8:	93 fd       	sbrc	r25, 3
     bca:	85 91       	lpm	r24, Z+
     bcc:	93 ff       	sbrs	r25, 3
     bce:	81 91       	ld	r24, Z+
     bd0:	6f 01       	movw	r12, r30
     bd2:	88 23       	and	r24, r24
     bd4:	09 f4       	brne	.+2      	; 0xbd8 <vfprintf+0x3a>
     bd6:	ab c1       	rjmp	.+854    	; 0xf2e <vfprintf+0x390>
     bd8:	85 32       	cpi	r24, 0x25	; 37
     bda:	39 f4       	brne	.+14     	; 0xbea <vfprintf+0x4c>
     bdc:	93 fd       	sbrc	r25, 3
     bde:	85 91       	lpm	r24, Z+
     be0:	93 ff       	sbrs	r25, 3
     be2:	81 91       	ld	r24, Z+
     be4:	6f 01       	movw	r12, r30
     be6:	85 32       	cpi	r24, 0x25	; 37
     be8:	29 f4       	brne	.+10     	; 0xbf4 <vfprintf+0x56>
     bea:	b7 01       	movw	r22, r14
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	0e 94 b7 07 	call	0xf6e	; 0xf6e <fputc>
     bf2:	e7 cf       	rjmp	.-50     	; 0xbc2 <vfprintf+0x24>
     bf4:	51 2c       	mov	r5, r1
     bf6:	31 2c       	mov	r3, r1
     bf8:	20 e0       	ldi	r18, 0x00	; 0
     bfa:	20 32       	cpi	r18, 0x20	; 32
     bfc:	a0 f4       	brcc	.+40     	; 0xc26 <vfprintf+0x88>
     bfe:	8b 32       	cpi	r24, 0x2B	; 43
     c00:	69 f0       	breq	.+26     	; 0xc1c <vfprintf+0x7e>
     c02:	30 f4       	brcc	.+12     	; 0xc10 <vfprintf+0x72>
     c04:	80 32       	cpi	r24, 0x20	; 32
     c06:	59 f0       	breq	.+22     	; 0xc1e <vfprintf+0x80>
     c08:	83 32       	cpi	r24, 0x23	; 35
     c0a:	69 f4       	brne	.+26     	; 0xc26 <vfprintf+0x88>
     c0c:	20 61       	ori	r18, 0x10	; 16
     c0e:	2c c0       	rjmp	.+88     	; 0xc68 <vfprintf+0xca>
     c10:	8d 32       	cpi	r24, 0x2D	; 45
     c12:	39 f0       	breq	.+14     	; 0xc22 <vfprintf+0x84>
     c14:	80 33       	cpi	r24, 0x30	; 48
     c16:	39 f4       	brne	.+14     	; 0xc26 <vfprintf+0x88>
     c18:	21 60       	ori	r18, 0x01	; 1
     c1a:	26 c0       	rjmp	.+76     	; 0xc68 <vfprintf+0xca>
     c1c:	22 60       	ori	r18, 0x02	; 2
     c1e:	24 60       	ori	r18, 0x04	; 4
     c20:	23 c0       	rjmp	.+70     	; 0xc68 <vfprintf+0xca>
     c22:	28 60       	ori	r18, 0x08	; 8
     c24:	21 c0       	rjmp	.+66     	; 0xc68 <vfprintf+0xca>
     c26:	27 fd       	sbrc	r18, 7
     c28:	27 c0       	rjmp	.+78     	; 0xc78 <vfprintf+0xda>
     c2a:	30 ed       	ldi	r19, 0xD0	; 208
     c2c:	38 0f       	add	r19, r24
     c2e:	3a 30       	cpi	r19, 0x0A	; 10
     c30:	78 f4       	brcc	.+30     	; 0xc50 <vfprintf+0xb2>
     c32:	26 ff       	sbrs	r18, 6
     c34:	06 c0       	rjmp	.+12     	; 0xc42 <vfprintf+0xa4>
     c36:	fa e0       	ldi	r31, 0x0A	; 10
     c38:	5f 9e       	mul	r5, r31
     c3a:	30 0d       	add	r19, r0
     c3c:	11 24       	eor	r1, r1
     c3e:	53 2e       	mov	r5, r19
     c40:	13 c0       	rjmp	.+38     	; 0xc68 <vfprintf+0xca>
     c42:	8a e0       	ldi	r24, 0x0A	; 10
     c44:	38 9e       	mul	r3, r24
     c46:	30 0d       	add	r19, r0
     c48:	11 24       	eor	r1, r1
     c4a:	33 2e       	mov	r3, r19
     c4c:	20 62       	ori	r18, 0x20	; 32
     c4e:	0c c0       	rjmp	.+24     	; 0xc68 <vfprintf+0xca>
     c50:	8e 32       	cpi	r24, 0x2E	; 46
     c52:	21 f4       	brne	.+8      	; 0xc5c <vfprintf+0xbe>
     c54:	26 fd       	sbrc	r18, 6
     c56:	6b c1       	rjmp	.+726    	; 0xf2e <vfprintf+0x390>
     c58:	20 64       	ori	r18, 0x40	; 64
     c5a:	06 c0       	rjmp	.+12     	; 0xc68 <vfprintf+0xca>
     c5c:	8c 36       	cpi	r24, 0x6C	; 108
     c5e:	11 f4       	brne	.+4      	; 0xc64 <vfprintf+0xc6>
     c60:	20 68       	ori	r18, 0x80	; 128
     c62:	02 c0       	rjmp	.+4      	; 0xc68 <vfprintf+0xca>
     c64:	88 36       	cpi	r24, 0x68	; 104
     c66:	41 f4       	brne	.+16     	; 0xc78 <vfprintf+0xda>
     c68:	f6 01       	movw	r30, r12
     c6a:	93 fd       	sbrc	r25, 3
     c6c:	85 91       	lpm	r24, Z+
     c6e:	93 ff       	sbrs	r25, 3
     c70:	81 91       	ld	r24, Z+
     c72:	6f 01       	movw	r12, r30
     c74:	81 11       	cpse	r24, r1
     c76:	c1 cf       	rjmp	.-126    	; 0xbfa <vfprintf+0x5c>
     c78:	98 2f       	mov	r25, r24
     c7a:	9f 7d       	andi	r25, 0xDF	; 223
     c7c:	95 54       	subi	r25, 0x45	; 69
     c7e:	93 30       	cpi	r25, 0x03	; 3
     c80:	28 f4       	brcc	.+10     	; 0xc8c <vfprintf+0xee>
     c82:	0c 5f       	subi	r16, 0xFC	; 252
     c84:	1f 4f       	sbci	r17, 0xFF	; 255
     c86:	ff e3       	ldi	r31, 0x3F	; 63
     c88:	f9 83       	std	Y+1, r31	; 0x01
     c8a:	0d c0       	rjmp	.+26     	; 0xca6 <vfprintf+0x108>
     c8c:	83 36       	cpi	r24, 0x63	; 99
     c8e:	31 f0       	breq	.+12     	; 0xc9c <vfprintf+0xfe>
     c90:	83 37       	cpi	r24, 0x73	; 115
     c92:	71 f0       	breq	.+28     	; 0xcb0 <vfprintf+0x112>
     c94:	83 35       	cpi	r24, 0x53	; 83
     c96:	09 f0       	breq	.+2      	; 0xc9a <vfprintf+0xfc>
     c98:	5b c0       	rjmp	.+182    	; 0xd50 <vfprintf+0x1b2>
     c9a:	22 c0       	rjmp	.+68     	; 0xce0 <vfprintf+0x142>
     c9c:	f8 01       	movw	r30, r16
     c9e:	80 81       	ld	r24, Z
     ca0:	89 83       	std	Y+1, r24	; 0x01
     ca2:	0e 5f       	subi	r16, 0xFE	; 254
     ca4:	1f 4f       	sbci	r17, 0xFF	; 255
     ca6:	44 24       	eor	r4, r4
     ca8:	43 94       	inc	r4
     caa:	51 2c       	mov	r5, r1
     cac:	54 01       	movw	r10, r8
     cae:	15 c0       	rjmp	.+42     	; 0xcda <vfprintf+0x13c>
     cb0:	38 01       	movw	r6, r16
     cb2:	f2 e0       	ldi	r31, 0x02	; 2
     cb4:	6f 0e       	add	r6, r31
     cb6:	71 1c       	adc	r7, r1
     cb8:	f8 01       	movw	r30, r16
     cba:	a0 80       	ld	r10, Z
     cbc:	b1 80       	ldd	r11, Z+1	; 0x01
     cbe:	26 ff       	sbrs	r18, 6
     cc0:	03 c0       	rjmp	.+6      	; 0xcc8 <vfprintf+0x12a>
     cc2:	65 2d       	mov	r22, r5
     cc4:	70 e0       	ldi	r23, 0x00	; 0
     cc6:	02 c0       	rjmp	.+4      	; 0xccc <vfprintf+0x12e>
     cc8:	6f ef       	ldi	r22, 0xFF	; 255
     cca:	7f ef       	ldi	r23, 0xFF	; 255
     ccc:	c5 01       	movw	r24, r10
     cce:	2c 87       	std	Y+12, r18	; 0x0c
     cd0:	0e 94 ac 07 	call	0xf58	; 0xf58 <strnlen>
     cd4:	2c 01       	movw	r4, r24
     cd6:	83 01       	movw	r16, r6
     cd8:	2c 85       	ldd	r18, Y+12	; 0x0c
     cda:	2f 77       	andi	r18, 0x7F	; 127
     cdc:	22 2e       	mov	r2, r18
     cde:	17 c0       	rjmp	.+46     	; 0xd0e <vfprintf+0x170>
     ce0:	38 01       	movw	r6, r16
     ce2:	f2 e0       	ldi	r31, 0x02	; 2
     ce4:	6f 0e       	add	r6, r31
     ce6:	71 1c       	adc	r7, r1
     ce8:	f8 01       	movw	r30, r16
     cea:	a0 80       	ld	r10, Z
     cec:	b1 80       	ldd	r11, Z+1	; 0x01
     cee:	26 ff       	sbrs	r18, 6
     cf0:	03 c0       	rjmp	.+6      	; 0xcf8 <vfprintf+0x15a>
     cf2:	65 2d       	mov	r22, r5
     cf4:	70 e0       	ldi	r23, 0x00	; 0
     cf6:	02 c0       	rjmp	.+4      	; 0xcfc <vfprintf+0x15e>
     cf8:	6f ef       	ldi	r22, 0xFF	; 255
     cfa:	7f ef       	ldi	r23, 0xFF	; 255
     cfc:	c5 01       	movw	r24, r10
     cfe:	2c 87       	std	Y+12, r18	; 0x0c
     d00:	0e 94 a1 07 	call	0xf42	; 0xf42 <strnlen_P>
     d04:	2c 01       	movw	r4, r24
     d06:	2c 85       	ldd	r18, Y+12	; 0x0c
     d08:	20 68       	ori	r18, 0x80	; 128
     d0a:	22 2e       	mov	r2, r18
     d0c:	83 01       	movw	r16, r6
     d0e:	23 fc       	sbrc	r2, 3
     d10:	1b c0       	rjmp	.+54     	; 0xd48 <vfprintf+0x1aa>
     d12:	83 2d       	mov	r24, r3
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	48 16       	cp	r4, r24
     d18:	59 06       	cpc	r5, r25
     d1a:	b0 f4       	brcc	.+44     	; 0xd48 <vfprintf+0x1aa>
     d1c:	b7 01       	movw	r22, r14
     d1e:	80 e2       	ldi	r24, 0x20	; 32
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	0e 94 b7 07 	call	0xf6e	; 0xf6e <fputc>
     d26:	3a 94       	dec	r3
     d28:	f4 cf       	rjmp	.-24     	; 0xd12 <vfprintf+0x174>
     d2a:	f5 01       	movw	r30, r10
     d2c:	27 fc       	sbrc	r2, 7
     d2e:	85 91       	lpm	r24, Z+
     d30:	27 fe       	sbrs	r2, 7
     d32:	81 91       	ld	r24, Z+
     d34:	5f 01       	movw	r10, r30
     d36:	b7 01       	movw	r22, r14
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	0e 94 b7 07 	call	0xf6e	; 0xf6e <fputc>
     d3e:	31 10       	cpse	r3, r1
     d40:	3a 94       	dec	r3
     d42:	f1 e0       	ldi	r31, 0x01	; 1
     d44:	4f 1a       	sub	r4, r31
     d46:	51 08       	sbc	r5, r1
     d48:	41 14       	cp	r4, r1
     d4a:	51 04       	cpc	r5, r1
     d4c:	71 f7       	brne	.-36     	; 0xd2a <vfprintf+0x18c>
     d4e:	e5 c0       	rjmp	.+458    	; 0xf1a <vfprintf+0x37c>
     d50:	84 36       	cpi	r24, 0x64	; 100
     d52:	11 f0       	breq	.+4      	; 0xd58 <vfprintf+0x1ba>
     d54:	89 36       	cpi	r24, 0x69	; 105
     d56:	39 f5       	brne	.+78     	; 0xda6 <vfprintf+0x208>
     d58:	f8 01       	movw	r30, r16
     d5a:	27 ff       	sbrs	r18, 7
     d5c:	07 c0       	rjmp	.+14     	; 0xd6c <vfprintf+0x1ce>
     d5e:	60 81       	ld	r22, Z
     d60:	71 81       	ldd	r23, Z+1	; 0x01
     d62:	82 81       	ldd	r24, Z+2	; 0x02
     d64:	93 81       	ldd	r25, Z+3	; 0x03
     d66:	0c 5f       	subi	r16, 0xFC	; 252
     d68:	1f 4f       	sbci	r17, 0xFF	; 255
     d6a:	08 c0       	rjmp	.+16     	; 0xd7c <vfprintf+0x1de>
     d6c:	60 81       	ld	r22, Z
     d6e:	71 81       	ldd	r23, Z+1	; 0x01
     d70:	88 27       	eor	r24, r24
     d72:	77 fd       	sbrc	r23, 7
     d74:	80 95       	com	r24
     d76:	98 2f       	mov	r25, r24
     d78:	0e 5f       	subi	r16, 0xFE	; 254
     d7a:	1f 4f       	sbci	r17, 0xFF	; 255
     d7c:	2f 76       	andi	r18, 0x6F	; 111
     d7e:	b2 2e       	mov	r11, r18
     d80:	97 ff       	sbrs	r25, 7
     d82:	09 c0       	rjmp	.+18     	; 0xd96 <vfprintf+0x1f8>
     d84:	90 95       	com	r25
     d86:	80 95       	com	r24
     d88:	70 95       	com	r23
     d8a:	61 95       	neg	r22
     d8c:	7f 4f       	sbci	r23, 0xFF	; 255
     d8e:	8f 4f       	sbci	r24, 0xFF	; 255
     d90:	9f 4f       	sbci	r25, 0xFF	; 255
     d92:	20 68       	ori	r18, 0x80	; 128
     d94:	b2 2e       	mov	r11, r18
     d96:	2a e0       	ldi	r18, 0x0A	; 10
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	a4 01       	movw	r20, r8
     d9c:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <__ultoa_invert>
     da0:	a8 2e       	mov	r10, r24
     da2:	a8 18       	sub	r10, r8
     da4:	44 c0       	rjmp	.+136    	; 0xe2e <vfprintf+0x290>
     da6:	85 37       	cpi	r24, 0x75	; 117
     da8:	29 f4       	brne	.+10     	; 0xdb4 <vfprintf+0x216>
     daa:	2f 7e       	andi	r18, 0xEF	; 239
     dac:	b2 2e       	mov	r11, r18
     dae:	2a e0       	ldi	r18, 0x0A	; 10
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	25 c0       	rjmp	.+74     	; 0xdfe <vfprintf+0x260>
     db4:	f2 2f       	mov	r31, r18
     db6:	f9 7f       	andi	r31, 0xF9	; 249
     db8:	bf 2e       	mov	r11, r31
     dba:	8f 36       	cpi	r24, 0x6F	; 111
     dbc:	c1 f0       	breq	.+48     	; 0xdee <vfprintf+0x250>
     dbe:	18 f4       	brcc	.+6      	; 0xdc6 <vfprintf+0x228>
     dc0:	88 35       	cpi	r24, 0x58	; 88
     dc2:	79 f0       	breq	.+30     	; 0xde2 <vfprintf+0x244>
     dc4:	b4 c0       	rjmp	.+360    	; 0xf2e <vfprintf+0x390>
     dc6:	80 37       	cpi	r24, 0x70	; 112
     dc8:	19 f0       	breq	.+6      	; 0xdd0 <vfprintf+0x232>
     dca:	88 37       	cpi	r24, 0x78	; 120
     dcc:	21 f0       	breq	.+8      	; 0xdd6 <vfprintf+0x238>
     dce:	af c0       	rjmp	.+350    	; 0xf2e <vfprintf+0x390>
     dd0:	2f 2f       	mov	r18, r31
     dd2:	20 61       	ori	r18, 0x10	; 16
     dd4:	b2 2e       	mov	r11, r18
     dd6:	b4 fe       	sbrs	r11, 4
     dd8:	0d c0       	rjmp	.+26     	; 0xdf4 <vfprintf+0x256>
     dda:	8b 2d       	mov	r24, r11
     ddc:	84 60       	ori	r24, 0x04	; 4
     dde:	b8 2e       	mov	r11, r24
     de0:	09 c0       	rjmp	.+18     	; 0xdf4 <vfprintf+0x256>
     de2:	24 ff       	sbrs	r18, 4
     de4:	0a c0       	rjmp	.+20     	; 0xdfa <vfprintf+0x25c>
     de6:	9f 2f       	mov	r25, r31
     de8:	96 60       	ori	r25, 0x06	; 6
     dea:	b9 2e       	mov	r11, r25
     dec:	06 c0       	rjmp	.+12     	; 0xdfa <vfprintf+0x25c>
     dee:	28 e0       	ldi	r18, 0x08	; 8
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	05 c0       	rjmp	.+10     	; 0xdfe <vfprintf+0x260>
     df4:	20 e1       	ldi	r18, 0x10	; 16
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	02 c0       	rjmp	.+4      	; 0xdfe <vfprintf+0x260>
     dfa:	20 e1       	ldi	r18, 0x10	; 16
     dfc:	32 e0       	ldi	r19, 0x02	; 2
     dfe:	f8 01       	movw	r30, r16
     e00:	b7 fe       	sbrs	r11, 7
     e02:	07 c0       	rjmp	.+14     	; 0xe12 <vfprintf+0x274>
     e04:	60 81       	ld	r22, Z
     e06:	71 81       	ldd	r23, Z+1	; 0x01
     e08:	82 81       	ldd	r24, Z+2	; 0x02
     e0a:	93 81       	ldd	r25, Z+3	; 0x03
     e0c:	0c 5f       	subi	r16, 0xFC	; 252
     e0e:	1f 4f       	sbci	r17, 0xFF	; 255
     e10:	06 c0       	rjmp	.+12     	; 0xe1e <vfprintf+0x280>
     e12:	60 81       	ld	r22, Z
     e14:	71 81       	ldd	r23, Z+1	; 0x01
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	0e 5f       	subi	r16, 0xFE	; 254
     e1c:	1f 4f       	sbci	r17, 0xFF	; 255
     e1e:	a4 01       	movw	r20, r8
     e20:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <__ultoa_invert>
     e24:	a8 2e       	mov	r10, r24
     e26:	a8 18       	sub	r10, r8
     e28:	fb 2d       	mov	r31, r11
     e2a:	ff 77       	andi	r31, 0x7F	; 127
     e2c:	bf 2e       	mov	r11, r31
     e2e:	b6 fe       	sbrs	r11, 6
     e30:	0b c0       	rjmp	.+22     	; 0xe48 <vfprintf+0x2aa>
     e32:	2b 2d       	mov	r18, r11
     e34:	2e 7f       	andi	r18, 0xFE	; 254
     e36:	a5 14       	cp	r10, r5
     e38:	50 f4       	brcc	.+20     	; 0xe4e <vfprintf+0x2b0>
     e3a:	b4 fe       	sbrs	r11, 4
     e3c:	0a c0       	rjmp	.+20     	; 0xe52 <vfprintf+0x2b4>
     e3e:	b2 fc       	sbrc	r11, 2
     e40:	08 c0       	rjmp	.+16     	; 0xe52 <vfprintf+0x2b4>
     e42:	2b 2d       	mov	r18, r11
     e44:	2e 7e       	andi	r18, 0xEE	; 238
     e46:	05 c0       	rjmp	.+10     	; 0xe52 <vfprintf+0x2b4>
     e48:	7a 2c       	mov	r7, r10
     e4a:	2b 2d       	mov	r18, r11
     e4c:	03 c0       	rjmp	.+6      	; 0xe54 <vfprintf+0x2b6>
     e4e:	7a 2c       	mov	r7, r10
     e50:	01 c0       	rjmp	.+2      	; 0xe54 <vfprintf+0x2b6>
     e52:	75 2c       	mov	r7, r5
     e54:	24 ff       	sbrs	r18, 4
     e56:	0d c0       	rjmp	.+26     	; 0xe72 <vfprintf+0x2d4>
     e58:	fe 01       	movw	r30, r28
     e5a:	ea 0d       	add	r30, r10
     e5c:	f1 1d       	adc	r31, r1
     e5e:	80 81       	ld	r24, Z
     e60:	80 33       	cpi	r24, 0x30	; 48
     e62:	11 f4       	brne	.+4      	; 0xe68 <vfprintf+0x2ca>
     e64:	29 7e       	andi	r18, 0xE9	; 233
     e66:	09 c0       	rjmp	.+18     	; 0xe7a <vfprintf+0x2dc>
     e68:	22 ff       	sbrs	r18, 2
     e6a:	06 c0       	rjmp	.+12     	; 0xe78 <vfprintf+0x2da>
     e6c:	73 94       	inc	r7
     e6e:	73 94       	inc	r7
     e70:	04 c0       	rjmp	.+8      	; 0xe7a <vfprintf+0x2dc>
     e72:	82 2f       	mov	r24, r18
     e74:	86 78       	andi	r24, 0x86	; 134
     e76:	09 f0       	breq	.+2      	; 0xe7a <vfprintf+0x2dc>
     e78:	73 94       	inc	r7
     e7a:	23 fd       	sbrc	r18, 3
     e7c:	13 c0       	rjmp	.+38     	; 0xea4 <vfprintf+0x306>
     e7e:	20 ff       	sbrs	r18, 0
     e80:	06 c0       	rjmp	.+12     	; 0xe8e <vfprintf+0x2f0>
     e82:	5a 2c       	mov	r5, r10
     e84:	73 14       	cp	r7, r3
     e86:	18 f4       	brcc	.+6      	; 0xe8e <vfprintf+0x2f0>
     e88:	53 0c       	add	r5, r3
     e8a:	57 18       	sub	r5, r7
     e8c:	73 2c       	mov	r7, r3
     e8e:	73 14       	cp	r7, r3
     e90:	68 f4       	brcc	.+26     	; 0xeac <vfprintf+0x30e>
     e92:	b7 01       	movw	r22, r14
     e94:	80 e2       	ldi	r24, 0x20	; 32
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	2c 87       	std	Y+12, r18	; 0x0c
     e9a:	0e 94 b7 07 	call	0xf6e	; 0xf6e <fputc>
     e9e:	73 94       	inc	r7
     ea0:	2c 85       	ldd	r18, Y+12	; 0x0c
     ea2:	f5 cf       	rjmp	.-22     	; 0xe8e <vfprintf+0x2f0>
     ea4:	73 14       	cp	r7, r3
     ea6:	10 f4       	brcc	.+4      	; 0xeac <vfprintf+0x30e>
     ea8:	37 18       	sub	r3, r7
     eaa:	01 c0       	rjmp	.+2      	; 0xeae <vfprintf+0x310>
     eac:	31 2c       	mov	r3, r1
     eae:	24 ff       	sbrs	r18, 4
     eb0:	12 c0       	rjmp	.+36     	; 0xed6 <vfprintf+0x338>
     eb2:	b7 01       	movw	r22, r14
     eb4:	80 e3       	ldi	r24, 0x30	; 48
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	2c 87       	std	Y+12, r18	; 0x0c
     eba:	0e 94 b7 07 	call	0xf6e	; 0xf6e <fputc>
     ebe:	2c 85       	ldd	r18, Y+12	; 0x0c
     ec0:	22 ff       	sbrs	r18, 2
     ec2:	17 c0       	rjmp	.+46     	; 0xef2 <vfprintf+0x354>
     ec4:	21 ff       	sbrs	r18, 1
     ec6:	03 c0       	rjmp	.+6      	; 0xece <vfprintf+0x330>
     ec8:	88 e5       	ldi	r24, 0x58	; 88
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	02 c0       	rjmp	.+4      	; 0xed2 <vfprintf+0x334>
     ece:	88 e7       	ldi	r24, 0x78	; 120
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	b7 01       	movw	r22, r14
     ed4:	0c c0       	rjmp	.+24     	; 0xeee <vfprintf+0x350>
     ed6:	82 2f       	mov	r24, r18
     ed8:	86 78       	andi	r24, 0x86	; 134
     eda:	59 f0       	breq	.+22     	; 0xef2 <vfprintf+0x354>
     edc:	21 fd       	sbrc	r18, 1
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <vfprintf+0x346>
     ee0:	80 e2       	ldi	r24, 0x20	; 32
     ee2:	01 c0       	rjmp	.+2      	; 0xee6 <vfprintf+0x348>
     ee4:	8b e2       	ldi	r24, 0x2B	; 43
     ee6:	27 fd       	sbrc	r18, 7
     ee8:	8d e2       	ldi	r24, 0x2D	; 45
     eea:	b7 01       	movw	r22, r14
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	0e 94 b7 07 	call	0xf6e	; 0xf6e <fputc>
     ef2:	a5 14       	cp	r10, r5
     ef4:	38 f4       	brcc	.+14     	; 0xf04 <vfprintf+0x366>
     ef6:	b7 01       	movw	r22, r14
     ef8:	80 e3       	ldi	r24, 0x30	; 48
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	0e 94 b7 07 	call	0xf6e	; 0xf6e <fputc>
     f00:	5a 94       	dec	r5
     f02:	f7 cf       	rjmp	.-18     	; 0xef2 <vfprintf+0x354>
     f04:	aa 94       	dec	r10
     f06:	f4 01       	movw	r30, r8
     f08:	ea 0d       	add	r30, r10
     f0a:	f1 1d       	adc	r31, r1
     f0c:	80 81       	ld	r24, Z
     f0e:	b7 01       	movw	r22, r14
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	0e 94 b7 07 	call	0xf6e	; 0xf6e <fputc>
     f16:	a1 10       	cpse	r10, r1
     f18:	f5 cf       	rjmp	.-22     	; 0xf04 <vfprintf+0x366>
     f1a:	33 20       	and	r3, r3
     f1c:	09 f4       	brne	.+2      	; 0xf20 <vfprintf+0x382>
     f1e:	51 ce       	rjmp	.-862    	; 0xbc2 <vfprintf+0x24>
     f20:	b7 01       	movw	r22, r14
     f22:	80 e2       	ldi	r24, 0x20	; 32
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	0e 94 b7 07 	call	0xf6e	; 0xf6e <fputc>
     f2a:	3a 94       	dec	r3
     f2c:	f6 cf       	rjmp	.-20     	; 0xf1a <vfprintf+0x37c>
     f2e:	f7 01       	movw	r30, r14
     f30:	86 81       	ldd	r24, Z+6	; 0x06
     f32:	97 81       	ldd	r25, Z+7	; 0x07
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <vfprintf+0x39c>
     f36:	8f ef       	ldi	r24, 0xFF	; 255
     f38:	9f ef       	ldi	r25, 0xFF	; 255
     f3a:	2c 96       	adiw	r28, 0x0c	; 12
     f3c:	e2 e1       	ldi	r30, 0x12	; 18
     f3e:	0c 94 63 08 	jmp	0x10c6	; 0x10c6 <__epilogue_restores__>

00000f42 <strnlen_P>:
     f42:	fc 01       	movw	r30, r24
     f44:	05 90       	lpm	r0, Z+
     f46:	61 50       	subi	r22, 0x01	; 1
     f48:	70 40       	sbci	r23, 0x00	; 0
     f4a:	01 10       	cpse	r0, r1
     f4c:	d8 f7       	brcc	.-10     	; 0xf44 <strnlen_P+0x2>
     f4e:	80 95       	com	r24
     f50:	90 95       	com	r25
     f52:	8e 0f       	add	r24, r30
     f54:	9f 1f       	adc	r25, r31
     f56:	08 95       	ret

00000f58 <strnlen>:
     f58:	fc 01       	movw	r30, r24
     f5a:	61 50       	subi	r22, 0x01	; 1
     f5c:	70 40       	sbci	r23, 0x00	; 0
     f5e:	01 90       	ld	r0, Z+
     f60:	01 10       	cpse	r0, r1
     f62:	d8 f7       	brcc	.-10     	; 0xf5a <strnlen+0x2>
     f64:	80 95       	com	r24
     f66:	90 95       	com	r25
     f68:	8e 0f       	add	r24, r30
     f6a:	9f 1f       	adc	r25, r31
     f6c:	08 95       	ret

00000f6e <fputc>:
     f6e:	0f 93       	push	r16
     f70:	1f 93       	push	r17
     f72:	cf 93       	push	r28
     f74:	df 93       	push	r29
     f76:	18 2f       	mov	r17, r24
     f78:	09 2f       	mov	r16, r25
     f7a:	eb 01       	movw	r28, r22
     f7c:	8b 81       	ldd	r24, Y+3	; 0x03
     f7e:	81 fd       	sbrc	r24, 1
     f80:	03 c0       	rjmp	.+6      	; 0xf88 <fputc+0x1a>
     f82:	8f ef       	ldi	r24, 0xFF	; 255
     f84:	9f ef       	ldi	r25, 0xFF	; 255
     f86:	20 c0       	rjmp	.+64     	; 0xfc8 <fputc+0x5a>
     f88:	82 ff       	sbrs	r24, 2
     f8a:	10 c0       	rjmp	.+32     	; 0xfac <fputc+0x3e>
     f8c:	4e 81       	ldd	r20, Y+6	; 0x06
     f8e:	5f 81       	ldd	r21, Y+7	; 0x07
     f90:	2c 81       	ldd	r18, Y+4	; 0x04
     f92:	3d 81       	ldd	r19, Y+5	; 0x05
     f94:	42 17       	cp	r20, r18
     f96:	53 07       	cpc	r21, r19
     f98:	7c f4       	brge	.+30     	; 0xfb8 <fputc+0x4a>
     f9a:	e8 81       	ld	r30, Y
     f9c:	f9 81       	ldd	r31, Y+1	; 0x01
     f9e:	9f 01       	movw	r18, r30
     fa0:	2f 5f       	subi	r18, 0xFF	; 255
     fa2:	3f 4f       	sbci	r19, 0xFF	; 255
     fa4:	39 83       	std	Y+1, r19	; 0x01
     fa6:	28 83       	st	Y, r18
     fa8:	10 83       	st	Z, r17
     faa:	06 c0       	rjmp	.+12     	; 0xfb8 <fputc+0x4a>
     fac:	e8 85       	ldd	r30, Y+8	; 0x08
     fae:	f9 85       	ldd	r31, Y+9	; 0x09
     fb0:	81 2f       	mov	r24, r17
     fb2:	09 95       	icall
     fb4:	89 2b       	or	r24, r25
     fb6:	29 f7       	brne	.-54     	; 0xf82 <fputc+0x14>
     fb8:	2e 81       	ldd	r18, Y+6	; 0x06
     fba:	3f 81       	ldd	r19, Y+7	; 0x07
     fbc:	2f 5f       	subi	r18, 0xFF	; 255
     fbe:	3f 4f       	sbci	r19, 0xFF	; 255
     fc0:	3f 83       	std	Y+7, r19	; 0x07
     fc2:	2e 83       	std	Y+6, r18	; 0x06
     fc4:	81 2f       	mov	r24, r17
     fc6:	90 2f       	mov	r25, r16
     fc8:	df 91       	pop	r29
     fca:	cf 91       	pop	r28
     fcc:	1f 91       	pop	r17
     fce:	0f 91       	pop	r16
     fd0:	08 95       	ret

00000fd2 <__ultoa_invert>:
     fd2:	fa 01       	movw	r30, r20
     fd4:	aa 27       	eor	r26, r26
     fd6:	28 30       	cpi	r18, 0x08	; 8
     fd8:	51 f1       	breq	.+84     	; 0x102e <__ultoa_invert+0x5c>
     fda:	20 31       	cpi	r18, 0x10	; 16
     fdc:	81 f1       	breq	.+96     	; 0x103e <__ultoa_invert+0x6c>
     fde:	e8 94       	clt
     fe0:	6f 93       	push	r22
     fe2:	6e 7f       	andi	r22, 0xFE	; 254
     fe4:	6e 5f       	subi	r22, 0xFE	; 254
     fe6:	7f 4f       	sbci	r23, 0xFF	; 255
     fe8:	8f 4f       	sbci	r24, 0xFF	; 255
     fea:	9f 4f       	sbci	r25, 0xFF	; 255
     fec:	af 4f       	sbci	r26, 0xFF	; 255
     fee:	b1 e0       	ldi	r27, 0x01	; 1
     ff0:	3e d0       	rcall	.+124    	; 0x106e <__ultoa_invert+0x9c>
     ff2:	b4 e0       	ldi	r27, 0x04	; 4
     ff4:	3c d0       	rcall	.+120    	; 0x106e <__ultoa_invert+0x9c>
     ff6:	67 0f       	add	r22, r23
     ff8:	78 1f       	adc	r23, r24
     ffa:	89 1f       	adc	r24, r25
     ffc:	9a 1f       	adc	r25, r26
     ffe:	a1 1d       	adc	r26, r1
    1000:	68 0f       	add	r22, r24
    1002:	79 1f       	adc	r23, r25
    1004:	8a 1f       	adc	r24, r26
    1006:	91 1d       	adc	r25, r1
    1008:	a1 1d       	adc	r26, r1
    100a:	6a 0f       	add	r22, r26
    100c:	71 1d       	adc	r23, r1
    100e:	81 1d       	adc	r24, r1
    1010:	91 1d       	adc	r25, r1
    1012:	a1 1d       	adc	r26, r1
    1014:	20 d0       	rcall	.+64     	; 0x1056 <__ultoa_invert+0x84>
    1016:	09 f4       	brne	.+2      	; 0x101a <__ultoa_invert+0x48>
    1018:	68 94       	set
    101a:	3f 91       	pop	r19
    101c:	2a e0       	ldi	r18, 0x0A	; 10
    101e:	26 9f       	mul	r18, r22
    1020:	11 24       	eor	r1, r1
    1022:	30 19       	sub	r19, r0
    1024:	30 5d       	subi	r19, 0xD0	; 208
    1026:	31 93       	st	Z+, r19
    1028:	de f6       	brtc	.-74     	; 0xfe0 <__ultoa_invert+0xe>
    102a:	cf 01       	movw	r24, r30
    102c:	08 95       	ret
    102e:	46 2f       	mov	r20, r22
    1030:	47 70       	andi	r20, 0x07	; 7
    1032:	40 5d       	subi	r20, 0xD0	; 208
    1034:	41 93       	st	Z+, r20
    1036:	b3 e0       	ldi	r27, 0x03	; 3
    1038:	0f d0       	rcall	.+30     	; 0x1058 <__ultoa_invert+0x86>
    103a:	c9 f7       	brne	.-14     	; 0x102e <__ultoa_invert+0x5c>
    103c:	f6 cf       	rjmp	.-20     	; 0x102a <__ultoa_invert+0x58>
    103e:	46 2f       	mov	r20, r22
    1040:	4f 70       	andi	r20, 0x0F	; 15
    1042:	40 5d       	subi	r20, 0xD0	; 208
    1044:	4a 33       	cpi	r20, 0x3A	; 58
    1046:	18 f0       	brcs	.+6      	; 0x104e <__ultoa_invert+0x7c>
    1048:	49 5d       	subi	r20, 0xD9	; 217
    104a:	31 fd       	sbrc	r19, 1
    104c:	40 52       	subi	r20, 0x20	; 32
    104e:	41 93       	st	Z+, r20
    1050:	02 d0       	rcall	.+4      	; 0x1056 <__ultoa_invert+0x84>
    1052:	a9 f7       	brne	.-22     	; 0x103e <__ultoa_invert+0x6c>
    1054:	ea cf       	rjmp	.-44     	; 0x102a <__ultoa_invert+0x58>
    1056:	b4 e0       	ldi	r27, 0x04	; 4
    1058:	a6 95       	lsr	r26
    105a:	97 95       	ror	r25
    105c:	87 95       	ror	r24
    105e:	77 95       	ror	r23
    1060:	67 95       	ror	r22
    1062:	ba 95       	dec	r27
    1064:	c9 f7       	brne	.-14     	; 0x1058 <__ultoa_invert+0x86>
    1066:	00 97       	sbiw	r24, 0x00	; 0
    1068:	61 05       	cpc	r22, r1
    106a:	71 05       	cpc	r23, r1
    106c:	08 95       	ret
    106e:	9b 01       	movw	r18, r22
    1070:	ac 01       	movw	r20, r24
    1072:	0a 2e       	mov	r0, r26
    1074:	06 94       	lsr	r0
    1076:	57 95       	ror	r21
    1078:	47 95       	ror	r20
    107a:	37 95       	ror	r19
    107c:	27 95       	ror	r18
    107e:	ba 95       	dec	r27
    1080:	c9 f7       	brne	.-14     	; 0x1074 <__ultoa_invert+0xa2>
    1082:	62 0f       	add	r22, r18
    1084:	73 1f       	adc	r23, r19
    1086:	84 1f       	adc	r24, r20
    1088:	95 1f       	adc	r25, r21
    108a:	a0 1d       	adc	r26, r0
    108c:	08 95       	ret

0000108e <__prologue_saves__>:
    108e:	2f 92       	push	r2
    1090:	3f 92       	push	r3
    1092:	4f 92       	push	r4
    1094:	5f 92       	push	r5
    1096:	6f 92       	push	r6
    1098:	7f 92       	push	r7
    109a:	8f 92       	push	r8
    109c:	9f 92       	push	r9
    109e:	af 92       	push	r10
    10a0:	bf 92       	push	r11
    10a2:	cf 92       	push	r12
    10a4:	df 92       	push	r13
    10a6:	ef 92       	push	r14
    10a8:	ff 92       	push	r15
    10aa:	0f 93       	push	r16
    10ac:	1f 93       	push	r17
    10ae:	cf 93       	push	r28
    10b0:	df 93       	push	r29
    10b2:	cd b7       	in	r28, 0x3d	; 61
    10b4:	de b7       	in	r29, 0x3e	; 62
    10b6:	ca 1b       	sub	r28, r26
    10b8:	db 0b       	sbc	r29, r27
    10ba:	0f b6       	in	r0, 0x3f	; 63
    10bc:	f8 94       	cli
    10be:	de bf       	out	0x3e, r29	; 62
    10c0:	0f be       	out	0x3f, r0	; 63
    10c2:	cd bf       	out	0x3d, r28	; 61
    10c4:	09 94       	ijmp

000010c6 <__epilogue_restores__>:
    10c6:	2a 88       	ldd	r2, Y+18	; 0x12
    10c8:	39 88       	ldd	r3, Y+17	; 0x11
    10ca:	48 88       	ldd	r4, Y+16	; 0x10
    10cc:	5f 84       	ldd	r5, Y+15	; 0x0f
    10ce:	6e 84       	ldd	r6, Y+14	; 0x0e
    10d0:	7d 84       	ldd	r7, Y+13	; 0x0d
    10d2:	8c 84       	ldd	r8, Y+12	; 0x0c
    10d4:	9b 84       	ldd	r9, Y+11	; 0x0b
    10d6:	aa 84       	ldd	r10, Y+10	; 0x0a
    10d8:	b9 84       	ldd	r11, Y+9	; 0x09
    10da:	c8 84       	ldd	r12, Y+8	; 0x08
    10dc:	df 80       	ldd	r13, Y+7	; 0x07
    10de:	ee 80       	ldd	r14, Y+6	; 0x06
    10e0:	fd 80       	ldd	r15, Y+5	; 0x05
    10e2:	0c 81       	ldd	r16, Y+4	; 0x04
    10e4:	1b 81       	ldd	r17, Y+3	; 0x03
    10e6:	aa 81       	ldd	r26, Y+2	; 0x02
    10e8:	b9 81       	ldd	r27, Y+1	; 0x01
    10ea:	ce 0f       	add	r28, r30
    10ec:	d1 1d       	adc	r29, r1
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	f8 94       	cli
    10f2:	de bf       	out	0x3e, r29	; 62
    10f4:	0f be       	out	0x3f, r0	; 63
    10f6:	cd bf       	out	0x3d, r28	; 61
    10f8:	ed 01       	movw	r28, r26
    10fa:	08 95       	ret

000010fc <_exit>:
    10fc:	f8 94       	cli

000010fe <__stop_program>:
    10fe:	ff cf       	rjmp	.-2      	; 0x10fe <__stop_program>
