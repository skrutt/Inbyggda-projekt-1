
proj1_remote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000c5e  00000cf2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000dc  0080011c  0080011c  00000d0e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d0e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000148  00000000  00000000  00000d3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011ae  00000000  00000000  00000e86  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008b3  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000776  00000000  00000000  000028e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000034c  00000000  00000000  00003060  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000058e  00000000  00000000  000033ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c5a  00000000  00000000  0000393a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000110  00000000  00000000  00004594  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__vector_18>
  4c:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e5       	ldi	r30, 0x5E	; 94
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 31       	cpi	r26, 0x1C	; 28
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e1       	ldi	r26, 0x1C	; 28
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 3f       	cpi	r26, 0xF8	; 248
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 29 01 	call	0x252	; 0x252 <main>
  9e:	0c 94 2d 06 	jmp	0xc5a	; 0xc5a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <joystick_init>:
#include "joystick.h"

void joystick_init(Joystick *js, uint8_t deadzone_left, uint8_t deadzone_right, uint8_t middle_left, uint8_t middle_right) {
  a6:	0f 93       	push	r16
  a8:	fc 01       	movw	r30, r24
	js->deadzone_left = deadzone_left;
  aa:	62 83       	std	Z+2, r22	; 0x02
	js->deadzone_right = deadzone_right;
  ac:	43 83       	std	Z+3, r20	; 0x03
	js->middle_left = middle_left;
  ae:	24 83       	std	Z+4, r18	; 0x04
	js->middle_right = middle_right;
  b0:	05 83       	std	Z+5, r16	; 0x05
	
	OCR1A = 60000; 								// Set compare value.
	TCCR1B |= ((1 << CS10) | (1 << CS11)); 		// Start timer with 64 prescaler.
	*/
	//----------- Config ADC -------------
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);  	// ADC prescaler to 128 (gives 125kHz with 8MHz cpu).
  b2:	ea e7       	ldi	r30, 0x7A	; 122
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	86 60       	ori	r24, 0x06	; 6
  ba:	80 83       	st	Z, r24
	ADMUX |= (1 << REFS0); 						// Use AVCC as reference.
  bc:	ac e7       	ldi	r26, 0x7C	; 124
  be:	b0 e0       	ldi	r27, 0x00	; 0
  c0:	8c 91       	ld	r24, X
  c2:	80 64       	ori	r24, 0x40	; 64
  c4:	8c 93       	st	X, r24
	
	ADCSRA |= (1 << ADEN); 						// Enable ADC
  c6:	80 81       	ld	r24, Z
  c8:	80 68       	ori	r24, 0x80	; 128
  ca:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);  					// Start conversion
  cc:	80 81       	ld	r24, Z
  ce:	80 64       	ori	r24, 0x40	; 64
  d0:	80 83       	st	Z, r24
	
}
  d2:	0f 91       	pop	r16
  d4:	08 95       	ret

000000d6 <joystick_get_throttle>:
void joystick_update(Joystick *js) {
	//js->x = joystick_read_axis(JOYSTICK_X_CHANNEL);
	//js->y = joystick_read_axis(JOYSTICK_Y_CHANNEL);
}

uint8_t joystick_get_throttle(Joystick *js, uint8_t ch) {
  d6:	cf 92       	push	r12
  d8:	df 92       	push	r13
  da:	ef 92       	push	r14
  dc:	ff 92       	push	r15
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
	ADMUX &= 0xF0;						//Clear the old channel
  e2:	ec e7       	ldi	r30, 0x7C	; 124
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	20 81       	ld	r18, Z
  e8:	20 7f       	andi	r18, 0xF0	; 240
  ea:	20 83       	st	Z, r18
	ADMUX |= ch;
  ec:	20 81       	ld	r18, Z
  ee:	26 2b       	or	r18, r22
  f0:	20 83       	st	Z, r18
	ADCSRA |= (1<<ADSC);                //Start new conversion
  f2:	ea e7       	ldi	r30, 0x7A	; 122
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	20 81       	ld	r18, Z
  f8:	20 64       	ori	r18, 0x40	; 64
  fa:	20 83       	st	Z, r18
	while(ADCSRA & (1<<ADSC));          //Wait until the conversion is done
  fc:	20 81       	ld	r18, Z
  fe:	26 fd       	sbrc	r18, 6
 100:	fd cf       	rjmp	.-6      	; 0xfc <joystick_get_throttle+0x26>
	ADCSRA |= (1<<ADSC);                //Start new conversion
 102:	ea e7       	ldi	r30, 0x7A	; 122
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	20 81       	ld	r18, Z
 108:	20 64       	ori	r18, 0x40	; 64
 10a:	20 83       	st	Z, r18
	while(ADCSRA & (1<<ADSC));          //Wait until the conversion is done
 10c:	20 81       	ld	r18, Z
 10e:	26 fd       	sbrc	r18, 6
 110:	fd cf       	rjmp	.-6      	; 0x10c <joystick_get_throttle+0x36>
	
	uint8_t mid_min = 127;
	uint8_t mid_max = 127;
	
	if(ch == JOYSTICK_LEFT_CHANNEL) {
 112:	61 30       	cpi	r22, 0x01	; 1
 114:	39 f4       	brne	.+14     	; 0x124 <joystick_get_throttle+0x4e>
		mid_min = js->middle_left - js->deadzone_left;
 116:	fc 01       	movw	r30, r24
 118:	24 81       	ldd	r18, Z+4	; 0x04
 11a:	c2 81       	ldd	r28, Z+2	; 0x02
 11c:	d2 2f       	mov	r29, r18
 11e:	dc 1b       	sub	r29, r28
		mid_max = js->middle_left + js->deadzone_left;
 120:	c2 0f       	add	r28, r18
 122:	0b c0       	rjmp	.+22     	; 0x13a <joystick_get_throttle+0x64>
	}
	else if(ch == JOYSTICK_RIGHT_CHANNEL) {
 124:	61 11       	cpse	r22, r1
 126:	07 c0       	rjmp	.+14     	; 0x136 <joystick_get_throttle+0x60>
		mid_min = js->middle_right - js->deadzone_right;
 128:	fc 01       	movw	r30, r24
 12a:	25 81       	ldd	r18, Z+5	; 0x05
 12c:	c3 81       	ldd	r28, Z+3	; 0x03
 12e:	d2 2f       	mov	r29, r18
 130:	dc 1b       	sub	r29, r28
		mid_max = js->middle_right + js->deadzone_right;		
 132:	c2 0f       	add	r28, r18
 134:	02 c0       	rjmp	.+4      	; 0x13a <joystick_get_throttle+0x64>
	while(ADCSRA & (1<<ADSC));          //Wait until the conversion is done
	ADCSRA |= (1<<ADSC);                //Start new conversion
	while(ADCSRA & (1<<ADSC));          //Wait until the conversion is done
	
	uint8_t mid_min = 127;
	uint8_t mid_max = 127;
 136:	cf e7       	ldi	r28, 0x7F	; 127
	ADCSRA |= (1<<ADSC);                //Start new conversion
	while(ADCSRA & (1<<ADSC));          //Wait until the conversion is done
	ADCSRA |= (1<<ADSC);                //Start new conversion
	while(ADCSRA & (1<<ADSC));          //Wait until the conversion is done
	
	uint8_t mid_min = 127;
 138:	df e7       	ldi	r29, 0x7F	; 127
	else if(ch == JOYSTICK_RIGHT_CHANNEL) {
		mid_min = js->middle_right - js->deadzone_right;
		mid_max = js->middle_right + js->deadzone_right;		
	}
	
	uint8_t th = (ADCW>>2);
 13a:	80 91 78 00 	lds	r24, 0x0078
 13e:	90 91 79 00 	lds	r25, 0x0079
 142:	96 95       	lsr	r25
 144:	87 95       	ror	r24
 146:	96 95       	lsr	r25
 148:	87 95       	ror	r24
	
	if(th >= mid_min && th <= mid_max) {
 14a:	8d 17       	cp	r24, r29
 14c:	20 f0       	brcs	.+8      	; 0x156 <joystick_get_throttle+0x80>
 14e:	c8 17       	cp	r28, r24
 150:	08 f0       	brcs	.+2      	; 0x154 <joystick_get_throttle+0x7e>
 152:	59 c0       	rjmp	.+178    	; 0x206 <joystick_get_throttle+0x130>
 154:	2b c0       	rjmp	.+86     	; 0x1ac <joystick_get_throttle+0xd6>
		th = 127;
	}
	
	else if (th < mid_min) {
		th = 127-(((float)(mid_min - th)/(float)(mid_min)) * 127);
 156:	2d 2f       	mov	r18, r29
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	b9 01       	movw	r22, r18
 15c:	68 1b       	sub	r22, r24
 15e:	71 09       	sbc	r23, r1
 160:	88 27       	eor	r24, r24
 162:	77 fd       	sbrc	r23, 7
 164:	80 95       	com	r24
 166:	98 2f       	mov	r25, r24
 168:	0e 94 1c 05 	call	0xa38	; 0xa38 <__floatsisf>
 16c:	6b 01       	movw	r12, r22
 16e:	7c 01       	movw	r14, r24
 170:	6d 2f       	mov	r22, r29
 172:	70 e0       	ldi	r23, 0x00	; 0
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 1a 05 	call	0xa34	; 0xa34 <__floatunsisf>
 17c:	9b 01       	movw	r18, r22
 17e:	ac 01       	movw	r20, r24
 180:	c7 01       	movw	r24, r14
 182:	b6 01       	movw	r22, r12
 184:	0e 94 86 04 	call	0x90c	; 0x90c <__divsf3>
 188:	20 e0       	ldi	r18, 0x00	; 0
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	4e ef       	ldi	r20, 0xFE	; 254
 18e:	52 e4       	ldi	r21, 0x42	; 66
 190:	0e 94 a8 05 	call	0xb50	; 0xb50 <__mulsf3>
 194:	9b 01       	movw	r18, r22
 196:	ac 01       	movw	r20, r24
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	8e ef       	ldi	r24, 0xFE	; 254
 19e:	92 e4       	ldi	r25, 0x42	; 66
 1a0:	0e 94 21 04 	call	0x842	; 0x842 <__subsf3>
 1a4:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__fixunssfsi>
 1a8:	86 2f       	mov	r24, r22
 1aa:	2e c0       	rjmp	.+92     	; 0x208 <joystick_get_throttle+0x132>
	}
	else if (th > mid_max) {
		th = (((float)(th-mid_max)/(float)(255-mid_max)) * 127) + 127;
 1ac:	d0 e0       	ldi	r29, 0x00	; 0
 1ae:	bc 01       	movw	r22, r24
 1b0:	77 27       	eor	r23, r23
 1b2:	6c 1b       	sub	r22, r28
 1b4:	7d 0b       	sbc	r23, r29
 1b6:	88 27       	eor	r24, r24
 1b8:	77 fd       	sbrc	r23, 7
 1ba:	80 95       	com	r24
 1bc:	98 2f       	mov	r25, r24
 1be:	0e 94 1c 05 	call	0xa38	; 0xa38 <__floatsisf>
 1c2:	6b 01       	movw	r12, r22
 1c4:	7c 01       	movw	r14, r24
 1c6:	6f ef       	ldi	r22, 0xFF	; 255
 1c8:	70 e0       	ldi	r23, 0x00	; 0
 1ca:	6c 1b       	sub	r22, r28
 1cc:	7d 0b       	sbc	r23, r29
 1ce:	88 27       	eor	r24, r24
 1d0:	77 fd       	sbrc	r23, 7
 1d2:	80 95       	com	r24
 1d4:	98 2f       	mov	r25, r24
 1d6:	0e 94 1c 05 	call	0xa38	; 0xa38 <__floatsisf>
 1da:	9b 01       	movw	r18, r22
 1dc:	ac 01       	movw	r20, r24
 1de:	c7 01       	movw	r24, r14
 1e0:	b6 01       	movw	r22, r12
 1e2:	0e 94 86 04 	call	0x90c	; 0x90c <__divsf3>
 1e6:	20 e0       	ldi	r18, 0x00	; 0
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	4e ef       	ldi	r20, 0xFE	; 254
 1ec:	52 e4       	ldi	r21, 0x42	; 66
 1ee:	0e 94 a8 05 	call	0xb50	; 0xb50 <__mulsf3>
 1f2:	20 e0       	ldi	r18, 0x00	; 0
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	4e ef       	ldi	r20, 0xFE	; 254
 1f8:	52 e4       	ldi	r21, 0x42	; 66
 1fa:	0e 94 22 04 	call	0x844	; 0x844 <__addsf3>
 1fe:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__fixunssfsi>
 202:	86 2f       	mov	r24, r22
 204:	01 c0       	rjmp	.+2      	; 0x208 <joystick_get_throttle+0x132>
	}
	
	uint8_t th = (ADCW>>2);
	
	if(th >= mid_min && th <= mid_max) {
		th = 127;
 206:	8f e7       	ldi	r24, 0x7F	; 127
	else if (th > mid_max) {
		th = (((float)(th-mid_max)/(float)(255-mid_max)) * 127) + 127;
	}

	return th;
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	ff 90       	pop	r15
 20e:	ef 90       	pop	r14
 210:	df 90       	pop	r13
 212:	cf 90       	pop	r12
 214:	08 95       	ret

00000216 <enable_transmit>:
#define TRANSMIT_PORT_DDR	DDRC

//Set transmit high
void enable_transmit()
{
	TRANSMIT_PORT_DDR |= TRANSMIT_PIN;
 216:	3c 9a       	sbi	0x07, 4	; 7
	TRANSMIT_PORT	|= TRANSMIT_PIN;
 218:	44 9a       	sbi	0x08, 4	; 8
 21a:	08 95       	ret

0000021c <disable_transmit>:
}
//Set transmit low
void disable_transmit()
{
	TRANSMIT_PORT_DDR |= TRANSMIT_PIN;
 21c:	3c 9a       	sbi	0x07, 4	; 7
	TRANSMIT_PORT	&= ~TRANSMIT_PIN;
 21e:	88 b1       	in	r24, 0x08	; 8
 220:	80 7e       	andi	r24, 0xE0	; 224
 222:	88 b9       	out	0x08, r24	; 8
 224:	08 95       	ret

00000226 <usart_putchar>:


void usart_putchar(char data)
{
	// Stay here until data buffer is empty
	while (!(UCSR0A & _BV(UDRE0)));
 226:	e0 ec       	ldi	r30, 0xC0	; 192
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	90 81       	ld	r25, Z
 22c:	95 ff       	sbrs	r25, 5
 22e:	fd cf       	rjmp	.-6      	; 0x22a <usart_putchar+0x4>
	UDR0 = data;
 230:	80 93 c6 00 	sts	0x00C6, r24
 234:	08 95       	ret

00000236 <usart_putchar_printf>:
	
}

int usart_putchar_printf(char var, FILE *stream) {
 236:	cf 93       	push	r28
 238:	c8 2f       	mov	r28, r24
	if (var == '\n') usart_putchar('\r');
 23a:	8a 30       	cpi	r24, 0x0A	; 10
 23c:	19 f4       	brne	.+6      	; 0x244 <usart_putchar_printf+0xe>
 23e:	8d e0       	ldi	r24, 0x0D	; 13
 240:	0e 94 13 01 	call	0x226	; 0x226 <usart_putchar>
	usart_putchar(var);
 244:	8c 2f       	mov	r24, r28
 246:	0e 94 13 01 	call	0x226	; 0x226 <usart_putchar>
	return 0;
}
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	cf 91       	pop	r28
 250:	08 95       	ret

00000252 <main>:

static FILE mystdout = FDEV_SETUP_STREAM(usart_putchar_printf, NULL, _FDEV_SETUP_WRITE);


int main(void)
{
 252:	cf 93       	push	r28
 254:	df 93       	push	r29
 256:	cd b7       	in	r28, 0x3d	; 61
 258:	de b7       	in	r29, 0x3e	; 62
 25a:	2c 97       	sbiw	r28, 0x0c	; 12
 25c:	0f b6       	in	r0, 0x3f	; 63
 25e:	f8 94       	cli
 260:	de bf       	out	0x3e, r29	; 62
 262:	0f be       	out	0x3f, r0	; 63
 264:	cd bf       	out	0x3d, r28	; 61
	stdout = &mystdout;
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	91 e0       	ldi	r25, 0x01	; 1
 26a:	90 93 f5 01 	sts	0x01F5, r25
 26e:	80 93 f4 01 	sts	0x01F4, r24
	Joystick js;
	joystick_init(&js, 2, 4, 126, 131);
 272:	03 e8       	ldi	r16, 0x83	; 131
 274:	2e e7       	ldi	r18, 0x7E	; 126
 276:	44 e0       	ldi	r20, 0x04	; 4
 278:	62 e0       	ldi	r22, 0x02	; 2
 27a:	ce 01       	movw	r24, r28
 27c:	01 96       	adiw	r24, 0x01	; 1
 27e:	0e 94 53 00 	call	0xa6	; 0xa6 <joystick_init>
	
	InitUART(9600);
 282:	80 e8       	ldi	r24, 0x80	; 128
 284:	95 e2       	ldi	r25, 0x25	; 37
 286:	0e 94 00 02 	call	0x400	; 0x400 <InitUART>
	
	sei();
 28a:	78 94       	sei
	initSevenSeg();
 28c:	0e 94 ef 01 	call	0x3de	; 0x3de <initSevenSeg>

	obstacleDistance = 0;		//Distance to obstacle as measured by IR sensor
 290:	10 92 25 01 	sts	0x0125, r1
		
	super_paketet package;
	package.adress = ADRESS;
 294:	86 e6       	ldi	r24, 0x66	; 102
 296:	8f 83       	std	Y+7, r24	; 0x07
	
	//Set up superpaketet
	set_link_mode_functions(enable_transmit, disable_transmit);	
 298:	6e e0       	ldi	r22, 0x0E	; 14
 29a:	71 e0       	ldi	r23, 0x01	; 1
 29c:	8b e0       	ldi	r24, 0x0B	; 11
 29e:	91 e0       	ldi	r25, 0x01	; 1
 2a0:	0e 94 f7 01 	call	0x3ee	; 0x3ee <set_link_mode_functions>
	enable_transmit();
 2a4:	0e 94 0b 01 	call	0x216	; 0x216 <enable_transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a8:	2f ef       	ldi	r18, 0xFF	; 255
 2aa:	89 e6       	ldi	r24, 0x69	; 105
 2ac:	98 e1       	ldi	r25, 0x18	; 24
 2ae:	21 50       	subi	r18, 0x01	; 1
 2b0:	80 40       	sbci	r24, 0x00	; 0
 2b2:	90 40       	sbci	r25, 0x00	; 0
 2b4:	e1 f7       	brne	.-8      	; 0x2ae <main+0x5c>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <main+0x66>
 2b8:	00 00       	nop
	
	
	uint16_t thScaling = 10000;
	
	_delay_ms(1000);
	package.type = 0x02;
 2ba:	82 e0       	ldi	r24, 0x02	; 2
 2bc:	88 87       	std	Y+8, r24	; 0x08
	package.payload[0] = thScaling & 0xFF;
 2be:	80 e1       	ldi	r24, 0x10	; 16
 2c0:	89 87       	std	Y+9, r24	; 0x09
	package.payload[1] = (thScaling >> 8);
 2c2:	87 e2       	ldi	r24, 0x27	; 39
 2c4:	8a 87       	std	Y+10, r24	; 0x0a
	send_package(package);
 2c6:	4f 81       	ldd	r20, Y+7	; 0x07
 2c8:	52 e0       	ldi	r21, 0x02	; 2
 2ca:	60 e1       	ldi	r22, 0x10	; 16
 2cc:	77 e2       	ldi	r23, 0x27	; 39
 2ce:	8b 85       	ldd	r24, Y+11	; 0x0b
 2d0:	0e 94 9f 02 	call	0x53e	; 0x53e <send_package>
 2d4:	8f e4       	ldi	r24, 0x4F	; 79
 2d6:	93 ec       	ldi	r25, 0xC3	; 195
 2d8:	01 97       	sbiw	r24, 0x01	; 1
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <main+0x86>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <main+0x8c>
 2de:	00 00       	nop
	_delay_ms(25);
	
	
	// Counter for timing distance requests
	volatile uint8_t distReqCnt = 0;
 2e0:	1c 86       	std	Y+12, r1	; 0x0c
		//printf("%d, ", joystick_get_throttle(&js, JOYSTICK_LEFT_CHANNEL));
		//printf("%d \n", joystick_get_throttle(&js, JOYSTICK_RIGHT_CHANNEL));
	
    
    	
		package.type = 0x01;
 2e2:	11 e0       	ldi	r17, 0x01	; 1
		
		distReqCnt++;
		
		if(distReqCnt >= 50) {
			_delay_ms(5);
			package.type = 0x07;	//Demand distance data
 2e4:	07 e0       	ldi	r16, 0x07	; 7
		//printf("%d, ", joystick_get_throttle(&js, JOYSTICK_LEFT_CHANNEL));
		//printf("%d \n", joystick_get_throttle(&js, JOYSTICK_RIGHT_CHANNEL));
	
    
    	
		package.type = 0x01;
 2e6:	18 87       	std	Y+8, r17	; 0x08
        package.payload[0] = joystick_get_throttle(&js, JOYSTICK_LEFT_CHANNEL);
 2e8:	61 2f       	mov	r22, r17
 2ea:	ce 01       	movw	r24, r28
 2ec:	01 96       	adiw	r24, 0x01	; 1
 2ee:	0e 94 6b 00 	call	0xd6	; 0xd6 <joystick_get_throttle>
 2f2:	89 87       	std	Y+9, r24	; 0x09
		package.payload[1] = joystick_get_throttle(&js, JOYSTICK_RIGHT_CHANNEL);
 2f4:	60 e0       	ldi	r22, 0x00	; 0
 2f6:	ce 01       	movw	r24, r28
 2f8:	01 96       	adiw	r24, 0x01	; 1
 2fa:	0e 94 6b 00 	call	0xd6	; 0xd6 <joystick_get_throttle>
 2fe:	8a 87       	std	Y+10, r24	; 0x0a
        //uint8_t thRight = joystick_get_throttle_dir_combined(&js, 'r');
		send_package(package);	
 300:	4f 81       	ldd	r20, Y+7	; 0x07
 302:	58 85       	ldd	r21, Y+8	; 0x08
 304:	69 85       	ldd	r22, Y+9	; 0x09
 306:	78 2f       	mov	r23, r24
 308:	8b 85       	ldd	r24, Y+11	; 0x0b
 30a:	0e 94 9f 02 	call	0x53e	; 0x53e <send_package>
		
		distReqCnt++;
 30e:	8c 85       	ldd	r24, Y+12	; 0x0c
 310:	8f 5f       	subi	r24, 0xFF	; 255
 312:	8c 87       	std	Y+12, r24	; 0x0c
		
		if(distReqCnt >= 50) {
 314:	8c 85       	ldd	r24, Y+12	; 0x0c
 316:	82 33       	cpi	r24, 0x32	; 50
 318:	98 f0       	brcs	.+38     	; 0x340 <main+0xee>
 31a:	8f e0       	ldi	r24, 0x0F	; 15
 31c:	97 e2       	ldi	r25, 0x27	; 39
 31e:	01 97       	sbiw	r24, 0x01	; 1
 320:	f1 f7       	brne	.-4      	; 0x31e <main+0xcc>
 322:	00 c0       	rjmp	.+0      	; 0x324 <main+0xd2>
 324:	00 00       	nop
			_delay_ms(5);
			package.type = 0x07;	//Demand distance data
 326:	08 87       	std	Y+8, r16	; 0x08
			if(send_request_package(&package, 30) != -1) {
 328:	6e e1       	ldi	r22, 0x1E	; 30
 32a:	70 e0       	ldi	r23, 0x00	; 0
 32c:	ce 01       	movw	r24, r28
 32e:	07 96       	adiw	r24, 0x07	; 7
 330:	0e 94 cf 02 	call	0x59e	; 0x59e <send_request_package>
 334:	8f 3f       	cpi	r24, 0xFF	; 255
 336:	19 f0       	breq	.+6      	; 0x33e <main+0xec>
				obstacleDistance = package.payload[0];
 338:	89 85       	ldd	r24, Y+9	; 0x09
 33a:	80 93 25 01 	sts	0x0125, r24
			}
			distReqCnt = 0;
 33e:	1c 86       	std	Y+12, r1	; 0x0c
 340:	8f e6       	ldi	r24, 0x6F	; 111
 342:	97 e1       	ldi	r25, 0x17	; 23
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	f1 f7       	brne	.-4      	; 0x344 <main+0xf2>
 348:	00 c0       	rjmp	.+0      	; 0x34a <main+0xf8>
 34a:	00 00       	nop
 34c:	cc cf       	rjmp	.-104    	; 0x2e6 <main+0x94>

0000034e <__vector_9>:
#include <avr/interrupt.h>
#include "SevenSeg.h"

//Timer 2 Overflow
ISR(TIMER2_OVF_vect)
{
 34e:	1f 92       	push	r1
 350:	0f 92       	push	r0
 352:	0f b6       	in	r0, 0x3f	; 63
 354:	0f 92       	push	r0
 356:	11 24       	eor	r1, r1
 358:	2f 93       	push	r18
 35a:	8f 93       	push	r24
 35c:	9f 93       	push	r25
 35e:	ef 93       	push	r30
 360:	ff 93       	push	r31
	static uint8_t SevenSeg[] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90};
	uint8_t sevenTen;
	uint8_t sevenOne;
	static uint8_t whichSeg = 0;

	if(obstacleDistance < 10)
 362:	80 91 25 01 	lds	r24, 0x0125
 366:	8a 30       	cpi	r24, 0x0A	; 10
 368:	78 f0       	brcs	.+30     	; 0x388 <__vector_9+0x3a>
		sevenTen = 0;
		sevenOne = obstacleDistance;
	}
	else
	{
		sevenTen = obstacleDistance / 10;
 36a:	ed ec       	ldi	r30, 0xCD	; 205
 36c:	8e 9f       	mul	r24, r30
 36e:	e1 2d       	mov	r30, r1
 370:	11 24       	eor	r1, r1
 372:	e6 95       	lsr	r30
 374:	e6 95       	lsr	r30
 376:	e6 95       	lsr	r30
		sevenOne = obstacleDistance % 10;
 378:	9e 2f       	mov	r25, r30
 37a:	99 0f       	add	r25, r25
 37c:	29 2f       	mov	r18, r25
 37e:	22 0f       	add	r18, r18
 380:	22 0f       	add	r18, r18
 382:	92 0f       	add	r25, r18
 384:	89 1b       	sub	r24, r25
 386:	01 c0       	rjmp	.+2      	; 0x38a <__vector_9+0x3c>
	uint8_t sevenOne;
	static uint8_t whichSeg = 0;

	if(obstacleDistance < 10)
	{
		sevenTen = 0;
 388:	e0 e0       	ldi	r30, 0x00	; 0
	{
		sevenTen = obstacleDistance / 10;
		sevenOne = obstacleDistance % 10;
	}

	if(whichSeg == 0)
 38a:	90 91 1c 01 	lds	r25, 0x011C
 38e:	91 11       	cpse	r25, r1
 390:	0b c0       	rjmp	.+22     	; 0x3a8 <__vector_9+0x5a>
	{
		SETBIT(PORTC, 2);
 392:	42 9a       	sbi	0x08, 2	; 8
		CLEARBIT(PORTC, 3);	
 394:	43 98       	cbi	0x08, 3	; 8
		//PORTC = PORTC ~& 0xF;
		PORTB = SevenSeg[sevenTen];
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	ee 5e       	subi	r30, 0xEE	; 238
 39a:	fe 4f       	sbci	r31, 0xFE	; 254
 39c:	80 81       	ld	r24, Z
 39e:	85 b9       	out	0x05, r24	; 5
		whichSeg = 1;
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	80 93 1c 01 	sts	0x011C, r24
 3a6:	0a c0       	rjmp	.+20     	; 0x3bc <__vector_9+0x6e>
	}
	
	else
	{
		SETBIT(PORTC, 3);
 3a8:	43 9a       	sbi	0x08, 3	; 8
		CLEARBIT(PORTC, 2);
 3aa:	42 98       	cbi	0x08, 2	; 8
		//PORTC = 0x08;
		PORTB = SevenSeg[sevenOne];
 3ac:	e8 2f       	mov	r30, r24
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	ee 5e       	subi	r30, 0xEE	; 238
 3b2:	fe 4f       	sbci	r31, 0xFE	; 254
 3b4:	80 81       	ld	r24, Z
 3b6:	85 b9       	out	0x05, r24	; 5
		whichSeg = 0;
 3b8:	10 92 1c 01 	sts	0x011C, r1
	}
	
}
 3bc:	ff 91       	pop	r31
 3be:	ef 91       	pop	r30
 3c0:	9f 91       	pop	r25
 3c2:	8f 91       	pop	r24
 3c4:	2f 91       	pop	r18
 3c6:	0f 90       	pop	r0
 3c8:	0f be       	out	0x3f, r0	; 63
 3ca:	0f 90       	pop	r0
 3cc:	1f 90       	pop	r1
 3ce:	18 95       	reti

000003d0 <initTimer2>:
	initTimer2();		//Enable 7 seg timer
}

void initTimer2()
{	
	TCCR2B = 1 << CS22 | 1 << CS21 | CS20 << 0;		//Prescaler 256	
 3d0:	86 e0       	ldi	r24, 0x06	; 6
 3d2:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = (1<<TOIE2);							//Enable Timer 2 overflow flag	
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	80 93 70 00 	sts	0x0070, r24
 3dc:	08 95       	ret

000003de <initSevenSeg>:
	}
	
}

void initSevenSeg() {
	DDRB = 0xFF;		//7 seg port
 3de:	8f ef       	ldi	r24, 0xFF	; 255
 3e0:	84 b9       	out	0x04, r24	; 4
	DDRC |= 0b00001100; //7 seg enable pins
 3e2:	87 b1       	in	r24, 0x07	; 7
 3e4:	8c 60       	ori	r24, 0x0C	; 12
 3e6:	87 b9       	out	0x07, r24	; 7
	initTimer2();		//Enable 7 seg timer
 3e8:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <initTimer2>
 3ec:	08 95       	ret

000003ee <set_link_mode_functions>:
void (*disable_transmit_func)();

//Init function for controlling radio module
void set_link_mode_functions(void (*enable_transmit), void (*disable_transmit))
{
	enable_transmit_func = enable_transmit;
 3ee:	90 93 27 01 	sts	0x0127, r25
 3f2:	80 93 26 01 	sts	0x0126, r24
	disable_transmit_func = disable_transmit;
 3f6:	70 93 29 01 	sts	0x0129, r23
 3fa:	60 93 28 01 	sts	0x0128, r22
 3fe:	08 95       	ret

00000400 <InitUART>:
}


void InitUART( unsigned int baud )
{
	int baudfactor = (F_CPU/16/baud-1);
 400:	9c 01       	movw	r18, r24
 402:	40 e0       	ldi	r20, 0x00	; 0
 404:	50 e0       	ldi	r21, 0x00	; 0
 406:	60 e2       	ldi	r22, 0x20	; 32
 408:	71 ea       	ldi	r23, 0xA1	; 161
 40a:	87 e0       	ldi	r24, 0x07	; 7
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	0e 94 0b 06 	call	0xc16	; 0xc16 <__udivmodsi4>
 412:	21 50       	subi	r18, 0x01	; 1
 414:	31 09       	sbc	r19, r1
	UBRR0H = (unsigned char)(baudfactor>>8);	//set the baud rate
 416:	30 93 c5 00 	sts	0x00C5, r19
	UBRR0L = (unsigned char)baudfactor;
 41a:	20 93 c4 00 	sts	0x00C4, r18
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);			//enable UART receiver and transmitter
 41e:	e1 ec       	ldi	r30, 0xC1	; 193
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	88 e1       	ldi	r24, 0x18	; 24
 424:	80 83       	st	Z, r24
	/* Set frame format: 8data */
	UCSR0C = (3<<UCSZ00);
 426:	86 e0       	ldi	r24, 0x06	; 6
 428:	80 93 c2 00 	sts	0x00C2, r24
	//Activate interrupts
	UCSR0B |= (1 << UDRIE0) + (1 << RXCIE0);
 42c:	80 81       	ld	r24, Z
 42e:	80 6a       	ori	r24, 0xA0	; 160
 430:	80 83       	st	Z, r24
 432:	08 95       	ret

00000434 <do_crc>:

//make crc checksum
uint8_t do_crc(uint8_t in_data[], uint8_t length)
{
	uint8_t ret = 0;
	for (int i = 0; i < length; i++)
 434:	70 e0       	ldi	r23, 0x00	; 0
 436:	16 16       	cp	r1, r22
 438:	17 06       	cpc	r1, r23
 43a:	6c f4       	brge	.+26     	; 0x456 <do_crc+0x22>
 43c:	e8 2f       	mov	r30, r24
 43e:	f9 2f       	mov	r31, r25
 440:	20 e0       	ldi	r18, 0x00	; 0
 442:	30 e0       	ldi	r19, 0x00	; 0


//make crc checksum
uint8_t do_crc(uint8_t in_data[], uint8_t length)
{
	uint8_t ret = 0;
 444:	80 e0       	ldi	r24, 0x00	; 0
	for (int i = 0; i < length; i++)
	{
		//xor
		ret ^= in_data[i];
 446:	91 91       	ld	r25, Z+
 448:	89 27       	eor	r24, r25

//make crc checksum
uint8_t do_crc(uint8_t in_data[], uint8_t length)
{
	uint8_t ret = 0;
	for (int i = 0; i < length; i++)
 44a:	2f 5f       	subi	r18, 0xFF	; 255
 44c:	3f 4f       	sbci	r19, 0xFF	; 255
 44e:	26 17       	cp	r18, r22
 450:	37 07       	cpc	r19, r23
 452:	cc f3       	brlt	.-14     	; 0x446 <do_crc+0x12>
 454:	08 95       	ret


//make crc checksum
uint8_t do_crc(uint8_t in_data[], uint8_t length)
{
	uint8_t ret = 0;
 456:	80 e0       	ldi	r24, 0x00	; 0
	{
		//xor
		ret ^= in_data[i];
	}
	return ret;
}
 458:	08 95       	ret

0000045a <process_data_for_package>:

//Call from isr
super_paketet process_data_for_package(char incomming_byte)
{
 45a:	1f 93       	push	r17
 45c:	cf 93       	push	r28
 45e:	df 93       	push	r29
 460:	00 d0       	rcall	.+0      	; 0x462 <process_data_for_package+0x8>
 462:	00 d0       	rcall	.+0      	; 0x464 <process_data_for_package+0xa>
 464:	1f 92       	push	r1
 466:	cd b7       	in	r28, 0x3d	; 61
 468:	de b7       	in	r29, 0x3e	; 62
 46a:	18 2f       	mov	r17, r24
	//static uint8_t		counter = 0;
	super_paketet *package = (super_paketet *)buffer;
	super_paketet *new_package = (super_paketet *)(buffer + 1);
	
	//move into last place in buffer
	buffer[PACKAGE_SIZE] = incomming_byte;
 46c:	80 93 22 01 	sts	0x0122, r24
	//counter++;
	
	//Copy new content
	*package = *new_package;
 470:	95 e0       	ldi	r25, 0x05	; 5
 472:	ee e1       	ldi	r30, 0x1E	; 30
 474:	f1 e0       	ldi	r31, 0x01	; 1
 476:	ad e1       	ldi	r26, 0x1D	; 29
 478:	b1 e0       	ldi	r27, 0x01	; 1
 47a:	01 90       	ld	r0, Z+
 47c:	0d 92       	st	X+, r0
 47e:	9a 95       	dec	r25
 480:	e1 f7       	brne	.-8      	; 0x47a <process_data_for_package+0x20>
	//check for package
	
	
	if (package->adress == ADRESS)
 482:	80 91 1d 01 	lds	r24, 0x011D
 486:	86 36       	cpi	r24, 0x66	; 102
 488:	89 f4       	brne	.+34     	; 0x4ac <process_data_for_package+0x52>
	{
		//Woo paket!
		//Crc osv
		if (package->crc == do_crc((uint8_t*)package, PACKAGE_SIZE - 1))
 48a:	64 e0       	ldi	r22, 0x04	; 4
 48c:	8d e1       	ldi	r24, 0x1D	; 29
 48e:	91 e0       	ldi	r25, 0x01	; 1
 490:	0e 94 1a 02 	call	0x434	; 0x434 <do_crc>
 494:	18 13       	cpse	r17, r24
 496:	0a c0       	rjmp	.+20     	; 0x4ac <process_data_for_package+0x52>
		{
			return *package;
 498:	85 e0       	ldi	r24, 0x05	; 5
 49a:	ed e1       	ldi	r30, 0x1D	; 29
 49c:	f1 e0       	ldi	r31, 0x01	; 1
 49e:	de 01       	movw	r26, r28
 4a0:	11 96       	adiw	r26, 0x01	; 1
 4a2:	01 90       	ld	r0, Z+
 4a4:	0d 92       	st	X+, r0
 4a6:	8a 95       	dec	r24
 4a8:	e1 f7       	brne	.-8      	; 0x4a2 <process_data_for_package+0x48>
 4aa:	01 c0       	rjmp	.+2      	; 0x4ae <process_data_for_package+0x54>
		}
	}
	super_paketet fail_return;
	fail_return.adress = 0;
	
	return fail_return;
 4ac:	19 82       	std	Y+1, r1	; 0x01
 4ae:	29 81       	ldd	r18, Y+1	; 0x01
 4b0:	3a 81       	ldd	r19, Y+2	; 0x02
 4b2:	4b 81       	ldd	r20, Y+3	; 0x03
 4b4:	5c 81       	ldd	r21, Y+4	; 0x04
 4b6:	6d 81       	ldd	r22, Y+5	; 0x05
}
 4b8:	70 e0       	ldi	r23, 0x00	; 0
 4ba:	80 e0       	ldi	r24, 0x00	; 0
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	0f 90       	pop	r0
 4c0:	0f 90       	pop	r0
 4c2:	0f 90       	pop	r0
 4c4:	0f 90       	pop	r0
 4c6:	0f 90       	pop	r0
 4c8:	df 91       	pop	r29
 4ca:	cf 91       	pop	r28
 4cc:	1f 91       	pop	r17
 4ce:	08 95       	ret

000004d0 <check_for_package>:

//Fetch new packages if there is one
super_paketet check_for_package()
{
 4d0:	cf 93       	push	r28
 4d2:	df 93       	push	r29
 4d4:	cd b7       	in	r28, 0x3d	; 61
 4d6:	de b7       	in	r29, 0x3e	; 62
 4d8:	2b 97       	sbiw	r28, 0x0b	; 11
 4da:	0f b6       	in	r0, 0x3f	; 63
 4dc:	f8 94       	cli
 4de:	de bf       	out	0x3e, r29	; 62
 4e0:	0f be       	out	0x3f, r0	; 63
 4e2:	cd bf       	out	0x3d, r28	; 61
	char incomming_byte;
	//Check if we have data
	while (ReceiveByte(&incomming_byte))
 4e4:	14 c0       	rjmp	.+40     	; 0x50e <check_for_package+0x3e>
	{
		super_paketet incomming_package;
		//Send new data for processing
		incomming_package = process_data_for_package(incomming_byte);
 4e6:	8e 81       	ldd	r24, Y+6	; 0x06
 4e8:	0e 94 2d 02 	call	0x45a	; 0x45a <process_data_for_package>
 4ec:	2f 83       	std	Y+7, r18	; 0x07
 4ee:	38 87       	std	Y+8, r19	; 0x08
 4f0:	49 87       	std	Y+9, r20	; 0x09
 4f2:	5a 87       	std	Y+10, r21	; 0x0a
 4f4:	6b 87       	std	Y+11, r22	; 0x0b
		//Check if we got a package
		if (incomming_package.adress != 0)
 4f6:	22 23       	and	r18, r18
 4f8:	51 f0       	breq	.+20     	; 0x50e <check_for_package+0x3e>
		{
			return incomming_package;
 4fa:	85 e0       	ldi	r24, 0x05	; 5
 4fc:	fe 01       	movw	r30, r28
 4fe:	37 96       	adiw	r30, 0x07	; 7
 500:	de 01       	movw	r26, r28
 502:	11 96       	adiw	r26, 0x01	; 1
 504:	01 90       	ld	r0, Z+
 506:	0d 92       	st	X+, r0
 508:	8a 95       	dec	r24
 50a:	e1 f7       	brne	.-8      	; 0x504 <check_for_package+0x34>
 50c:	07 c0       	rjmp	.+14     	; 0x51c <check_for_package+0x4c>
//Fetch new packages if there is one
super_paketet check_for_package()
{
	char incomming_byte;
	//Check if we have data
	while (ReceiveByte(&incomming_byte))
 50e:	ce 01       	movw	r24, r28
 510:	06 96       	adiw	r24, 0x06	; 6
 512:	0e 94 b5 03 	call	0x76a	; 0x76a <ReceiveByte>
 516:	81 11       	cpse	r24, r1
 518:	e6 cf       	rjmp	.-52     	; 0x4e6 <check_for_package+0x16>
		}
	}
	super_paketet fail_return;
	fail_return.adress = 0;
	
	return fail_return;
 51a:	19 82       	std	Y+1, r1	; 0x01
 51c:	29 81       	ldd	r18, Y+1	; 0x01
 51e:	3a 81       	ldd	r19, Y+2	; 0x02
 520:	4b 81       	ldd	r20, Y+3	; 0x03
 522:	5c 81       	ldd	r21, Y+4	; 0x04
 524:	6d 81       	ldd	r22, Y+5	; 0x05
}
 526:	70 e0       	ldi	r23, 0x00	; 0
 528:	80 e0       	ldi	r24, 0x00	; 0
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	2b 96       	adiw	r28, 0x0b	; 11
 52e:	0f b6       	in	r0, 0x3f	; 63
 530:	f8 94       	cli
 532:	de bf       	out	0x3e, r29	; 62
 534:	0f be       	out	0x3f, r0	; 63
 536:	cd bf       	out	0x3d, r28	; 61
 538:	df 91       	pop	r29
 53a:	cf 91       	pop	r28
 53c:	08 95       	ret

0000053e <send_package>:
//pad package and send over usart
void send_package(super_paketet outgoing_package)
{
 53e:	cf 93       	push	r28
 540:	df 93       	push	r29
 542:	cd b7       	in	r28, 0x3d	; 61
 544:	de b7       	in	r29, 0x3e	; 62
 546:	2c 97       	sbiw	r28, 0x0c	; 12
 548:	0f b6       	in	r0, 0x3f	; 63
 54a:	f8 94       	cli
 54c:	de bf       	out	0x3e, r29	; 62
 54e:	0f be       	out	0x3f, r0	; 63
 550:	cd bf       	out	0x3d, r28	; 61
 552:	48 87       	std	Y+8, r20	; 0x08
 554:	59 87       	std	Y+9, r21	; 0x09
 556:	6a 87       	std	Y+10, r22	; 0x0a
 558:	7b 87       	std	Y+11, r23	; 0x0b
 55a:	8c 87       	std	Y+12, r24	; 0x0c
	outgoing_package.crc = do_crc((uint8_t*)&outgoing_package, PACKAGE_SIZE-1);
 55c:	64 e0       	ldi	r22, 0x04	; 4
 55e:	ce 01       	movw	r24, r28
 560:	08 96       	adiw	r24, 0x08	; 8
 562:	0e 94 1a 02 	call	0x434	; 0x434 <do_crc>
 566:	8c 87       	std	Y+12, r24	; 0x0c
	const int outgoing_data_length = sizeof(super_paketet) + 2;
	
	char outgoing_data[outgoing_data_length]; // package + preamble
	
	*(uint16_t*)outgoing_data = PREAMBLE;
 568:	8f ef       	ldi	r24, 0xFF	; 255
 56a:	95 e5       	ldi	r25, 0x55	; 85
 56c:	9a 83       	std	Y+2, r25	; 0x02
 56e:	89 83       	std	Y+1, r24	; 0x01
	*(super_paketet*)(outgoing_data + 2) = outgoing_package;
 570:	85 e0       	ldi	r24, 0x05	; 5
 572:	fe 01       	movw	r30, r28
 574:	38 96       	adiw	r30, 0x08	; 8
 576:	de 01       	movw	r26, r28
 578:	13 96       	adiw	r26, 0x03	; 3
 57a:	01 90       	ld	r0, Z+
 57c:	0d 92       	st	X+, r0
 57e:	8a 95       	dec	r24
 580:	e1 f7       	brne	.-8      	; 0x57a <send_package+0x3c>
	
	send_string(outgoing_data, outgoing_data_length);
 582:	67 e0       	ldi	r22, 0x07	; 7
 584:	ce 01       	movw	r24, r28
 586:	01 96       	adiw	r24, 0x01	; 1
 588:	0e 94 f6 03 	call	0x7ec	; 0x7ec <send_string>
}
 58c:	2c 96       	adiw	r28, 0x0c	; 12
 58e:	0f b6       	in	r0, 0x3f	; 63
 590:	f8 94       	cli
 592:	de bf       	out	0x3e, r29	; 62
 594:	0f be       	out	0x3f, r0	; 63
 596:	cd bf       	out	0x3d, r28	; 61
 598:	df 91       	pop	r29
 59a:	cf 91       	pop	r28
 59c:	08 95       	ret

0000059e <send_request_package>:

//Send package that requires an answer
//Append request bit to type and wait for answer
//return 0 if we got answer
int8_t send_request_package(super_paketet *outgoing_package, int timeout)
{
 59e:	cf 92       	push	r12
 5a0:	df 92       	push	r13
 5a2:	ef 92       	push	r14
 5a4:	ff 92       	push	r15
 5a6:	0f 93       	push	r16
 5a8:	1f 93       	push	r17
 5aa:	cf 93       	push	r28
 5ac:	df 93       	push	r29
 5ae:	00 d0       	rcall	.+0      	; 0x5b0 <send_request_package+0x12>
 5b0:	00 d0       	rcall	.+0      	; 0x5b2 <send_request_package+0x14>
 5b2:	1f 92       	push	r1
 5b4:	cd b7       	in	r28, 0x3d	; 61
 5b6:	de b7       	in	r29, 0x3e	; 62
 5b8:	6c 01       	movw	r12, r24
 5ba:	7b 01       	movw	r14, r22
	super_paketet internal_package = *outgoing_package;
 5bc:	85 e0       	ldi	r24, 0x05	; 5
 5be:	f6 01       	movw	r30, r12
 5c0:	de 01       	movw	r26, r28
 5c2:	11 96       	adiw	r26, 0x01	; 1
 5c4:	01 90       	ld	r0, Z+
 5c6:	0d 92       	st	X+, r0
 5c8:	8a 95       	dec	r24
 5ca:	e1 f7       	brne	.-8      	; 0x5c4 <send_request_package+0x26>
 5cc:	f6 01       	movw	r30, r12
 5ce:	51 81       	ldd	r21, Z+1	; 0x01
	//Pad with request bit
	internal_package.type |= REQUEST_TYPE;	

	//Send to buffer
	send_package(internal_package);
 5d0:	40 81       	ld	r20, Z
 5d2:	49 83       	std	Y+1, r20	; 0x01
//return 0 if we got answer
int8_t send_request_package(super_paketet *outgoing_package, int timeout)
{
	super_paketet internal_package = *outgoing_package;
	//Pad with request bit
	internal_package.type |= REQUEST_TYPE;	
 5d4:	50 68       	ori	r21, 0x80	; 128

	//Send to buffer
	send_package(internal_package);
 5d6:	5a 83       	std	Y+2, r21	; 0x02
 5d8:	6b 81       	ldd	r22, Y+3	; 0x03
 5da:	7c 81       	ldd	r23, Y+4	; 0x04
 5dc:	8d 81       	ldd	r24, Y+5	; 0x05
 5de:	0e 94 9f 02 	call	0x53e	; 0x53e <send_package>
	
	//Wait for buffer to be empty
	flush_usart();
 5e2:	0e 94 1c 04 	call	0x838	; 0x838 <flush_usart>
 5e6:	8f e9       	ldi	r24, 0x9F	; 159
 5e8:	9f e0       	ldi	r25, 0x0F	; 15
 5ea:	01 97       	sbiw	r24, 0x01	; 1
 5ec:	f1 f7       	brne	.-4      	; 0x5ea <send_request_package+0x4c>
 5ee:	00 c0       	rjmp	.+0      	; 0x5f0 <send_request_package+0x52>
 5f0:	00 00       	nop
	}
}
//Wrapper
inline void set_link_mode_receive()
{
	if (disable_transmit_func)
 5f2:	e0 91 28 01 	lds	r30, 0x0128
 5f6:	f0 91 29 01 	lds	r31, 0x0129
 5fa:	30 97       	sbiw	r30, 0x00	; 0
 5fc:	09 f0       	breq	.+2      	; 0x600 <send_request_package+0x62>
	{
		disable_transmit_func();
 5fe:	09 95       	icall
	
	//Toggle transmit pin to listen
	set_link_mode_receive();
	
	//Wait for package for some time
	for (int i = 0; i < timeout; i++)
 600:	1e 14       	cp	r1, r14
 602:	1f 04       	cpc	r1, r15
 604:	24 f5       	brge	.+72     	; 0x64e <send_request_package+0xb0>
 606:	00 e0       	ldi	r16, 0x00	; 0
 608:	10 e0       	ldi	r17, 0x00	; 0
	{
		//Check if we have got a package
		internal_package = check_for_package();
 60a:	0e 94 68 02 	call	0x4d0	; 0x4d0 <check_for_package>
 60e:	29 83       	std	Y+1, r18	; 0x01
 610:	3a 83       	std	Y+2, r19	; 0x02
 612:	4b 83       	std	Y+3, r20	; 0x03
 614:	5c 83       	std	Y+4, r21	; 0x04
 616:	6d 83       	std	Y+5, r22	; 0x05
		//is it what we want?
		if (internal_package.adress != 0 && internal_package.type == outgoing_package->type)
 618:	22 23       	and	r18, r18
 61a:	71 f0       	breq	.+28     	; 0x638 <send_request_package+0x9a>
 61c:	f6 01       	movw	r30, r12
 61e:	81 81       	ldd	r24, Z+1	; 0x01
 620:	83 13       	cpse	r24, r19
 622:	0a c0       	rjmp	.+20     	; 0x638 <send_request_package+0x9a>
		{
			//Woo package!
			*outgoing_package = internal_package;
 624:	85 e0       	ldi	r24, 0x05	; 5
 626:	fe 01       	movw	r30, r28
 628:	31 96       	adiw	r30, 0x01	; 1
 62a:	d6 01       	movw	r26, r12
 62c:	01 90       	ld	r0, Z+
 62e:	0d 92       	st	X+, r0
 630:	8a 95       	dec	r24
 632:	e1 f7       	brne	.-8      	; 0x62c <send_request_package+0x8e>
			//Return success
			return 0;
 634:	80 e0       	ldi	r24, 0x00	; 0
 636:	15 c0       	rjmp	.+42     	; 0x662 <send_request_package+0xc4>
 638:	8f ec       	ldi	r24, 0xCF	; 207
 63a:	97 e0       	ldi	r25, 0x07	; 7
 63c:	01 97       	sbiw	r24, 0x01	; 1
 63e:	f1 f7       	brne	.-4      	; 0x63c <send_request_package+0x9e>
 640:	00 c0       	rjmp	.+0      	; 0x642 <send_request_package+0xa4>
 642:	00 00       	nop
	
	//Toggle transmit pin to listen
	set_link_mode_receive();
	
	//Wait for package for some time
	for (int i = 0; i < timeout; i++)
 644:	0f 5f       	subi	r16, 0xFF	; 255
 646:	1f 4f       	sbci	r17, 0xFF	; 255
 648:	0e 15       	cp	r16, r14
 64a:	1f 05       	cpc	r17, r15
 64c:	f1 f6       	brne	.-68     	; 0x60a <send_request_package+0x6c>
	disable_transmit_func = disable_transmit;
}
//Wrapper
inline void set_link_mode_transmit()
{
	if (enable_transmit_func)
 64e:	e0 91 26 01 	lds	r30, 0x0126
 652:	f0 91 27 01 	lds	r31, 0x0127
 656:	30 97       	sbiw	r30, 0x00	; 0
 658:	19 f0       	breq	.+6      	; 0x660 <send_request_package+0xc2>
	{
		enable_transmit_func();
 65a:	09 95       	icall
	
	//Toggle pin back
	set_link_mode_transmit();
	
	//Return fail
	return -1;
 65c:	8f ef       	ldi	r24, 0xFF	; 255
 65e:	01 c0       	rjmp	.+2      	; 0x662 <send_request_package+0xc4>
 660:	8f ef       	ldi	r24, 0xFF	; 255

}
 662:	0f 90       	pop	r0
 664:	0f 90       	pop	r0
 666:	0f 90       	pop	r0
 668:	0f 90       	pop	r0
 66a:	0f 90       	pop	r0
 66c:	df 91       	pop	r29
 66e:	cf 91       	pop	r28
 670:	1f 91       	pop	r17
 672:	0f 91       	pop	r16
 674:	ff 90       	pop	r15
 676:	ef 90       	pop	r14
 678:	df 90       	pop	r13
 67a:	cf 90       	pop	r12
 67c:	08 95       	ret

0000067e <__vector_19>:
#define release_lock()	sei()

//Usart transmit interrupt
//This interrupt is always called when UDR is empty
ISR(USART_UDRE_vect)
{
 67e:	1f 92       	push	r1
 680:	0f 92       	push	r0
 682:	0f b6       	in	r0, 0x3f	; 63
 684:	0f 92       	push	r0
 686:	11 24       	eor	r1, r1
 688:	2f 93       	push	r18
 68a:	8f 93       	push	r24
 68c:	9f 93       	push	r25
 68e:	ef 93       	push	r30
 690:	ff 93       	push	r31
	// check for empty transmit buffer	and if we have data
	if ( 0 != outgoing_data_counter)
 692:	80 91 24 01 	lds	r24, 0x0124
 696:	88 23       	and	r24, r24
 698:	09 f1       	breq	.+66     	; 0x6dc <__vector_19+0x5e>
	{
		outgoing_data_counter--;
 69a:	80 91 24 01 	lds	r24, 0x0124
 69e:	81 50       	subi	r24, 0x01	; 1
 6a0:	80 93 24 01 	sts	0x0124, r24
		UDR0 = *outgoing_data_head; 		// start transmition
 6a4:	e0 91 10 01 	lds	r30, 0x0110
 6a8:	f0 91 11 01 	lds	r31, 0x0111
 6ac:	80 81       	ld	r24, Z
 6ae:	80 93 c6 00 	sts	0x00C6, r24
		outgoing_data_head++;
 6b2:	80 91 10 01 	lds	r24, 0x0110
 6b6:	90 91 11 01 	lds	r25, 0x0111
 6ba:	01 96       	adiw	r24, 0x01	; 1
		if (outgoing_data_head >= (outgoing_data + USART_TX_BUFFER_SIZE))
 6bc:	21 e0       	ldi	r18, 0x01	; 1
 6be:	82 3f       	cpi	r24, 0xF2	; 242
 6c0:	92 07       	cpc	r25, r18
 6c2:	28 f4       	brcc	.+10     	; 0x6ce <__vector_19+0x50>
	// check for empty transmit buffer	and if we have data
	if ( 0 != outgoing_data_counter)
	{
		outgoing_data_counter--;
		UDR0 = *outgoing_data_head; 		// start transmition
		outgoing_data_head++;
 6c4:	90 93 11 01 	sts	0x0111, r25
 6c8:	80 93 10 01 	sts	0x0110, r24
 6cc:	0c c0       	rjmp	.+24     	; 0x6e6 <__vector_19+0x68>
		if (outgoing_data_head >= (outgoing_data + USART_TX_BUFFER_SIZE))
		{
			outgoing_data_head = outgoing_data;	//reset ring buffer
 6ce:	8e e8       	ldi	r24, 0x8E	; 142
 6d0:	91 e0       	ldi	r25, 0x01	; 1
 6d2:	90 93 11 01 	sts	0x0111, r25
 6d6:	80 93 10 01 	sts	0x0110, r24
 6da:	05 c0       	rjmp	.+10     	; 0x6e6 <__vector_19+0x68>
		}
	}else{
		//Inactivate interrupt
		UCSR0B &= ~(1 << UDRIE0);
 6dc:	e1 ec       	ldi	r30, 0xC1	; 193
 6de:	f0 e0       	ldi	r31, 0x00	; 0
 6e0:	80 81       	ld	r24, Z
 6e2:	8f 7d       	andi	r24, 0xDF	; 223
 6e4:	80 83       	st	Z, r24
		
	}
}
 6e6:	ff 91       	pop	r31
 6e8:	ef 91       	pop	r30
 6ea:	9f 91       	pop	r25
 6ec:	8f 91       	pop	r24
 6ee:	2f 91       	pop	r18
 6f0:	0f 90       	pop	r0
 6f2:	0f be       	out	0x3f, r0	; 63
 6f4:	0f 90       	pop	r0
 6f6:	1f 90       	pop	r1
 6f8:	18 95       	reti

000006fa <__vector_18>:
//Usart receive interrupt
ISR(USART_RX_vect)
{
 6fa:	1f 92       	push	r1
 6fc:	0f 92       	push	r0
 6fe:	0f b6       	in	r0, 0x3f	; 63
 700:	0f 92       	push	r0
 702:	11 24       	eor	r1, r1
 704:	2f 93       	push	r18
 706:	8f 93       	push	r24
 708:	9f 93       	push	r25
 70a:	ef 93       	push	r30
 70c:	ff 93       	push	r31
	//place char into buffer
	*incomming_data_head = UDR0;	//Read from UDR gets RX byte
 70e:	e0 91 0e 01 	lds	r30, 0x010E
 712:	f0 91 0f 01 	lds	r31, 0x010F
 716:	80 91 c6 00 	lds	r24, 0x00C6
 71a:	80 83       	st	Z, r24
	
	//increase head
	incomming_data_head++;
 71c:	80 91 0e 01 	lds	r24, 0x010E
 720:	90 91 0f 01 	lds	r25, 0x010F
 724:	01 96       	adiw	r24, 0x01	; 1
	
	
	//Check for overflow head
	if (incomming_data_head >= (incomming_data + USART_RX_BUFFER_SIZE))
 726:	21 e0       	ldi	r18, 0x01	; 1
 728:	8e 38       	cpi	r24, 0x8E	; 142
 72a:	92 07       	cpc	r25, r18
 72c:	28 f4       	brcc	.+10     	; 0x738 <__vector_18+0x3e>
{
	//place char into buffer
	*incomming_data_head = UDR0;	//Read from UDR gets RX byte
	
	//increase head
	incomming_data_head++;
 72e:	90 93 0f 01 	sts	0x010F, r25
 732:	80 93 0e 01 	sts	0x010E, r24
 736:	06 c0       	rjmp	.+12     	; 0x744 <__vector_18+0x4a>
	
	//Check for overflow head
	if (incomming_data_head >= (incomming_data + USART_RX_BUFFER_SIZE))
	{
		//End of ring, go around
		incomming_data_head = incomming_data;
 738:	8a e2       	ldi	r24, 0x2A	; 42
 73a:	91 e0       	ldi	r25, 0x01	; 1
 73c:	90 93 0f 01 	sts	0x010F, r25
 740:	80 93 0e 01 	sts	0x010E, r24
	}
	//Check for overflow counter
	if(incomming_data_counter < USART_RX_BUFFER_SIZE)
 744:	80 91 23 01 	lds	r24, 0x0123
 748:	84 36       	cpi	r24, 0x64	; 100
 74a:	28 f4       	brcc	.+10     	; 0x756 <__vector_18+0x5c>
	{
		incomming_data_counter++;
 74c:	80 91 23 01 	lds	r24, 0x0123
 750:	8f 5f       	subi	r24, 0xFF	; 255
 752:	80 93 23 01 	sts	0x0123, r24
	}
}
 756:	ff 91       	pop	r31
 758:	ef 91       	pop	r30
 75a:	9f 91       	pop	r25
 75c:	8f 91       	pop	r24
 75e:	2f 91       	pop	r18
 760:	0f 90       	pop	r0
 762:	0f be       	out	0x3f, r0	; 63
 764:	0f 90       	pop	r0
 766:	1f 90       	pop	r1
 768:	18 95       	reti

0000076a <ReceiveByte>:

/* Read and write functions */
char ReceiveByte(char * result)
{
	get_lock();
 76a:	f8 94       	cli
	//If we have data
	if (incomming_data_counter > 0)
 76c:	20 91 23 01 	lds	r18, 0x0123
 770:	22 23       	and	r18, r18
 772:	c9 f0       	breq	.+50     	; 0x7a6 <ReceiveByte+0x3c>
	{
		//Assign pointer to data 
		//Read buffer in reverse because we add positive
		volatile char * temp = incomming_data_head - incomming_data_counter;
 774:	20 91 23 01 	lds	r18, 0x0123
 778:	e0 91 0e 01 	lds	r30, 0x010E
 77c:	f0 91 0f 01 	lds	r31, 0x010F
 780:	e2 1b       	sub	r30, r18
 782:	f1 09       	sbc	r31, r1
		
		//Check pointer for overflow
		if (temp < incomming_data )
 784:	21 e0       	ldi	r18, 0x01	; 1
 786:	ea 32       	cpi	r30, 0x2A	; 42
 788:	f2 07       	cpc	r31, r18
 78a:	10 f4       	brcc	.+4      	; 0x790 <ReceiveByte+0x26>
		{
			temp += USART_RX_BUFFER_SIZE;	//Wrap around
 78c:	ec 59       	subi	r30, 0x9C	; 156
 78e:	ff 4f       	sbci	r31, 0xFF	; 255
		}
		//Decrease counter
		incomming_data_counter--;
 790:	20 91 23 01 	lds	r18, 0x0123
 794:	21 50       	subi	r18, 0x01	; 1
 796:	20 93 23 01 	sts	0x0123, r18

		//return that data
		*result = *temp;
 79a:	20 81       	ld	r18, Z
 79c:	fc 01       	movw	r30, r24
 79e:	20 83       	st	Z, r18
		release_lock();
 7a0:	78 94       	sei
		
		return 1;
 7a2:	81 e0       	ldi	r24, 0x01	; 1
 7a4:	08 95       	ret
	} 
	else
	{
		//Else fail
		release_lock();
 7a6:	78 94       	sei
		return 0;								// return the data
 7a8:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 7aa:	08 95       	ret

000007ac <send_c>:
	return temp;
}

void send_c(char c)
{
	get_lock();
 7ac:	f8 94       	cli
	//Check if there is space in the buffer
	if (outgoing_data_counter < USART_TX_BUFFER_SIZE)
 7ae:	90 91 24 01 	lds	r25, 0x0124
 7b2:	94 36       	cpi	r25, 0x64	; 100
 7b4:	c8 f4       	brcc	.+50     	; 0x7e8 <send_c+0x3c>
	{
		volatile char * temp = (outgoing_data_head + outgoing_data_counter);
 7b6:	90 91 24 01 	lds	r25, 0x0124
 7ba:	e0 91 10 01 	lds	r30, 0x0110
 7be:	f0 91 11 01 	lds	r31, 0x0111
 7c2:	e9 0f       	add	r30, r25
 7c4:	f1 1d       	adc	r31, r1
	
		//Check for overflow
		if (temp >= (outgoing_data + USART_TX_BUFFER_SIZE))
 7c6:	91 e0       	ldi	r25, 0x01	; 1
 7c8:	e2 3f       	cpi	r30, 0xF2	; 242
 7ca:	f9 07       	cpc	r31, r25
 7cc:	10 f0       	brcs	.+4      	; 0x7d2 <send_c+0x26>
		{
			temp -= USART_TX_BUFFER_SIZE;
 7ce:	e4 56       	subi	r30, 0x64	; 100
 7d0:	f1 09       	sbc	r31, r1
		}

		*temp = c;		//add to queue
 7d2:	80 83       	st	Z, r24
		outgoing_data_counter++;
 7d4:	80 91 24 01 	lds	r24, 0x0124
 7d8:	8f 5f       	subi	r24, 0xFF	; 255
 7da:	80 93 24 01 	sts	0x0124, r24
		//Activate TX interrupt
		UCSR0B |= (1 << UDRIE0);
 7de:	e1 ec       	ldi	r30, 0xC1	; 193
 7e0:	f0 e0       	ldi	r31, 0x00	; 0
 7e2:	80 81       	ld	r24, Z
 7e4:	80 62       	ori	r24, 0x20	; 32
 7e6:	80 83       	st	Z, r24
	}
	release_lock();
 7e8:	78 94       	sei
 7ea:	08 95       	ret

000007ec <send_string>:
}

int8_t send_string(char data[], uint8_t length)
{
 7ec:	0f 93       	push	r16
 7ee:	1f 93       	push	r17
 7f0:	cf 93       	push	r28
 7f2:	df 93       	push	r29
 7f4:	06 2f       	mov	r16, r22
	if (data == 0)	//Check for valid pointer
 7f6:	00 97       	sbiw	r24, 0x00	; 0
 7f8:	99 f0       	breq	.+38     	; 0x820 <send_string+0x34>
	{
		return -1;
	}
	//Check for space in buffer
	if ((length + outgoing_data_counter )>= USART_TX_BUFFER_SIZE)
 7fa:	20 91 24 01 	lds	r18, 0x0124
 7fe:	30 e0       	ldi	r19, 0x00	; 0
 800:	26 0f       	add	r18, r22
 802:	31 1d       	adc	r19, r1
 804:	24 36       	cpi	r18, 0x64	; 100
 806:	31 05       	cpc	r19, r1
 808:	6c f4       	brge	.+26     	; 0x824 <send_string+0x38>
	{
		return -2;
	}
	//All good, add to buffer
	for (uint8_t i = 0; i < length; i++ )
 80a:	66 23       	and	r22, r22
 80c:	69 f0       	breq	.+26     	; 0x828 <send_string+0x3c>
 80e:	ec 01       	movw	r28, r24
 810:	10 e0       	ldi	r17, 0x00	; 0
	{
		send_c(data[i]);
 812:	89 91       	ld	r24, Y+
 814:	0e 94 d6 03 	call	0x7ac	; 0x7ac <send_c>
	if ((length + outgoing_data_counter )>= USART_TX_BUFFER_SIZE)
	{
		return -2;
	}
	//All good, add to buffer
	for (uint8_t i = 0; i < length; i++ )
 818:	1f 5f       	subi	r17, 0xFF	; 255
 81a:	10 13       	cpse	r17, r16
 81c:	fa cf       	rjmp	.-12     	; 0x812 <send_string+0x26>
 81e:	06 c0       	rjmp	.+12     	; 0x82c <send_string+0x40>

int8_t send_string(char data[], uint8_t length)
{
	if (data == 0)	//Check for valid pointer
	{
		return -1;
 820:	8f ef       	ldi	r24, 0xFF	; 255
 822:	05 c0       	rjmp	.+10     	; 0x82e <send_string+0x42>
	}
	//Check for space in buffer
	if ((length + outgoing_data_counter )>= USART_TX_BUFFER_SIZE)
	{
		return -2;
 824:	8e ef       	ldi	r24, 0xFE	; 254
 826:	03 c0       	rjmp	.+6      	; 0x82e <send_string+0x42>
	for (uint8_t i = 0; i < length; i++ )
	{
		send_c(data[i]);
	}
	
	return 0;
 828:	80 e0       	ldi	r24, 0x00	; 0
 82a:	01 c0       	rjmp	.+2      	; 0x82e <send_string+0x42>
 82c:	80 e0       	ldi	r24, 0x00	; 0
} 
 82e:	df 91       	pop	r29
 830:	cf 91       	pop	r28
 832:	1f 91       	pop	r17
 834:	0f 91       	pop	r16
 836:	08 95       	ret

00000838 <flush_usart>:

void flush_usart()
{
	//Wait for empty buffer
	while(outgoing_data_counter){}
 838:	80 91 24 01 	lds	r24, 0x0124
 83c:	81 11       	cpse	r24, r1
 83e:	fc cf       	rjmp	.-8      	; 0x838 <flush_usart>
}
 840:	08 95       	ret

00000842 <__subsf3>:
 842:	50 58       	subi	r21, 0x80	; 128

00000844 <__addsf3>:
 844:	bb 27       	eor	r27, r27
 846:	aa 27       	eor	r26, r26
 848:	0e d0       	rcall	.+28     	; 0x866 <__addsf3x>
 84a:	48 c1       	rjmp	.+656    	; 0xadc <__fp_round>
 84c:	39 d1       	rcall	.+626    	; 0xac0 <__fp_pscA>
 84e:	30 f0       	brcs	.+12     	; 0x85c <__addsf3+0x18>
 850:	3e d1       	rcall	.+636    	; 0xace <__fp_pscB>
 852:	20 f0       	brcs	.+8      	; 0x85c <__addsf3+0x18>
 854:	31 f4       	brne	.+12     	; 0x862 <__addsf3+0x1e>
 856:	9f 3f       	cpi	r25, 0xFF	; 255
 858:	11 f4       	brne	.+4      	; 0x85e <__addsf3+0x1a>
 85a:	1e f4       	brtc	.+6      	; 0x862 <__addsf3+0x1e>
 85c:	2e c1       	rjmp	.+604    	; 0xaba <__fp_nan>
 85e:	0e f4       	brtc	.+2      	; 0x862 <__addsf3+0x1e>
 860:	e0 95       	com	r30
 862:	e7 fb       	bst	r30, 7
 864:	24 c1       	rjmp	.+584    	; 0xaae <__fp_inf>

00000866 <__addsf3x>:
 866:	e9 2f       	mov	r30, r25
 868:	4a d1       	rcall	.+660    	; 0xafe <__fp_split3>
 86a:	80 f3       	brcs	.-32     	; 0x84c <__addsf3+0x8>
 86c:	ba 17       	cp	r27, r26
 86e:	62 07       	cpc	r22, r18
 870:	73 07       	cpc	r23, r19
 872:	84 07       	cpc	r24, r20
 874:	95 07       	cpc	r25, r21
 876:	18 f0       	brcs	.+6      	; 0x87e <__addsf3x+0x18>
 878:	71 f4       	brne	.+28     	; 0x896 <__addsf3x+0x30>
 87a:	9e f5       	brtc	.+102    	; 0x8e2 <__addsf3x+0x7c>
 87c:	62 c1       	rjmp	.+708    	; 0xb42 <__fp_zero>
 87e:	0e f4       	brtc	.+2      	; 0x882 <__addsf3x+0x1c>
 880:	e0 95       	com	r30
 882:	0b 2e       	mov	r0, r27
 884:	ba 2f       	mov	r27, r26
 886:	a0 2d       	mov	r26, r0
 888:	0b 01       	movw	r0, r22
 88a:	b9 01       	movw	r22, r18
 88c:	90 01       	movw	r18, r0
 88e:	0c 01       	movw	r0, r24
 890:	ca 01       	movw	r24, r20
 892:	a0 01       	movw	r20, r0
 894:	11 24       	eor	r1, r1
 896:	ff 27       	eor	r31, r31
 898:	59 1b       	sub	r21, r25
 89a:	99 f0       	breq	.+38     	; 0x8c2 <__addsf3x+0x5c>
 89c:	59 3f       	cpi	r21, 0xF9	; 249
 89e:	50 f4       	brcc	.+20     	; 0x8b4 <__addsf3x+0x4e>
 8a0:	50 3e       	cpi	r21, 0xE0	; 224
 8a2:	68 f1       	brcs	.+90     	; 0x8fe <__addsf3x+0x98>
 8a4:	1a 16       	cp	r1, r26
 8a6:	f0 40       	sbci	r31, 0x00	; 0
 8a8:	a2 2f       	mov	r26, r18
 8aa:	23 2f       	mov	r18, r19
 8ac:	34 2f       	mov	r19, r20
 8ae:	44 27       	eor	r20, r20
 8b0:	58 5f       	subi	r21, 0xF8	; 248
 8b2:	f3 cf       	rjmp	.-26     	; 0x89a <__addsf3x+0x34>
 8b4:	46 95       	lsr	r20
 8b6:	37 95       	ror	r19
 8b8:	27 95       	ror	r18
 8ba:	a7 95       	ror	r26
 8bc:	f0 40       	sbci	r31, 0x00	; 0
 8be:	53 95       	inc	r21
 8c0:	c9 f7       	brne	.-14     	; 0x8b4 <__addsf3x+0x4e>
 8c2:	7e f4       	brtc	.+30     	; 0x8e2 <__addsf3x+0x7c>
 8c4:	1f 16       	cp	r1, r31
 8c6:	ba 0b       	sbc	r27, r26
 8c8:	62 0b       	sbc	r22, r18
 8ca:	73 0b       	sbc	r23, r19
 8cc:	84 0b       	sbc	r24, r20
 8ce:	ba f0       	brmi	.+46     	; 0x8fe <__addsf3x+0x98>
 8d0:	91 50       	subi	r25, 0x01	; 1
 8d2:	a1 f0       	breq	.+40     	; 0x8fc <__addsf3x+0x96>
 8d4:	ff 0f       	add	r31, r31
 8d6:	bb 1f       	adc	r27, r27
 8d8:	66 1f       	adc	r22, r22
 8da:	77 1f       	adc	r23, r23
 8dc:	88 1f       	adc	r24, r24
 8de:	c2 f7       	brpl	.-16     	; 0x8d0 <__addsf3x+0x6a>
 8e0:	0e c0       	rjmp	.+28     	; 0x8fe <__addsf3x+0x98>
 8e2:	ba 0f       	add	r27, r26
 8e4:	62 1f       	adc	r22, r18
 8e6:	73 1f       	adc	r23, r19
 8e8:	84 1f       	adc	r24, r20
 8ea:	48 f4       	brcc	.+18     	; 0x8fe <__addsf3x+0x98>
 8ec:	87 95       	ror	r24
 8ee:	77 95       	ror	r23
 8f0:	67 95       	ror	r22
 8f2:	b7 95       	ror	r27
 8f4:	f7 95       	ror	r31
 8f6:	9e 3f       	cpi	r25, 0xFE	; 254
 8f8:	08 f0       	brcs	.+2      	; 0x8fc <__addsf3x+0x96>
 8fa:	b3 cf       	rjmp	.-154    	; 0x862 <__addsf3+0x1e>
 8fc:	93 95       	inc	r25
 8fe:	88 0f       	add	r24, r24
 900:	08 f0       	brcs	.+2      	; 0x904 <__stack+0x5>
 902:	99 27       	eor	r25, r25
 904:	ee 0f       	add	r30, r30
 906:	97 95       	ror	r25
 908:	87 95       	ror	r24
 90a:	08 95       	ret

0000090c <__divsf3>:
 90c:	0c d0       	rcall	.+24     	; 0x926 <__divsf3x>
 90e:	e6 c0       	rjmp	.+460    	; 0xadc <__fp_round>
 910:	de d0       	rcall	.+444    	; 0xace <__fp_pscB>
 912:	40 f0       	brcs	.+16     	; 0x924 <__divsf3+0x18>
 914:	d5 d0       	rcall	.+426    	; 0xac0 <__fp_pscA>
 916:	30 f0       	brcs	.+12     	; 0x924 <__divsf3+0x18>
 918:	21 f4       	brne	.+8      	; 0x922 <__divsf3+0x16>
 91a:	5f 3f       	cpi	r21, 0xFF	; 255
 91c:	19 f0       	breq	.+6      	; 0x924 <__divsf3+0x18>
 91e:	c7 c0       	rjmp	.+398    	; 0xaae <__fp_inf>
 920:	51 11       	cpse	r21, r1
 922:	10 c1       	rjmp	.+544    	; 0xb44 <__fp_szero>
 924:	ca c0       	rjmp	.+404    	; 0xaba <__fp_nan>

00000926 <__divsf3x>:
 926:	eb d0       	rcall	.+470    	; 0xafe <__fp_split3>
 928:	98 f3       	brcs	.-26     	; 0x910 <__divsf3+0x4>

0000092a <__divsf3_pse>:
 92a:	99 23       	and	r25, r25
 92c:	c9 f3       	breq	.-14     	; 0x920 <__divsf3+0x14>
 92e:	55 23       	and	r21, r21
 930:	b1 f3       	breq	.-20     	; 0x91e <__divsf3+0x12>
 932:	95 1b       	sub	r25, r21
 934:	55 0b       	sbc	r21, r21
 936:	bb 27       	eor	r27, r27
 938:	aa 27       	eor	r26, r26
 93a:	62 17       	cp	r22, r18
 93c:	73 07       	cpc	r23, r19
 93e:	84 07       	cpc	r24, r20
 940:	38 f0       	brcs	.+14     	; 0x950 <__divsf3_pse+0x26>
 942:	9f 5f       	subi	r25, 0xFF	; 255
 944:	5f 4f       	sbci	r21, 0xFF	; 255
 946:	22 0f       	add	r18, r18
 948:	33 1f       	adc	r19, r19
 94a:	44 1f       	adc	r20, r20
 94c:	aa 1f       	adc	r26, r26
 94e:	a9 f3       	breq	.-22     	; 0x93a <__divsf3_pse+0x10>
 950:	33 d0       	rcall	.+102    	; 0x9b8 <__divsf3_pse+0x8e>
 952:	0e 2e       	mov	r0, r30
 954:	3a f0       	brmi	.+14     	; 0x964 <__divsf3_pse+0x3a>
 956:	e0 e8       	ldi	r30, 0x80	; 128
 958:	30 d0       	rcall	.+96     	; 0x9ba <__divsf3_pse+0x90>
 95a:	91 50       	subi	r25, 0x01	; 1
 95c:	50 40       	sbci	r21, 0x00	; 0
 95e:	e6 95       	lsr	r30
 960:	00 1c       	adc	r0, r0
 962:	ca f7       	brpl	.-14     	; 0x956 <__divsf3_pse+0x2c>
 964:	29 d0       	rcall	.+82     	; 0x9b8 <__divsf3_pse+0x8e>
 966:	fe 2f       	mov	r31, r30
 968:	27 d0       	rcall	.+78     	; 0x9b8 <__divsf3_pse+0x8e>
 96a:	66 0f       	add	r22, r22
 96c:	77 1f       	adc	r23, r23
 96e:	88 1f       	adc	r24, r24
 970:	bb 1f       	adc	r27, r27
 972:	26 17       	cp	r18, r22
 974:	37 07       	cpc	r19, r23
 976:	48 07       	cpc	r20, r24
 978:	ab 07       	cpc	r26, r27
 97a:	b0 e8       	ldi	r27, 0x80	; 128
 97c:	09 f0       	breq	.+2      	; 0x980 <__divsf3_pse+0x56>
 97e:	bb 0b       	sbc	r27, r27
 980:	80 2d       	mov	r24, r0
 982:	bf 01       	movw	r22, r30
 984:	ff 27       	eor	r31, r31
 986:	93 58       	subi	r25, 0x83	; 131
 988:	5f 4f       	sbci	r21, 0xFF	; 255
 98a:	2a f0       	brmi	.+10     	; 0x996 <__divsf3_pse+0x6c>
 98c:	9e 3f       	cpi	r25, 0xFE	; 254
 98e:	51 05       	cpc	r21, r1
 990:	68 f0       	brcs	.+26     	; 0x9ac <__divsf3_pse+0x82>
 992:	8d c0       	rjmp	.+282    	; 0xaae <__fp_inf>
 994:	d7 c0       	rjmp	.+430    	; 0xb44 <__fp_szero>
 996:	5f 3f       	cpi	r21, 0xFF	; 255
 998:	ec f3       	brlt	.-6      	; 0x994 <__divsf3_pse+0x6a>
 99a:	98 3e       	cpi	r25, 0xE8	; 232
 99c:	dc f3       	brlt	.-10     	; 0x994 <__divsf3_pse+0x6a>
 99e:	86 95       	lsr	r24
 9a0:	77 95       	ror	r23
 9a2:	67 95       	ror	r22
 9a4:	b7 95       	ror	r27
 9a6:	f7 95       	ror	r31
 9a8:	9f 5f       	subi	r25, 0xFF	; 255
 9aa:	c9 f7       	brne	.-14     	; 0x99e <__divsf3_pse+0x74>
 9ac:	88 0f       	add	r24, r24
 9ae:	91 1d       	adc	r25, r1
 9b0:	96 95       	lsr	r25
 9b2:	87 95       	ror	r24
 9b4:	97 f9       	bld	r25, 7
 9b6:	08 95       	ret
 9b8:	e1 e0       	ldi	r30, 0x01	; 1
 9ba:	66 0f       	add	r22, r22
 9bc:	77 1f       	adc	r23, r23
 9be:	88 1f       	adc	r24, r24
 9c0:	bb 1f       	adc	r27, r27
 9c2:	62 17       	cp	r22, r18
 9c4:	73 07       	cpc	r23, r19
 9c6:	84 07       	cpc	r24, r20
 9c8:	ba 07       	cpc	r27, r26
 9ca:	20 f0       	brcs	.+8      	; 0x9d4 <__divsf3_pse+0xaa>
 9cc:	62 1b       	sub	r22, r18
 9ce:	73 0b       	sbc	r23, r19
 9d0:	84 0b       	sbc	r24, r20
 9d2:	ba 0b       	sbc	r27, r26
 9d4:	ee 1f       	adc	r30, r30
 9d6:	88 f7       	brcc	.-30     	; 0x9ba <__divsf3_pse+0x90>
 9d8:	e0 95       	com	r30
 9da:	08 95       	ret

000009dc <__fixunssfsi>:
 9dc:	98 d0       	rcall	.+304    	; 0xb0e <__fp_splitA>
 9de:	88 f0       	brcs	.+34     	; 0xa02 <__fixunssfsi+0x26>
 9e0:	9f 57       	subi	r25, 0x7F	; 127
 9e2:	90 f0       	brcs	.+36     	; 0xa08 <__fixunssfsi+0x2c>
 9e4:	b9 2f       	mov	r27, r25
 9e6:	99 27       	eor	r25, r25
 9e8:	b7 51       	subi	r27, 0x17	; 23
 9ea:	a0 f0       	brcs	.+40     	; 0xa14 <__fixunssfsi+0x38>
 9ec:	d1 f0       	breq	.+52     	; 0xa22 <__fixunssfsi+0x46>
 9ee:	66 0f       	add	r22, r22
 9f0:	77 1f       	adc	r23, r23
 9f2:	88 1f       	adc	r24, r24
 9f4:	99 1f       	adc	r25, r25
 9f6:	1a f0       	brmi	.+6      	; 0x9fe <__fixunssfsi+0x22>
 9f8:	ba 95       	dec	r27
 9fa:	c9 f7       	brne	.-14     	; 0x9ee <__fixunssfsi+0x12>
 9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__fixunssfsi+0x46>
 9fe:	b1 30       	cpi	r27, 0x01	; 1
 a00:	81 f0       	breq	.+32     	; 0xa22 <__fixunssfsi+0x46>
 a02:	9f d0       	rcall	.+318    	; 0xb42 <__fp_zero>
 a04:	b1 e0       	ldi	r27, 0x01	; 1
 a06:	08 95       	ret
 a08:	9c c0       	rjmp	.+312    	; 0xb42 <__fp_zero>
 a0a:	67 2f       	mov	r22, r23
 a0c:	78 2f       	mov	r23, r24
 a0e:	88 27       	eor	r24, r24
 a10:	b8 5f       	subi	r27, 0xF8	; 248
 a12:	39 f0       	breq	.+14     	; 0xa22 <__fixunssfsi+0x46>
 a14:	b9 3f       	cpi	r27, 0xF9	; 249
 a16:	cc f3       	brlt	.-14     	; 0xa0a <__fixunssfsi+0x2e>
 a18:	86 95       	lsr	r24
 a1a:	77 95       	ror	r23
 a1c:	67 95       	ror	r22
 a1e:	b3 95       	inc	r27
 a20:	d9 f7       	brne	.-10     	; 0xa18 <__fixunssfsi+0x3c>
 a22:	3e f4       	brtc	.+14     	; 0xa32 <__fixunssfsi+0x56>
 a24:	90 95       	com	r25
 a26:	80 95       	com	r24
 a28:	70 95       	com	r23
 a2a:	61 95       	neg	r22
 a2c:	7f 4f       	sbci	r23, 0xFF	; 255
 a2e:	8f 4f       	sbci	r24, 0xFF	; 255
 a30:	9f 4f       	sbci	r25, 0xFF	; 255
 a32:	08 95       	ret

00000a34 <__floatunsisf>:
 a34:	e8 94       	clt
 a36:	09 c0       	rjmp	.+18     	; 0xa4a <__floatsisf+0x12>

00000a38 <__floatsisf>:
 a38:	97 fb       	bst	r25, 7
 a3a:	3e f4       	brtc	.+14     	; 0xa4a <__floatsisf+0x12>
 a3c:	90 95       	com	r25
 a3e:	80 95       	com	r24
 a40:	70 95       	com	r23
 a42:	61 95       	neg	r22
 a44:	7f 4f       	sbci	r23, 0xFF	; 255
 a46:	8f 4f       	sbci	r24, 0xFF	; 255
 a48:	9f 4f       	sbci	r25, 0xFF	; 255
 a4a:	99 23       	and	r25, r25
 a4c:	a9 f0       	breq	.+42     	; 0xa78 <__floatsisf+0x40>
 a4e:	f9 2f       	mov	r31, r25
 a50:	96 e9       	ldi	r25, 0x96	; 150
 a52:	bb 27       	eor	r27, r27
 a54:	93 95       	inc	r25
 a56:	f6 95       	lsr	r31
 a58:	87 95       	ror	r24
 a5a:	77 95       	ror	r23
 a5c:	67 95       	ror	r22
 a5e:	b7 95       	ror	r27
 a60:	f1 11       	cpse	r31, r1
 a62:	f8 cf       	rjmp	.-16     	; 0xa54 <__floatsisf+0x1c>
 a64:	fa f4       	brpl	.+62     	; 0xaa4 <__floatsisf+0x6c>
 a66:	bb 0f       	add	r27, r27
 a68:	11 f4       	brne	.+4      	; 0xa6e <__floatsisf+0x36>
 a6a:	60 ff       	sbrs	r22, 0
 a6c:	1b c0       	rjmp	.+54     	; 0xaa4 <__floatsisf+0x6c>
 a6e:	6f 5f       	subi	r22, 0xFF	; 255
 a70:	7f 4f       	sbci	r23, 0xFF	; 255
 a72:	8f 4f       	sbci	r24, 0xFF	; 255
 a74:	9f 4f       	sbci	r25, 0xFF	; 255
 a76:	16 c0       	rjmp	.+44     	; 0xaa4 <__floatsisf+0x6c>
 a78:	88 23       	and	r24, r24
 a7a:	11 f0       	breq	.+4      	; 0xa80 <__floatsisf+0x48>
 a7c:	96 e9       	ldi	r25, 0x96	; 150
 a7e:	11 c0       	rjmp	.+34     	; 0xaa2 <__floatsisf+0x6a>
 a80:	77 23       	and	r23, r23
 a82:	21 f0       	breq	.+8      	; 0xa8c <__floatsisf+0x54>
 a84:	9e e8       	ldi	r25, 0x8E	; 142
 a86:	87 2f       	mov	r24, r23
 a88:	76 2f       	mov	r23, r22
 a8a:	05 c0       	rjmp	.+10     	; 0xa96 <__floatsisf+0x5e>
 a8c:	66 23       	and	r22, r22
 a8e:	71 f0       	breq	.+28     	; 0xaac <__floatsisf+0x74>
 a90:	96 e8       	ldi	r25, 0x86	; 134
 a92:	86 2f       	mov	r24, r22
 a94:	70 e0       	ldi	r23, 0x00	; 0
 a96:	60 e0       	ldi	r22, 0x00	; 0
 a98:	2a f0       	brmi	.+10     	; 0xaa4 <__floatsisf+0x6c>
 a9a:	9a 95       	dec	r25
 a9c:	66 0f       	add	r22, r22
 a9e:	77 1f       	adc	r23, r23
 aa0:	88 1f       	adc	r24, r24
 aa2:	da f7       	brpl	.-10     	; 0xa9a <__floatsisf+0x62>
 aa4:	88 0f       	add	r24, r24
 aa6:	96 95       	lsr	r25
 aa8:	87 95       	ror	r24
 aaa:	97 f9       	bld	r25, 7
 aac:	08 95       	ret

00000aae <__fp_inf>:
 aae:	97 f9       	bld	r25, 7
 ab0:	9f 67       	ori	r25, 0x7F	; 127
 ab2:	80 e8       	ldi	r24, 0x80	; 128
 ab4:	70 e0       	ldi	r23, 0x00	; 0
 ab6:	60 e0       	ldi	r22, 0x00	; 0
 ab8:	08 95       	ret

00000aba <__fp_nan>:
 aba:	9f ef       	ldi	r25, 0xFF	; 255
 abc:	80 ec       	ldi	r24, 0xC0	; 192
 abe:	08 95       	ret

00000ac0 <__fp_pscA>:
 ac0:	00 24       	eor	r0, r0
 ac2:	0a 94       	dec	r0
 ac4:	16 16       	cp	r1, r22
 ac6:	17 06       	cpc	r1, r23
 ac8:	18 06       	cpc	r1, r24
 aca:	09 06       	cpc	r0, r25
 acc:	08 95       	ret

00000ace <__fp_pscB>:
 ace:	00 24       	eor	r0, r0
 ad0:	0a 94       	dec	r0
 ad2:	12 16       	cp	r1, r18
 ad4:	13 06       	cpc	r1, r19
 ad6:	14 06       	cpc	r1, r20
 ad8:	05 06       	cpc	r0, r21
 ada:	08 95       	ret

00000adc <__fp_round>:
 adc:	09 2e       	mov	r0, r25
 ade:	03 94       	inc	r0
 ae0:	00 0c       	add	r0, r0
 ae2:	11 f4       	brne	.+4      	; 0xae8 <__fp_round+0xc>
 ae4:	88 23       	and	r24, r24
 ae6:	52 f0       	brmi	.+20     	; 0xafc <__fp_round+0x20>
 ae8:	bb 0f       	add	r27, r27
 aea:	40 f4       	brcc	.+16     	; 0xafc <__fp_round+0x20>
 aec:	bf 2b       	or	r27, r31
 aee:	11 f4       	brne	.+4      	; 0xaf4 <__fp_round+0x18>
 af0:	60 ff       	sbrs	r22, 0
 af2:	04 c0       	rjmp	.+8      	; 0xafc <__fp_round+0x20>
 af4:	6f 5f       	subi	r22, 0xFF	; 255
 af6:	7f 4f       	sbci	r23, 0xFF	; 255
 af8:	8f 4f       	sbci	r24, 0xFF	; 255
 afa:	9f 4f       	sbci	r25, 0xFF	; 255
 afc:	08 95       	ret

00000afe <__fp_split3>:
 afe:	57 fd       	sbrc	r21, 7
 b00:	90 58       	subi	r25, 0x80	; 128
 b02:	44 0f       	add	r20, r20
 b04:	55 1f       	adc	r21, r21
 b06:	59 f0       	breq	.+22     	; 0xb1e <__fp_splitA+0x10>
 b08:	5f 3f       	cpi	r21, 0xFF	; 255
 b0a:	71 f0       	breq	.+28     	; 0xb28 <__fp_splitA+0x1a>
 b0c:	47 95       	ror	r20

00000b0e <__fp_splitA>:
 b0e:	88 0f       	add	r24, r24
 b10:	97 fb       	bst	r25, 7
 b12:	99 1f       	adc	r25, r25
 b14:	61 f0       	breq	.+24     	; 0xb2e <__fp_splitA+0x20>
 b16:	9f 3f       	cpi	r25, 0xFF	; 255
 b18:	79 f0       	breq	.+30     	; 0xb38 <__fp_splitA+0x2a>
 b1a:	87 95       	ror	r24
 b1c:	08 95       	ret
 b1e:	12 16       	cp	r1, r18
 b20:	13 06       	cpc	r1, r19
 b22:	14 06       	cpc	r1, r20
 b24:	55 1f       	adc	r21, r21
 b26:	f2 cf       	rjmp	.-28     	; 0xb0c <__fp_split3+0xe>
 b28:	46 95       	lsr	r20
 b2a:	f1 df       	rcall	.-30     	; 0xb0e <__fp_splitA>
 b2c:	08 c0       	rjmp	.+16     	; 0xb3e <__fp_splitA+0x30>
 b2e:	16 16       	cp	r1, r22
 b30:	17 06       	cpc	r1, r23
 b32:	18 06       	cpc	r1, r24
 b34:	99 1f       	adc	r25, r25
 b36:	f1 cf       	rjmp	.-30     	; 0xb1a <__fp_splitA+0xc>
 b38:	86 95       	lsr	r24
 b3a:	71 05       	cpc	r23, r1
 b3c:	61 05       	cpc	r22, r1
 b3e:	08 94       	sec
 b40:	08 95       	ret

00000b42 <__fp_zero>:
 b42:	e8 94       	clt

00000b44 <__fp_szero>:
 b44:	bb 27       	eor	r27, r27
 b46:	66 27       	eor	r22, r22
 b48:	77 27       	eor	r23, r23
 b4a:	cb 01       	movw	r24, r22
 b4c:	97 f9       	bld	r25, 7
 b4e:	08 95       	ret

00000b50 <__mulsf3>:
 b50:	0b d0       	rcall	.+22     	; 0xb68 <__mulsf3x>
 b52:	c4 cf       	rjmp	.-120    	; 0xadc <__fp_round>
 b54:	b5 df       	rcall	.-150    	; 0xac0 <__fp_pscA>
 b56:	28 f0       	brcs	.+10     	; 0xb62 <__mulsf3+0x12>
 b58:	ba df       	rcall	.-140    	; 0xace <__fp_pscB>
 b5a:	18 f0       	brcs	.+6      	; 0xb62 <__mulsf3+0x12>
 b5c:	95 23       	and	r25, r21
 b5e:	09 f0       	breq	.+2      	; 0xb62 <__mulsf3+0x12>
 b60:	a6 cf       	rjmp	.-180    	; 0xaae <__fp_inf>
 b62:	ab cf       	rjmp	.-170    	; 0xaba <__fp_nan>
 b64:	11 24       	eor	r1, r1
 b66:	ee cf       	rjmp	.-36     	; 0xb44 <__fp_szero>

00000b68 <__mulsf3x>:
 b68:	ca df       	rcall	.-108    	; 0xafe <__fp_split3>
 b6a:	a0 f3       	brcs	.-24     	; 0xb54 <__mulsf3+0x4>

00000b6c <__mulsf3_pse>:
 b6c:	95 9f       	mul	r25, r21
 b6e:	d1 f3       	breq	.-12     	; 0xb64 <__mulsf3+0x14>
 b70:	95 0f       	add	r25, r21
 b72:	50 e0       	ldi	r21, 0x00	; 0
 b74:	55 1f       	adc	r21, r21
 b76:	62 9f       	mul	r22, r18
 b78:	f0 01       	movw	r30, r0
 b7a:	72 9f       	mul	r23, r18
 b7c:	bb 27       	eor	r27, r27
 b7e:	f0 0d       	add	r31, r0
 b80:	b1 1d       	adc	r27, r1
 b82:	63 9f       	mul	r22, r19
 b84:	aa 27       	eor	r26, r26
 b86:	f0 0d       	add	r31, r0
 b88:	b1 1d       	adc	r27, r1
 b8a:	aa 1f       	adc	r26, r26
 b8c:	64 9f       	mul	r22, r20
 b8e:	66 27       	eor	r22, r22
 b90:	b0 0d       	add	r27, r0
 b92:	a1 1d       	adc	r26, r1
 b94:	66 1f       	adc	r22, r22
 b96:	82 9f       	mul	r24, r18
 b98:	22 27       	eor	r18, r18
 b9a:	b0 0d       	add	r27, r0
 b9c:	a1 1d       	adc	r26, r1
 b9e:	62 1f       	adc	r22, r18
 ba0:	73 9f       	mul	r23, r19
 ba2:	b0 0d       	add	r27, r0
 ba4:	a1 1d       	adc	r26, r1
 ba6:	62 1f       	adc	r22, r18
 ba8:	83 9f       	mul	r24, r19
 baa:	a0 0d       	add	r26, r0
 bac:	61 1d       	adc	r22, r1
 bae:	22 1f       	adc	r18, r18
 bb0:	74 9f       	mul	r23, r20
 bb2:	33 27       	eor	r19, r19
 bb4:	a0 0d       	add	r26, r0
 bb6:	61 1d       	adc	r22, r1
 bb8:	23 1f       	adc	r18, r19
 bba:	84 9f       	mul	r24, r20
 bbc:	60 0d       	add	r22, r0
 bbe:	21 1d       	adc	r18, r1
 bc0:	82 2f       	mov	r24, r18
 bc2:	76 2f       	mov	r23, r22
 bc4:	6a 2f       	mov	r22, r26
 bc6:	11 24       	eor	r1, r1
 bc8:	9f 57       	subi	r25, 0x7F	; 127
 bca:	50 40       	sbci	r21, 0x00	; 0
 bcc:	8a f0       	brmi	.+34     	; 0xbf0 <__mulsf3_pse+0x84>
 bce:	e1 f0       	breq	.+56     	; 0xc08 <__mulsf3_pse+0x9c>
 bd0:	88 23       	and	r24, r24
 bd2:	4a f0       	brmi	.+18     	; 0xbe6 <__mulsf3_pse+0x7a>
 bd4:	ee 0f       	add	r30, r30
 bd6:	ff 1f       	adc	r31, r31
 bd8:	bb 1f       	adc	r27, r27
 bda:	66 1f       	adc	r22, r22
 bdc:	77 1f       	adc	r23, r23
 bde:	88 1f       	adc	r24, r24
 be0:	91 50       	subi	r25, 0x01	; 1
 be2:	50 40       	sbci	r21, 0x00	; 0
 be4:	a9 f7       	brne	.-22     	; 0xbd0 <__mulsf3_pse+0x64>
 be6:	9e 3f       	cpi	r25, 0xFE	; 254
 be8:	51 05       	cpc	r21, r1
 bea:	70 f0       	brcs	.+28     	; 0xc08 <__mulsf3_pse+0x9c>
 bec:	60 cf       	rjmp	.-320    	; 0xaae <__fp_inf>
 bee:	aa cf       	rjmp	.-172    	; 0xb44 <__fp_szero>
 bf0:	5f 3f       	cpi	r21, 0xFF	; 255
 bf2:	ec f3       	brlt	.-6      	; 0xbee <__mulsf3_pse+0x82>
 bf4:	98 3e       	cpi	r25, 0xE8	; 232
 bf6:	dc f3       	brlt	.-10     	; 0xbee <__mulsf3_pse+0x82>
 bf8:	86 95       	lsr	r24
 bfa:	77 95       	ror	r23
 bfc:	67 95       	ror	r22
 bfe:	b7 95       	ror	r27
 c00:	f7 95       	ror	r31
 c02:	e7 95       	ror	r30
 c04:	9f 5f       	subi	r25, 0xFF	; 255
 c06:	c1 f7       	brne	.-16     	; 0xbf8 <__mulsf3_pse+0x8c>
 c08:	fe 2b       	or	r31, r30
 c0a:	88 0f       	add	r24, r24
 c0c:	91 1d       	adc	r25, r1
 c0e:	96 95       	lsr	r25
 c10:	87 95       	ror	r24
 c12:	97 f9       	bld	r25, 7
 c14:	08 95       	ret

00000c16 <__udivmodsi4>:
 c16:	a1 e2       	ldi	r26, 0x21	; 33
 c18:	1a 2e       	mov	r1, r26
 c1a:	aa 1b       	sub	r26, r26
 c1c:	bb 1b       	sub	r27, r27
 c1e:	fd 01       	movw	r30, r26
 c20:	0d c0       	rjmp	.+26     	; 0xc3c <__udivmodsi4_ep>

00000c22 <__udivmodsi4_loop>:
 c22:	aa 1f       	adc	r26, r26
 c24:	bb 1f       	adc	r27, r27
 c26:	ee 1f       	adc	r30, r30
 c28:	ff 1f       	adc	r31, r31
 c2a:	a2 17       	cp	r26, r18
 c2c:	b3 07       	cpc	r27, r19
 c2e:	e4 07       	cpc	r30, r20
 c30:	f5 07       	cpc	r31, r21
 c32:	20 f0       	brcs	.+8      	; 0xc3c <__udivmodsi4_ep>
 c34:	a2 1b       	sub	r26, r18
 c36:	b3 0b       	sbc	r27, r19
 c38:	e4 0b       	sbc	r30, r20
 c3a:	f5 0b       	sbc	r31, r21

00000c3c <__udivmodsi4_ep>:
 c3c:	66 1f       	adc	r22, r22
 c3e:	77 1f       	adc	r23, r23
 c40:	88 1f       	adc	r24, r24
 c42:	99 1f       	adc	r25, r25
 c44:	1a 94       	dec	r1
 c46:	69 f7       	brne	.-38     	; 0xc22 <__udivmodsi4_loop>
 c48:	60 95       	com	r22
 c4a:	70 95       	com	r23
 c4c:	80 95       	com	r24
 c4e:	90 95       	com	r25
 c50:	9b 01       	movw	r18, r22
 c52:	ac 01       	movw	r20, r24
 c54:	bd 01       	movw	r22, r26
 c56:	cf 01       	movw	r24, r30
 c58:	08 95       	ret

00000c5a <_exit>:
 c5a:	f8 94       	cli

00000c5c <__stop_program>:
 c5c:	ff cf       	rjmp	.-2      	; 0xc5c <__stop_program>
