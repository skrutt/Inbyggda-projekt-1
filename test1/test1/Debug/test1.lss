
test1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000296  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000296  0000032a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  00800064  00800064  0000032e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000032e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  0000035e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000078e  00000000  00000000  00000406  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000461  00000000  00000000  00000b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c8  00000000  00000000  00000ff5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001ac  00000000  00000000  000013c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036a  00000000  00000000  0000156c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000057e  00000000  00000000  000018d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00001e54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	a0 c0       	rjmp	.+320    	; 0x150 <__vector_7>
  10:	66 c0       	rjmp	.+204    	; 0xde <__vector_8>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>
  22:	1a c0       	rjmp	.+52     	; 0x58 <__bad_interrupt>
  24:	19 c0       	rjmp	.+50     	; 0x58 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e6 e9       	ldi	r30, 0x96	; 150
  36:	f2 e0       	ldi	r31, 0x02	; 2
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_L__+0x1>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a4 36       	cpi	r26, 0x64	; 100
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
  44:	20 e0       	ldi	r18, 0x00	; 0
  46:	a4 e6       	ldi	r26, 0x64	; 100
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	aa 37       	cpi	r26, 0x7A	; 122
  50:	b2 07       	cpc	r27, r18
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	16 d0       	rcall	.+44     	; 0x82 <main>
  56:	1d c1       	rjmp	.+570    	; 0x292 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <InitUART>:

/* initialize UART */
//This is placed here to make use of external define
void InitUART( unsigned int baud )
{
	int baudfactor = (F_CPU/16/baud-1);
  5a:	9c 01       	movw	r18, r24
  5c:	40 e0       	ldi	r20, 0x00	; 0
  5e:	50 e0       	ldi	r21, 0x00	; 0
  60:	60 e2       	ldi	r22, 0x20	; 32
  62:	71 ea       	ldi	r23, 0xA1	; 161
  64:	87 e0       	ldi	r24, 0x07	; 7
  66:	90 e0       	ldi	r25, 0x00	; 0
  68:	f2 d0       	rcall	.+484    	; 0x24e <__udivmodsi4>
  6a:	21 50       	subi	r18, 0x01	; 1
  6c:	31 09       	sbc	r19, r1
	UBRRH = (unsigned char)(baudfactor>>8);	//set the baud rate
  6e:	32 b9       	out	0x02, r19	; 2
	UBRRL = (unsigned char)baudfactor;
  70:	29 b9       	out	0x09, r18	; 9
	UCSRB = _BV(RXEN) | _BV(TXEN);			//enable UART receiver and transmitter
  72:	88 e1       	ldi	r24, 0x18	; 24
  74:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data */
	UCSRC = (3<<UCSZ0);
  76:	86 e0       	ldi	r24, 0x06	; 6
  78:	83 b9       	out	0x03, r24	; 3
	//Activate interrupts
	UCSRB |= (1 << UDRIE) + (1 << RXCIE);
  7a:	8a b1       	in	r24, 0x0a	; 10
  7c:	80 6a       	ori	r24, 0xA0	; 160
  7e:	8a b9       	out	0x0a, r24	; 10
  80:	08 95       	ret

00000082 <main>:
#include "util/delay.h"


int main()
{
	DDRD = 2;				// output
  82:	82 e0       	ldi	r24, 0x02	; 2
  84:	81 bb       	out	0x11, r24	; 17
	DDRB = 0xff;					// input
  86:	8f ef       	ldi	r24, 0xFF	; 255
  88:	87 bb       	out	0x17, r24	; 23
	SETBIT(PORTB,PB0);			// enable pull-up
  8a:	c0 9a       	sbi	0x18, 0	; 24
	SETBIT(PORTB,PB1);			// enable pull-up
  8c:	c1 9a       	sbi	0x18, 1	; 24
	sei();
  8e:	78 94       	sei
	InitUART(9600);				
  90:	80 e8       	ldi	r24, 0x80	; 128
  92:	95 e2       	ldi	r25, 0x25	; 37
  94:	e2 df       	rcall	.-60     	; 0x5a <InitUART>
		}else if (ch=='d')
		{
			PORTB = 1<<5;
		}else if (ch=='f')
		{
			PORTB = 1<<4;
  96:	68 94       	set
  98:	ff 24       	eor	r15, r15
  9a:	f4 f8       	bld	r15, 4
		}else if (ch=='s')
		{
			PORTB = 1<<6;
		}else if (ch=='d')
		{
			PORTB = 1<<5;
  9c:	00 e2       	ldi	r16, 0x20	; 32
		if (ch=='a')
		{
			PORTB = 1<<7;
		}else if (ch=='s')
		{
			PORTB = 1<<6;
  9e:	10 e4       	ldi	r17, 0x40	; 64
	{
		ch = ReceiveByteBlocking();
		send_c(ch);
		if (ch=='a')
		{
			PORTB = 1<<7;
  a0:	d0 e8       	ldi	r29, 0x80	; 128
	InitUART(9600);				
	char	ch = 0;

	while(1)
	{
		ch = ReceiveByteBlocking();
  a2:	ad d0       	rcall	.+346    	; 0x1fe <ReceiveByteBlocking>
  a4:	c8 2f       	mov	r28, r24
		send_c(ch);
  a6:	99 27       	eor	r25, r25
  a8:	bb d0       	rcall	.+374    	; 0x220 <send_c>
		if (ch=='a')
  aa:	c1 36       	cpi	r28, 0x61	; 97
  ac:	11 f4       	brne	.+4      	; 0xb2 <main+0x30>
		{
			PORTB = 1<<7;
  ae:	d8 bb       	out	0x18, r29	; 24
  b0:	0f c0       	rjmp	.+30     	; 0xd0 <main+0x4e>
		}else if (ch=='s')
  b2:	c3 37       	cpi	r28, 0x73	; 115
  b4:	11 f4       	brne	.+4      	; 0xba <main+0x38>
		{
			PORTB = 1<<6;
  b6:	18 bb       	out	0x18, r17	; 24
  b8:	0b c0       	rjmp	.+22     	; 0xd0 <main+0x4e>
		}else if (ch=='d')
  ba:	c4 36       	cpi	r28, 0x64	; 100
  bc:	11 f4       	brne	.+4      	; 0xc2 <main+0x40>
		{
			PORTB = 1<<5;
  be:	08 bb       	out	0x18, r16	; 24
  c0:	07 c0       	rjmp	.+14     	; 0xd0 <main+0x4e>
		}else if (ch=='f')
  c2:	c6 36       	cpi	r28, 0x66	; 102
  c4:	11 f4       	brne	.+4      	; 0xca <main+0x48>
		{
			PORTB = 1<<4;
  c6:	f8 ba       	out	0x18, r15	; 24
  c8:	03 c0       	rjmp	.+6      	; 0xd0 <main+0x4e>
		}else if (ch==' ')
  ca:	c0 32       	cpi	r28, 0x20	; 32
  cc:	09 f4       	brne	.+2      	; 0xd0 <main+0x4e>
		{
			PORTB = 0;
  ce:	18 ba       	out	0x18, r1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	8f e9       	ldi	r24, 0x9F	; 159
  d2:	9f e0       	ldi	r25, 0x0F	; 15
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <main+0x52>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x58>
  da:	00 00       	nop
  dc:	e2 cf       	rjmp	.-60     	; 0xa2 <main+0x20>

000000de <__vector_8>:
#define release_lock()	sei()

//Usart transmit interrupt
//This interrupt is always called when UDR is empty
ISR(USART_UDRE_vect)
{
  de:	1f 92       	push	r1
  e0:	0f 92       	push	r0
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	0f 92       	push	r0
  e6:	11 24       	eor	r1, r1
  e8:	2f 93       	push	r18
  ea:	8f 93       	push	r24
  ec:	9f 93       	push	r25
  ee:	ef 93       	push	r30
  f0:	ff 93       	push	r31
	// check for empty transmit buffer	and if we have data
	if ( 0 != outgoing_data_counter)
  f2:	80 91 65 00 	lds	r24, 0x0065
  f6:	88 23       	and	r24, r24
  f8:	01 f1       	breq	.+64     	; 0x13a <__stack+0x5b>
	{
		outgoing_data_counter--;
  fa:	80 91 65 00 	lds	r24, 0x0065
  fe:	81 50       	subi	r24, 0x01	; 1
 100:	80 93 65 00 	sts	0x0065, r24
		UDR = *outgoing_data_head; 		// start transmition
 104:	e0 91 62 00 	lds	r30, 0x0062
 108:	f0 91 63 00 	lds	r31, 0x0063
 10c:	80 81       	ld	r24, Z
 10e:	8c b9       	out	0x0c, r24	; 12
		outgoing_data_head++;
 110:	80 91 62 00 	lds	r24, 0x0062
 114:	90 91 63 00 	lds	r25, 0x0063
 118:	01 96       	adiw	r24, 0x01	; 1
		if (outgoing_data_head >= (outgoing_data + USART_TX_BUFFER_SIZE))
 11a:	20 e0       	ldi	r18, 0x00	; 0
 11c:	8a 37       	cpi	r24, 0x7A	; 122
 11e:	92 07       	cpc	r25, r18
 120:	28 f4       	brcc	.+10     	; 0x12c <__stack+0x4d>
	// check for empty transmit buffer	and if we have data
	if ( 0 != outgoing_data_counter)
	{
		outgoing_data_counter--;
		UDR = *outgoing_data_head; 		// start transmition
		outgoing_data_head++;
 122:	90 93 63 00 	sts	0x0063, r25
 126:	80 93 62 00 	sts	0x0062, r24
 12a:	08 c0       	rjmp	.+16     	; 0x13c <__stack+0x5d>
		if (outgoing_data_head >= (outgoing_data + USART_TX_BUFFER_SIZE))
		{
			outgoing_data_head = outgoing_data;	//reset ring buffer
 12c:	80 e7       	ldi	r24, 0x70	; 112
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	90 93 63 00 	sts	0x0063, r25
 134:	80 93 62 00 	sts	0x0062, r24
 138:	01 c0       	rjmp	.+2      	; 0x13c <__stack+0x5d>
		}
	}else{
		//Inactivate interrupt
		UCSRB &= ~(1 << UDRIE);
 13a:	55 98       	cbi	0x0a, 5	; 10
		
	}
}
 13c:	ff 91       	pop	r31
 13e:	ef 91       	pop	r30
 140:	9f 91       	pop	r25
 142:	8f 91       	pop	r24
 144:	2f 91       	pop	r18
 146:	0f 90       	pop	r0
 148:	0f be       	out	0x3f, r0	; 63
 14a:	0f 90       	pop	r0
 14c:	1f 90       	pop	r1
 14e:	18 95       	reti

00000150 <__vector_7>:
//Usart receive interrupt
ISR(USART_RX_vect)
{
 150:	1f 92       	push	r1
 152:	0f 92       	push	r0
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	0f 92       	push	r0
 158:	11 24       	eor	r1, r1
 15a:	2f 93       	push	r18
 15c:	8f 93       	push	r24
 15e:	9f 93       	push	r25
 160:	ef 93       	push	r30
 162:	ff 93       	push	r31
	//place char into buffer
	*incomming_data_head = UDR;	//Read from UDR gets RX byte
 164:	e0 91 60 00 	lds	r30, 0x0060
 168:	f0 91 61 00 	lds	r31, 0x0061
 16c:	8c b1       	in	r24, 0x0c	; 12
 16e:	80 83       	st	Z, r24
	
	//increase head
	incomming_data_head++;
 170:	80 91 60 00 	lds	r24, 0x0060
 174:	90 91 61 00 	lds	r25, 0x0061
 178:	01 96       	adiw	r24, 0x01	; 1
	
	
	//Check for overflow head
	if (incomming_data_head >= (incomming_data + USART_RX_BUFFER_SIZE))
 17a:	20 e0       	ldi	r18, 0x00	; 0
 17c:	80 37       	cpi	r24, 0x70	; 112
 17e:	92 07       	cpc	r25, r18
 180:	28 f4       	brcc	.+10     	; 0x18c <__vector_7+0x3c>
{
	//place char into buffer
	*incomming_data_head = UDR;	//Read from UDR gets RX byte
	
	//increase head
	incomming_data_head++;
 182:	90 93 61 00 	sts	0x0061, r25
 186:	80 93 60 00 	sts	0x0060, r24
 18a:	06 c0       	rjmp	.+12     	; 0x198 <__vector_7+0x48>
	
	//Check for overflow head
	if (incomming_data_head >= (incomming_data + USART_RX_BUFFER_SIZE))
	{
		//End of ring, go around
		incomming_data_head = incomming_data;
 18c:	86 e6       	ldi	r24, 0x66	; 102
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	90 93 61 00 	sts	0x0061, r25
 194:	80 93 60 00 	sts	0x0060, r24
	}
	//Check for overflow counter
	if(incomming_data_counter < USART_RX_BUFFER_SIZE)
 198:	80 91 64 00 	lds	r24, 0x0064
 19c:	8a 30       	cpi	r24, 0x0A	; 10
 19e:	28 f4       	brcc	.+10     	; 0x1aa <__vector_7+0x5a>
	{
		incomming_data_counter++;
 1a0:	80 91 64 00 	lds	r24, 0x0064
 1a4:	8f 5f       	subi	r24, 0xFF	; 255
 1a6:	80 93 64 00 	sts	0x0064, r24
	}
}
 1aa:	ff 91       	pop	r31
 1ac:	ef 91       	pop	r30
 1ae:	9f 91       	pop	r25
 1b0:	8f 91       	pop	r24
 1b2:	2f 91       	pop	r18
 1b4:	0f 90       	pop	r0
 1b6:	0f be       	out	0x3f, r0	; 63
 1b8:	0f 90       	pop	r0
 1ba:	1f 90       	pop	r1
 1bc:	18 95       	reti

000001be <ReceiveByte>:

/* Read and write functions */
char ReceiveByte(char * result)
{
	get_lock();
 1be:	f8 94       	cli
	//If we have data
	if (incomming_data_counter > 0)
 1c0:	20 91 64 00 	lds	r18, 0x0064
 1c4:	22 23       	and	r18, r18
 1c6:	c1 f0       	breq	.+48     	; 0x1f8 <ReceiveByte+0x3a>
	{
		//Assign pointer to data 
		//Read buffer in reverse because we add positive
		volatile char * temp = incomming_data_head - incomming_data_counter;
 1c8:	20 91 64 00 	lds	r18, 0x0064
 1cc:	e0 91 60 00 	lds	r30, 0x0060
 1d0:	f0 91 61 00 	lds	r31, 0x0061
 1d4:	e2 1b       	sub	r30, r18
 1d6:	f1 09       	sbc	r31, r1
		
		//Check pointer for overflow
		if (temp < incomming_data )
 1d8:	20 e0       	ldi	r18, 0x00	; 0
 1da:	e6 36       	cpi	r30, 0x66	; 102
 1dc:	f2 07       	cpc	r31, r18
 1de:	08 f4       	brcc	.+2      	; 0x1e2 <ReceiveByte+0x24>
		{
			temp += USART_RX_BUFFER_SIZE;	//Wrap around
 1e0:	3a 96       	adiw	r30, 0x0a	; 10
		}
		//Decrease counter
		incomming_data_counter--;
 1e2:	20 91 64 00 	lds	r18, 0x0064
 1e6:	21 50       	subi	r18, 0x01	; 1
 1e8:	20 93 64 00 	sts	0x0064, r18

		//return that data
		*result = *temp;
 1ec:	20 81       	ld	r18, Z
 1ee:	fc 01       	movw	r30, r24
 1f0:	20 83       	st	Z, r18
		release_lock();
 1f2:	78 94       	sei
		
		return 1;
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	08 95       	ret
	} 
	else
	{
		//Else fail
		release_lock();
 1f8:	78 94       	sei
		return 0;								// return the data
 1fa:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 1fc:	08 95       	ret

000001fe <ReceiveByteBlocking>:
char ReceiveByteBlocking()
{
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	1f 92       	push	r1
 204:	cd b7       	in	r28, 0x3d	; 61
 206:	dd 27       	eor	r29, r29
	while (incomming_data_counter == 0);	//Busy wait
 208:	80 91 64 00 	lds	r24, 0x0064
 20c:	88 23       	and	r24, r24
 20e:	e1 f3       	breq	.-8      	; 0x208 <ReceiveByteBlocking+0xa>
	char temp;
	ReceiveByte(&temp);
 210:	ce 01       	movw	r24, r28
 212:	01 96       	adiw	r24, 0x01	; 1
 214:	d4 df       	rcall	.-88     	; 0x1be <ReceiveByte>
	return temp;
}
 216:	89 81       	ldd	r24, Y+1	; 0x01
 218:	0f 90       	pop	r0
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	08 95       	ret

00000220 <send_c>:

void send_c(char c)
{
	get_lock();
 220:	f8 94       	cli
	volatile char * temp = (outgoing_data_head + outgoing_data_counter);
 222:	90 91 65 00 	lds	r25, 0x0065
 226:	e0 91 62 00 	lds	r30, 0x0062
 22a:	f0 91 63 00 	lds	r31, 0x0063
 22e:	e9 0f       	add	r30, r25
 230:	f1 1d       	adc	r31, r1
	
	//Check for overflow
	if (temp >= (outgoing_data + USART_TX_BUFFER_SIZE))
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	ea 37       	cpi	r30, 0x7A	; 122
 236:	f9 07       	cpc	r31, r25
 238:	08 f0       	brcs	.+2      	; 0x23c <send_c+0x1c>
	{
		temp -= USART_TX_BUFFER_SIZE;
 23a:	3a 97       	sbiw	r30, 0x0a	; 10
	}

	*temp = c;		//add to queue
 23c:	80 83       	st	Z, r24
	outgoing_data_counter++;
 23e:	80 91 65 00 	lds	r24, 0x0065
 242:	8f 5f       	subi	r24, 0xFF	; 255
 244:	80 93 65 00 	sts	0x0065, r24
	//Activate TX interrupt
	UCSRB |= (1 << UDRIE);
 248:	55 9a       	sbi	0x0a, 5	; 10
	release_lock();
 24a:	78 94       	sei
 24c:	08 95       	ret

0000024e <__udivmodsi4>:
 24e:	a1 e2       	ldi	r26, 0x21	; 33
 250:	1a 2e       	mov	r1, r26
 252:	aa 1b       	sub	r26, r26
 254:	bb 1b       	sub	r27, r27
 256:	fd 01       	movw	r30, r26
 258:	0d c0       	rjmp	.+26     	; 0x274 <__udivmodsi4_ep>

0000025a <__udivmodsi4_loop>:
 25a:	aa 1f       	adc	r26, r26
 25c:	bb 1f       	adc	r27, r27
 25e:	ee 1f       	adc	r30, r30
 260:	ff 1f       	adc	r31, r31
 262:	a2 17       	cp	r26, r18
 264:	b3 07       	cpc	r27, r19
 266:	e4 07       	cpc	r30, r20
 268:	f5 07       	cpc	r31, r21
 26a:	20 f0       	brcs	.+8      	; 0x274 <__udivmodsi4_ep>
 26c:	a2 1b       	sub	r26, r18
 26e:	b3 0b       	sbc	r27, r19
 270:	e4 0b       	sbc	r30, r20
 272:	f5 0b       	sbc	r31, r21

00000274 <__udivmodsi4_ep>:
 274:	66 1f       	adc	r22, r22
 276:	77 1f       	adc	r23, r23
 278:	88 1f       	adc	r24, r24
 27a:	99 1f       	adc	r25, r25
 27c:	1a 94       	dec	r1
 27e:	69 f7       	brne	.-38     	; 0x25a <__udivmodsi4_loop>
 280:	60 95       	com	r22
 282:	70 95       	com	r23
 284:	80 95       	com	r24
 286:	90 95       	com	r25
 288:	9b 01       	movw	r18, r22
 28a:	ac 01       	movw	r20, r24
 28c:	bd 01       	movw	r22, r26
 28e:	cf 01       	movw	r24, r30
 290:	08 95       	ret

00000292 <_exit>:
 292:	f8 94       	cli

00000294 <__stop_program>:
 294:	ff cf       	rjmp	.-2      	; 0x294 <__stop_program>
