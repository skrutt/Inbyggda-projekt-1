
proj1_remote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000982  00000a16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000982  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800112  00800112  00000a28  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a28  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  00000a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cde  00000000  00000000  00000b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066c  00000000  00000000  000017f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000536  00000000  00000000  00001e62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000240  00000000  00000000  00002398  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000450  00000000  00000000  000025d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000799  00000000  00000000  00002a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  000031c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 89 00 	jmp	0x112	; 0x112 <__vector_18>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e8       	ldi	r30, 0x82	; 130
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 32       	cpi	r26, 0x2E	; 46
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 00 02 	call	0x400	; 0x400 <main>
  9e:	0c 94 bf 04 	jmp	0x97e	; 0x97e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_19>:
#define release_lock()	sei()

//Usart transmit interrupt
//This interrupt is always called when UDR is empty
ISR(USART_UDRE_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
  b4:	ef 93       	push	r30
  b6:	ff 93       	push	r31
	// check for empty transmit buffer	and if we have data
	if ( 0 != outgoing_data_counter)
  b8:	80 91 13 01 	lds	r24, 0x0113
  bc:	88 23       	and	r24, r24
  be:	d9 f0       	breq	.+54     	; 0xf6 <__vector_19+0x50>
	{
		outgoing_data_counter--;
  c0:	80 91 13 01 	lds	r24, 0x0113
  c4:	81 50       	subi	r24, 0x01	; 1
  c6:	80 93 13 01 	sts	0x0113, r24
		UDR0 = *outgoing_data_head; 		// start transmition
  ca:	e0 91 02 01 	lds	r30, 0x0102
  ce:	f0 91 03 01 	lds	r31, 0x0103
  d2:	81 91       	ld	r24, Z+
  d4:	80 93 c6 00 	sts	0x00C6, r24
		outgoing_data_head++;
  d8:	f0 93 03 01 	sts	0x0103, r31
  dc:	e0 93 02 01 	sts	0x0102, r30
		if (outgoing_data_head >= (outgoing_data + USART_TX_BUFFER_SIZE))
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	e8 32       	cpi	r30, 0x28	; 40
  e4:	f8 07       	cpc	r31, r24
  e6:	60 f0       	brcs	.+24     	; 0x100 <__vector_19+0x5a>
		{
			outgoing_data_head = outgoing_data;	//reset ring buffer
  e8:	8e e1       	ldi	r24, 0x1E	; 30
  ea:	91 e0       	ldi	r25, 0x01	; 1
  ec:	90 93 03 01 	sts	0x0103, r25
  f0:	80 93 02 01 	sts	0x0102, r24
  f4:	05 c0       	rjmp	.+10     	; 0x100 <__vector_19+0x5a>
		}
	}else{
		//Inactivate interrupt
		UCSR0B &= ~(1 << UDRIE0);
  f6:	e1 ec       	ldi	r30, 0xC1	; 193
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	8f 7d       	andi	r24, 0xDF	; 223
  fe:	80 83       	st	Z, r24
		
	}
}
 100:	ff 91       	pop	r31
 102:	ef 91       	pop	r30
 104:	9f 91       	pop	r25
 106:	8f 91       	pop	r24
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <__vector_18>:
//Usart receive interrupt
ISR(USART_RX_vect)
{
 112:	1f 92       	push	r1
 114:	0f 92       	push	r0
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	0f 92       	push	r0
 11a:	11 24       	eor	r1, r1
 11c:	2f 93       	push	r18
 11e:	8f 93       	push	r24
 120:	9f 93       	push	r25
 122:	ef 93       	push	r30
 124:	ff 93       	push	r31
	//place char into buffer
	*incomming_data_head = UDR0;	//Read from UDR gets RX byte
 126:	e0 91 00 01 	lds	r30, 0x0100
 12a:	f0 91 01 01 	lds	r31, 0x0101
 12e:	80 91 c6 00 	lds	r24, 0x00C6
 132:	80 83       	st	Z, r24
	
	//increase head
	incomming_data_head++;
 134:	80 91 00 01 	lds	r24, 0x0100
 138:	90 91 01 01 	lds	r25, 0x0101
 13c:	01 96       	adiw	r24, 0x01	; 1
 13e:	90 93 01 01 	sts	0x0101, r25
 142:	80 93 00 01 	sts	0x0100, r24
	
	
	//Check for overflow head
	if (incomming_data_head >= (incomming_data + USART_RX_BUFFER_SIZE))
 146:	21 e0       	ldi	r18, 0x01	; 1
 148:	8e 31       	cpi	r24, 0x1E	; 30
 14a:	92 07       	cpc	r25, r18
 14c:	30 f0       	brcs	.+12     	; 0x15a <__vector_18+0x48>
	{
		//End of ring, go around
		incomming_data_head = incomming_data;
 14e:	84 e1       	ldi	r24, 0x14	; 20
 150:	91 e0       	ldi	r25, 0x01	; 1
 152:	90 93 01 01 	sts	0x0101, r25
 156:	80 93 00 01 	sts	0x0100, r24
	}
	//Check for overflow counter
	if(incomming_data_counter < USART_RX_BUFFER_SIZE)
 15a:	80 91 12 01 	lds	r24, 0x0112
 15e:	8a 30       	cpi	r24, 0x0A	; 10
 160:	28 f4       	brcc	.+10     	; 0x16c <__vector_18+0x5a>
	{
		incomming_data_counter++;
 162:	80 91 12 01 	lds	r24, 0x0112
 166:	8f 5f       	subi	r24, 0xFF	; 255
 168:	80 93 12 01 	sts	0x0112, r24
	}
}
 16c:	ff 91       	pop	r31
 16e:	ef 91       	pop	r30
 170:	9f 91       	pop	r25
 172:	8f 91       	pop	r24
 174:	2f 91       	pop	r18
 176:	0f 90       	pop	r0
 178:	0f be       	out	0x3f, r0	; 63
 17a:	0f 90       	pop	r0
 17c:	1f 90       	pop	r1
 17e:	18 95       	reti

00000180 <ReceiveByte>:

/* Read and write functions */
char ReceiveByte(char * result)
{
	get_lock();
 180:	f8 94       	cli
	//If we have data
	if (incomming_data_counter > 0)
 182:	20 91 12 01 	lds	r18, 0x0112
 186:	22 23       	and	r18, r18
 188:	c1 f0       	breq	.+48     	; 0x1ba <ReceiveByte+0x3a>
	{
		//Assign pointer to data 
		//Read buffer in reverse because we add positive
		volatile char * temp = incomming_data_head - incomming_data_counter;
 18a:	20 91 12 01 	lds	r18, 0x0112
 18e:	e0 91 00 01 	lds	r30, 0x0100
 192:	f0 91 01 01 	lds	r31, 0x0101
 196:	e2 1b       	sub	r30, r18
 198:	f1 09       	sbc	r31, r1
		
		//Check pointer for overflow
		if (temp < incomming_data )
 19a:	21 e0       	ldi	r18, 0x01	; 1
 19c:	e4 31       	cpi	r30, 0x14	; 20
 19e:	f2 07       	cpc	r31, r18
 1a0:	08 f4       	brcc	.+2      	; 0x1a4 <ReceiveByte+0x24>
		{
			temp += USART_RX_BUFFER_SIZE;	//Wrap around
 1a2:	3a 96       	adiw	r30, 0x0a	; 10
		}
		//Decrease counter
		incomming_data_counter--;
 1a4:	20 91 12 01 	lds	r18, 0x0112
 1a8:	21 50       	subi	r18, 0x01	; 1
 1aa:	20 93 12 01 	sts	0x0112, r18

		//return that data
		*result = *temp;
 1ae:	20 81       	ld	r18, Z
 1b0:	fc 01       	movw	r30, r24
 1b2:	20 83       	st	Z, r18
		release_lock();
 1b4:	78 94       	sei
		
		return 1;
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	08 95       	ret
	} 
	else
	{
		//Else fail
		release_lock();
 1ba:	78 94       	sei
		return 0;								// return the data
 1bc:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 1be:	08 95       	ret

000001c0 <ReceiveByteBlocking>:
char ReceiveByteBlocking()
{
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	0f 92       	push	r0
 1c6:	cd b7       	in	r28, 0x3d	; 61
 1c8:	de b7       	in	r29, 0x3e	; 62
	while (incomming_data_counter == 0);	//Busy wait
 1ca:	80 91 12 01 	lds	r24, 0x0112
 1ce:	88 23       	and	r24, r24
 1d0:	e1 f3       	breq	.-8      	; 0x1ca <ReceiveByteBlocking+0xa>
	char temp;
	ReceiveByte(&temp);
 1d2:	ce 01       	movw	r24, r28
 1d4:	01 96       	adiw	r24, 0x01	; 1
 1d6:	0e 94 c0 00 	call	0x180	; 0x180 <ReceiveByte>
	return temp;
}
 1da:	89 81       	ldd	r24, Y+1	; 0x01
 1dc:	0f 90       	pop	r0
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <send_c>:

void send_c(char c)
{
	get_lock();
 1e4:	f8 94       	cli
	volatile char * temp = (outgoing_data_head + outgoing_data_counter);
 1e6:	90 91 13 01 	lds	r25, 0x0113
 1ea:	e0 91 02 01 	lds	r30, 0x0102
 1ee:	f0 91 03 01 	lds	r31, 0x0103
 1f2:	e9 0f       	add	r30, r25
 1f4:	f1 1d       	adc	r31, r1
	
	//Check for overflow
	if (temp >= (outgoing_data + USART_TX_BUFFER_SIZE))
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	e8 32       	cpi	r30, 0x28	; 40
 1fa:	f9 07       	cpc	r31, r25
 1fc:	08 f0       	brcs	.+2      	; 0x200 <send_c+0x1c>
	{
		temp -= USART_TX_BUFFER_SIZE;
 1fe:	3a 97       	sbiw	r30, 0x0a	; 10
	}

	*temp = c;		//add to queue
 200:	80 83       	st	Z, r24
	outgoing_data_counter++;
 202:	80 91 13 01 	lds	r24, 0x0113
 206:	8f 5f       	subi	r24, 0xFF	; 255
 208:	80 93 13 01 	sts	0x0113, r24
	//Activate TX interrupt
	UCSR0B |= (1 << UDRIE0);
 20c:	e1 ec       	ldi	r30, 0xC1	; 193
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	80 62       	ori	r24, 0x20	; 32
 214:	80 83       	st	Z, r24
	release_lock();
 216:	78 94       	sei
}
 218:	08 95       	ret

0000021a <send_string>:

int8_t send_string(char data[], uint8_t length)
{
 21a:	0f 93       	push	r16
 21c:	1f 93       	push	r17
 21e:	cf 93       	push	r28
 220:	df 93       	push	r29
 222:	16 2f       	mov	r17, r22
	if (data == 0)	//Check for valid pointer
 224:	00 97       	sbiw	r24, 0x00	; 0
 226:	a1 f0       	breq	.+40     	; 0x250 <send_string+0x36>
	{
		return -1;
	}
	//Check for space in buffer
	if ((length + outgoing_data_counter )>= USART_TX_BUFFER_SIZE)
 228:	20 91 13 01 	lds	r18, 0x0113
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	26 0f       	add	r18, r22
 230:	31 1d       	adc	r19, r1
 232:	2a 30       	cpi	r18, 0x0A	; 10
 234:	31 05       	cpc	r19, r1
 236:	74 f4       	brge	.+28     	; 0x254 <send_string+0x3a>
	{
		return -2;
	}
	//All good, add to buffer
	for (uint8_t i = 0; i < length; i++ )
 238:	66 23       	and	r22, r22
 23a:	71 f0       	breq	.+28     	; 0x258 <send_string+0x3e>
 23c:	ec 01       	movw	r28, r24
 23e:	00 e0       	ldi	r16, 0x00	; 0
	{
		send_c(data[i]);
 240:	89 91       	ld	r24, Y+
 242:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <send_c>
	if ((length + outgoing_data_counter )>= USART_TX_BUFFER_SIZE)
	{
		return -2;
	}
	//All good, add to buffer
	for (uint8_t i = 0; i < length; i++ )
 246:	0f 5f       	subi	r16, 0xFF	; 255
 248:	01 17       	cp	r16, r17
 24a:	d1 f7       	brne	.-12     	; 0x240 <send_string+0x26>
	{
		send_c(data[i]);
	}
	
	return 0;
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	05 c0       	rjmp	.+10     	; 0x25a <send_string+0x40>

int8_t send_string(char data[], uint8_t length)
{
	if (data == 0)	//Check for valid pointer
	{
		return -1;
 250:	8f ef       	ldi	r24, 0xFF	; 255
 252:	03 c0       	rjmp	.+6      	; 0x25a <send_string+0x40>
	}
	//Check for space in buffer
	if ((length + outgoing_data_counter )>= USART_TX_BUFFER_SIZE)
	{
		return -2;
 254:	8e ef       	ldi	r24, 0xFE	; 254
 256:	01 c0       	rjmp	.+2      	; 0x25a <send_string+0x40>
	for (uint8_t i = 0; i < length; i++ )
	{
		send_c(data[i]);
	}
	
	return 0;
 258:	80 e0       	ldi	r24, 0x00	; 0
} 
 25a:	df 91       	pop	r29
 25c:	cf 91       	pop	r28
 25e:	1f 91       	pop	r17
 260:	0f 91       	pop	r16
 262:	08 95       	ret

00000264 <joystick_init>:
#include "joystick.h"

void joystick_init(Joystick *js, uint8_t deadzone_left, uint8_t deadzone_right, uint8_t middle_left, uint8_t middle_right) {
 264:	0f 93       	push	r16
 266:	fc 01       	movw	r30, r24
	js->deadzone_left = deadzone_left;
 268:	62 83       	std	Z+2, r22	; 0x02
	js->deadzone_right = deadzone_right;
 26a:	43 83       	std	Z+3, r20	; 0x03
	js->middle_left = middle_left;
 26c:	24 83       	std	Z+4, r18	; 0x04
	js->middle_right = middle_right;
 26e:	05 83       	std	Z+5, r16	; 0x05
	
	OCR1A = 60000; 								// Set compare value.
	TCCR1B |= ((1 << CS10) | (1 << CS11)); 		// Start timer with 64 prescaler.
	*/
	//----------- Config ADC -------------
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);  	// ADC prescaler to 128 (gives 125kHz with 8MHz cpu).
 270:	ea e7       	ldi	r30, 0x7A	; 122
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	80 81       	ld	r24, Z
 276:	86 60       	ori	r24, 0x06	; 6
 278:	80 83       	st	Z, r24
	ADMUX |= (1 << REFS0); 						// Use AVCC as reference.
 27a:	ac e7       	ldi	r26, 0x7C	; 124
 27c:	b0 e0       	ldi	r27, 0x00	; 0
 27e:	8c 91       	ld	r24, X
 280:	80 64       	ori	r24, 0x40	; 64
 282:	8c 93       	st	X, r24
	
	ADCSRA |= (1 << ADEN); 						// Enable ADC
 284:	80 81       	ld	r24, Z
 286:	80 68       	ori	r24, 0x80	; 128
 288:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);  					// Start conversion
 28a:	80 81       	ld	r24, Z
 28c:	80 64       	ori	r24, 0x40	; 64
 28e:	80 83       	st	Z, r24
	
}
 290:	0f 91       	pop	r16
 292:	08 95       	ret

00000294 <joystick_get_throttle>:
void joystick_update(Joystick *js) {
	//js->x = joystick_read_axis(JOYSTICK_X_CHANNEL);
	//js->y = joystick_read_axis(JOYSTICK_Y_CHANNEL);
}

uint8_t joystick_get_throttle(Joystick *js, uint8_t ch) {
 294:	cf 92       	push	r12
 296:	df 92       	push	r13
 298:	ef 92       	push	r14
 29a:	ff 92       	push	r15
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
	ADMUX &= 0xF0;						//Clear the old channel
 2a0:	ec e7       	ldi	r30, 0x7C	; 124
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	20 81       	ld	r18, Z
 2a6:	20 7f       	andi	r18, 0xF0	; 240
 2a8:	20 83       	st	Z, r18
	ADMUX |= ch;
 2aa:	20 81       	ld	r18, Z
 2ac:	26 2b       	or	r18, r22
 2ae:	20 83       	st	Z, r18
	ADCSRA |= (1<<ADSC);                //Start new conversion
 2b0:	ea e7       	ldi	r30, 0x7A	; 122
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	20 81       	ld	r18, Z
 2b6:	20 64       	ori	r18, 0x40	; 64
 2b8:	20 83       	st	Z, r18
	while(ADCSRA & (1<<ADSC));          //Wait until the conversion is done
 2ba:	20 81       	ld	r18, Z
 2bc:	26 fd       	sbrc	r18, 6
 2be:	fd cf       	rjmp	.-6      	; 0x2ba <joystick_get_throttle+0x26>
	ADCSRA |= (1<<ADSC);                //Start new conversion
 2c0:	ea e7       	ldi	r30, 0x7A	; 122
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	20 81       	ld	r18, Z
 2c6:	20 64       	ori	r18, 0x40	; 64
 2c8:	20 83       	st	Z, r18
	while(ADCSRA & (1<<ADSC));          //Wait until the conversion is done
 2ca:	20 81       	ld	r18, Z
 2cc:	26 fd       	sbrc	r18, 6
 2ce:	fd cf       	rjmp	.-6      	; 0x2ca <joystick_get_throttle+0x36>
	
	uint8_t mid_min = 127;
	uint8_t mid_max = 127;
	
	if(ch == JOYSTICK_LEFT_CHANNEL) {
 2d0:	61 30       	cpi	r22, 0x01	; 1
 2d2:	39 f4       	brne	.+14     	; 0x2e2 <joystick_get_throttle+0x4e>
		mid_min = js->middle_left - js->deadzone_left;
 2d4:	fc 01       	movw	r30, r24
 2d6:	24 81       	ldd	r18, Z+4	; 0x04
 2d8:	c2 81       	ldd	r28, Z+2	; 0x02
 2da:	d2 2f       	mov	r29, r18
 2dc:	dc 1b       	sub	r29, r28
		mid_max = js->middle_left + js->deadzone_left;
 2de:	c2 0f       	add	r28, r18
 2e0:	0b c0       	rjmp	.+22     	; 0x2f8 <joystick_get_throttle+0x64>
	}
	else if(ch == JOYSTICK_RIGHT_CHANNEL) {
 2e2:	61 11       	cpse	r22, r1
 2e4:	07 c0       	rjmp	.+14     	; 0x2f4 <joystick_get_throttle+0x60>
		mid_min = js->middle_right - js->deadzone_right;
 2e6:	fc 01       	movw	r30, r24
 2e8:	25 81       	ldd	r18, Z+5	; 0x05
 2ea:	c3 81       	ldd	r28, Z+3	; 0x03
 2ec:	d2 2f       	mov	r29, r18
 2ee:	dc 1b       	sub	r29, r28
		mid_max = js->middle_right + js->deadzone_right;		
 2f0:	c2 0f       	add	r28, r18
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <joystick_get_throttle+0x64>
	while(ADCSRA & (1<<ADSC));          //Wait until the conversion is done
	ADCSRA |= (1<<ADSC);                //Start new conversion
	while(ADCSRA & (1<<ADSC));          //Wait until the conversion is done
	
	uint8_t mid_min = 127;
	uint8_t mid_max = 127;
 2f4:	cf e7       	ldi	r28, 0x7F	; 127
	ADCSRA |= (1<<ADSC);                //Start new conversion
	while(ADCSRA & (1<<ADSC));          //Wait until the conversion is done
	ADCSRA |= (1<<ADSC);                //Start new conversion
	while(ADCSRA & (1<<ADSC));          //Wait until the conversion is done
	
	uint8_t mid_min = 127;
 2f6:	df e7       	ldi	r29, 0x7F	; 127
	else if(ch == JOYSTICK_RIGHT_CHANNEL) {
		mid_min = js->middle_right - js->deadzone_right;
		mid_max = js->middle_right + js->deadzone_right;		
	}
	
	uint8_t th = (ADCW>>2);
 2f8:	80 91 78 00 	lds	r24, 0x0078
 2fc:	90 91 79 00 	lds	r25, 0x0079
 300:	96 95       	lsr	r25
 302:	87 95       	ror	r24
 304:	96 95       	lsr	r25
 306:	87 95       	ror	r24
	
	if(th >= mid_min && th <= mid_max) {
 308:	8d 17       	cp	r24, r29
 30a:	20 f0       	brcs	.+8      	; 0x314 <joystick_get_throttle+0x80>
 30c:	c8 17       	cp	r28, r24
 30e:	08 f0       	brcs	.+2      	; 0x312 <joystick_get_throttle+0x7e>
 310:	59 c0       	rjmp	.+178    	; 0x3c4 <joystick_get_throttle+0x130>
 312:	2b c0       	rjmp	.+86     	; 0x36a <joystick_get_throttle+0xd6>
		th = 127;
	}
	
	else if (th < mid_min) {
		th = 127-(((float)(mid_min - th)/(float)(mid_min)) * 127);
 314:	2d 2f       	mov	r18, r29
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	b9 01       	movw	r22, r18
 31a:	68 1b       	sub	r22, r24
 31c:	71 09       	sbc	r23, r1
 31e:	88 27       	eor	r24, r24
 320:	77 fd       	sbrc	r23, 7
 322:	80 95       	com	r24
 324:	98 2f       	mov	r25, r24
 326:	0e 94 ae 03 	call	0x75c	; 0x75c <__floatsisf>
 32a:	6b 01       	movw	r12, r22
 32c:	7c 01       	movw	r14, r24
 32e:	6d 2f       	mov	r22, r29
 330:	70 e0       	ldi	r23, 0x00	; 0
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	0e 94 ac 03 	call	0x758	; 0x758 <__floatunsisf>
 33a:	9b 01       	movw	r18, r22
 33c:	ac 01       	movw	r20, r24
 33e:	c7 01       	movw	r24, r14
 340:	b6 01       	movw	r22, r12
 342:	0e 94 18 03 	call	0x630	; 0x630 <__divsf3>
 346:	20 e0       	ldi	r18, 0x00	; 0
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	4e ef       	ldi	r20, 0xFE	; 254
 34c:	52 e4       	ldi	r21, 0x42	; 66
 34e:	0e 94 3a 04 	call	0x874	; 0x874 <__mulsf3>
 352:	9b 01       	movw	r18, r22
 354:	ac 01       	movw	r20, r24
 356:	60 e0       	ldi	r22, 0x00	; 0
 358:	70 e0       	ldi	r23, 0x00	; 0
 35a:	8e ef       	ldi	r24, 0xFE	; 254
 35c:	92 e4       	ldi	r25, 0x42	; 66
 35e:	0e 94 b3 02 	call	0x566	; 0x566 <__subsf3>
 362:	0e 94 80 03 	call	0x700	; 0x700 <__fixunssfsi>
 366:	86 2f       	mov	r24, r22
 368:	2e c0       	rjmp	.+92     	; 0x3c6 <joystick_get_throttle+0x132>
	}
	else if (th > mid_max) {
		th = (((float)(th-mid_max)/(float)(255-mid_max)) * 127) + 127;
 36a:	d0 e0       	ldi	r29, 0x00	; 0
 36c:	bc 01       	movw	r22, r24
 36e:	77 27       	eor	r23, r23
 370:	6c 1b       	sub	r22, r28
 372:	7d 0b       	sbc	r23, r29
 374:	88 27       	eor	r24, r24
 376:	77 fd       	sbrc	r23, 7
 378:	80 95       	com	r24
 37a:	98 2f       	mov	r25, r24
 37c:	0e 94 ae 03 	call	0x75c	; 0x75c <__floatsisf>
 380:	6b 01       	movw	r12, r22
 382:	7c 01       	movw	r14, r24
 384:	6f ef       	ldi	r22, 0xFF	; 255
 386:	70 e0       	ldi	r23, 0x00	; 0
 388:	6c 1b       	sub	r22, r28
 38a:	7d 0b       	sbc	r23, r29
 38c:	88 27       	eor	r24, r24
 38e:	77 fd       	sbrc	r23, 7
 390:	80 95       	com	r24
 392:	98 2f       	mov	r25, r24
 394:	0e 94 ae 03 	call	0x75c	; 0x75c <__floatsisf>
 398:	9b 01       	movw	r18, r22
 39a:	ac 01       	movw	r20, r24
 39c:	c7 01       	movw	r24, r14
 39e:	b6 01       	movw	r22, r12
 3a0:	0e 94 18 03 	call	0x630	; 0x630 <__divsf3>
 3a4:	20 e0       	ldi	r18, 0x00	; 0
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	4e ef       	ldi	r20, 0xFE	; 254
 3aa:	52 e4       	ldi	r21, 0x42	; 66
 3ac:	0e 94 3a 04 	call	0x874	; 0x874 <__mulsf3>
 3b0:	20 e0       	ldi	r18, 0x00	; 0
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	4e ef       	ldi	r20, 0xFE	; 254
 3b6:	52 e4       	ldi	r21, 0x42	; 66
 3b8:	0e 94 b4 02 	call	0x568	; 0x568 <__addsf3>
 3bc:	0e 94 80 03 	call	0x700	; 0x700 <__fixunssfsi>
 3c0:	86 2f       	mov	r24, r22
 3c2:	01 c0       	rjmp	.+2      	; 0x3c6 <joystick_get_throttle+0x132>
	}
	
	uint8_t th = (ADCW>>2);
	
	if(th >= mid_min && th <= mid_max) {
		th = 127;
 3c4:	8f e7       	ldi	r24, 0x7F	; 127
	else if (th > mid_max) {
		th = (((float)(th-mid_max)/(float)(255-mid_max)) * 127) + 127;
	}

	return th;
 3c6:	df 91       	pop	r29
 3c8:	cf 91       	pop	r28
 3ca:	ff 90       	pop	r15
 3cc:	ef 90       	pop	r14
 3ce:	df 90       	pop	r13
 3d0:	cf 90       	pop	r12
 3d2:	08 95       	ret

000003d4 <usart_putchar>:
#include "super_paketet.h"

void usart_putchar(char data)
{
	// Stay here until data buffer is empty
	while (!(UCSR0A & _BV(UDRE0)));
 3d4:	e0 ec       	ldi	r30, 0xC0	; 192
 3d6:	f0 e0       	ldi	r31, 0x00	; 0
 3d8:	90 81       	ld	r25, Z
 3da:	95 ff       	sbrs	r25, 5
 3dc:	fd cf       	rjmp	.-6      	; 0x3d8 <usart_putchar+0x4>
	UDR0 = data;
 3de:	80 93 c6 00 	sts	0x00C6, r24
 3e2:	08 95       	ret

000003e4 <usart_putchar_printf>:
	
}

int usart_putchar_printf(char var, FILE *stream) {
 3e4:	cf 93       	push	r28
 3e6:	c8 2f       	mov	r28, r24
	if (var == '\n') usart_putchar('\r');
 3e8:	8a 30       	cpi	r24, 0x0A	; 10
 3ea:	19 f4       	brne	.+6      	; 0x3f2 <usart_putchar_printf+0xe>
 3ec:	8d e0       	ldi	r24, 0x0D	; 13
 3ee:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <usart_putchar>
	usart_putchar(var);
 3f2:	8c 2f       	mov	r24, r28
 3f4:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <usart_putchar>
	return 0;
}
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	cf 91       	pop	r28
 3fe:	08 95       	ret

00000400 <main>:




int main(void)
{
 400:	cf 93       	push	r28
 402:	df 93       	push	r29
 404:	cd b7       	in	r28, 0x3d	; 61
 406:	de b7       	in	r29, 0x3e	; 62
 408:	2b 97       	sbiw	r28, 0x0b	; 11
 40a:	0f b6       	in	r0, 0x3f	; 63
 40c:	f8 94       	cli
 40e:	de bf       	out	0x3e, r29	; 62
 410:	0f be       	out	0x3f, r0	; 63
 412:	cd bf       	out	0x3d, r28	; 61
	stdout = &mystdout;
 414:	84 e0       	ldi	r24, 0x04	; 4
 416:	91 e0       	ldi	r25, 0x01	; 1
 418:	90 93 2b 01 	sts	0x012B, r25
 41c:	80 93 2a 01 	sts	0x012A, r24
	Joystick js;
	joystick_init(&js, 2, 4, 126, 131);
 420:	03 e8       	ldi	r16, 0x83	; 131
 422:	2e e7       	ldi	r18, 0x7E	; 126
 424:	44 e0       	ldi	r20, 0x04	; 4
 426:	62 e0       	ldi	r22, 0x02	; 2
 428:	ce 01       	movw	r24, r28
 42a:	01 96       	adiw	r24, 0x01	; 1
 42c:	0e 94 32 01 	call	0x264	; 0x264 <joystick_init>
	
	InitUART(9600);
 430:	80 e8       	ldi	r24, 0x80	; 128
 432:	95 e2       	ldi	r25, 0x25	; 37
 434:	0e 94 56 02 	call	0x4ac	; 0x4ac <InitUART>
		
	super_paketet package;
	package.adress = ADRESS;
 438:	86 e6       	ldi	r24, 0x66	; 102
 43a:	8f 83       	std	Y+7, r24	; 0x07
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 43c:	2f ef       	ldi	r18, 0xFF	; 255
 43e:	89 e6       	ldi	r24, 0x69	; 105
 440:	98 e1       	ldi	r25, 0x18	; 24
 442:	21 50       	subi	r18, 0x01	; 1
 444:	80 40       	sbci	r24, 0x00	; 0
 446:	90 40       	sbci	r25, 0x00	; 0
 448:	e1 f7       	brne	.-8      	; 0x442 <main+0x42>
 44a:	00 c0       	rjmp	.+0      	; 0x44c <main+0x4c>
 44c:	00 00       	nop
	
	uint16_t thScaling = 10000;
	
	_delay_ms(1000);
	package.type = 0x02;
 44e:	82 e0       	ldi	r24, 0x02	; 2
 450:	88 87       	std	Y+8, r24	; 0x08
	package.payload[0] = thScaling & 0xFF;
 452:	80 e1       	ldi	r24, 0x10	; 16
 454:	89 87       	std	Y+9, r24	; 0x09
	package.payload[1] = (thScaling >> 8);
 456:	87 e2       	ldi	r24, 0x27	; 39
 458:	8a 87       	std	Y+10, r24	; 0x0a
	send_package(package);
 45a:	4f 81       	ldd	r20, Y+7	; 0x07
 45c:	52 e0       	ldi	r21, 0x02	; 2
 45e:	60 e1       	ldi	r22, 0x10	; 16
 460:	77 e2       	ldi	r23, 0x27	; 39
 462:	8b 85       	ldd	r24, Y+11	; 0x0b
 464:	0e 94 83 02 	call	0x506	; 0x506 <send_package>
 468:	8f e4       	ldi	r24, 0x4F	; 79
 46a:	93 ec       	ldi	r25, 0xC3	; 195
 46c:	01 97       	sbiw	r24, 0x01	; 1
 46e:	f1 f7       	brne	.-4      	; 0x46c <main+0x6c>
 470:	00 c0       	rjmp	.+0      	; 0x472 <main+0x72>
 472:	00 00       	nop
	
    while(1)
    {		
		//printf("%d, ", joystick_get_throttle(&js, JOYSTICK_LEFT_CHANNEL));
		//printf("%d \n", joystick_get_throttle(&js, JOYSTICK_RIGHT_CHANNEL));
		package.type = 0x01;
 474:	11 e0       	ldi	r17, 0x01	; 1
 476:	18 87       	std	Y+8, r17	; 0x08
        package.payload[0] = joystick_get_throttle(&js, JOYSTICK_LEFT_CHANNEL);
 478:	61 2f       	mov	r22, r17
 47a:	ce 01       	movw	r24, r28
 47c:	01 96       	adiw	r24, 0x01	; 1
 47e:	0e 94 4a 01 	call	0x294	; 0x294 <joystick_get_throttle>
 482:	89 87       	std	Y+9, r24	; 0x09
		package.payload[1] = joystick_get_throttle(&js, JOYSTICK_RIGHT_CHANNEL);
 484:	60 e0       	ldi	r22, 0x00	; 0
 486:	ce 01       	movw	r24, r28
 488:	01 96       	adiw	r24, 0x01	; 1
 48a:	0e 94 4a 01 	call	0x294	; 0x294 <joystick_get_throttle>
 48e:	8a 87       	std	Y+10, r24	; 0x0a
        //uint8_t thRight = joystick_get_throttle_dir_combined(&js, 'r');
		send_package(package);
 490:	4f 81       	ldd	r20, Y+7	; 0x07
 492:	58 85       	ldd	r21, Y+8	; 0x08
 494:	69 85       	ldd	r22, Y+9	; 0x09
 496:	78 2f       	mov	r23, r24
 498:	8b 85       	ldd	r24, Y+11	; 0x0b
 49a:	0e 94 83 02 	call	0x506	; 0x506 <send_package>
 49e:	8f ec       	ldi	r24, 0xCF	; 207
 4a0:	97 e0       	ldi	r25, 0x07	; 7
 4a2:	01 97       	sbiw	r24, 0x01	; 1
 4a4:	f1 f7       	brne	.-4      	; 0x4a2 <main+0xa2>
 4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <main+0xa8>
 4a8:	00 00       	nop
 4aa:	e5 cf       	rjmp	.-54     	; 0x476 <main+0x76>

000004ac <InitUART>:
#define PREAMBLE 0x55FF
#define PACKAGE_SIZE sizeof(super_paketet)

void InitUART( unsigned int baud )
{
	int baudfactor = (F_CPU/16/baud-1);
 4ac:	9c 01       	movw	r18, r24
 4ae:	40 e0       	ldi	r20, 0x00	; 0
 4b0:	50 e0       	ldi	r21, 0x00	; 0
 4b2:	60 e2       	ldi	r22, 0x20	; 32
 4b4:	71 ea       	ldi	r23, 0xA1	; 161
 4b6:	87 e0       	ldi	r24, 0x07	; 7
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	0e 94 9d 04 	call	0x93a	; 0x93a <__udivmodsi4>
 4be:	21 50       	subi	r18, 0x01	; 1
 4c0:	31 09       	sbc	r19, r1
	UBRR0H = (unsigned char)(baudfactor>>8);	//set the baud rate
 4c2:	30 93 c5 00 	sts	0x00C5, r19
	UBRR0L = (unsigned char)baudfactor;
 4c6:	20 93 c4 00 	sts	0x00C4, r18
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);			//enable UART receiver and transmitter
 4ca:	e1 ec       	ldi	r30, 0xC1	; 193
 4cc:	f0 e0       	ldi	r31, 0x00	; 0
 4ce:	88 e1       	ldi	r24, 0x18	; 24
 4d0:	80 83       	st	Z, r24
	/* Set frame format: 8data */
	UCSR0C = (3<<UCSZ00);
 4d2:	86 e0       	ldi	r24, 0x06	; 6
 4d4:	80 93 c2 00 	sts	0x00C2, r24
	//Activate interrupts
	UCSR0B |= (1 << UDRIE0) + (1 << RXCIE0);
 4d8:	80 81       	ld	r24, Z
 4da:	80 6a       	ori	r24, 0xA0	; 160
 4dc:	80 83       	st	Z, r24
 4de:	08 95       	ret

000004e0 <do_crc>:

//make crc checksum
uint8_t do_crc(uint8_t in_data[], uint8_t length)
{
	uint8_t ret = 0;
	for (int i = 0; i < length; i++)
 4e0:	70 e0       	ldi	r23, 0x00	; 0
 4e2:	16 16       	cp	r1, r22
 4e4:	17 06       	cpc	r1, r23
 4e6:	6c f4       	brge	.+26     	; 0x502 <do_crc+0x22>
 4e8:	e8 2f       	mov	r30, r24
 4ea:	f9 2f       	mov	r31, r25
 4ec:	20 e0       	ldi	r18, 0x00	; 0
 4ee:	30 e0       	ldi	r19, 0x00	; 0


//make crc checksum
uint8_t do_crc(uint8_t in_data[], uint8_t length)
{
	uint8_t ret = 0;
 4f0:	80 e0       	ldi	r24, 0x00	; 0
	for (int i = 0; i < length; i++)
	{
		//xor
		ret ^= in_data[i];
 4f2:	91 91       	ld	r25, Z+
 4f4:	89 27       	eor	r24, r25

//make crc checksum
uint8_t do_crc(uint8_t in_data[], uint8_t length)
{
	uint8_t ret = 0;
	for (int i = 0; i < length; i++)
 4f6:	2f 5f       	subi	r18, 0xFF	; 255
 4f8:	3f 4f       	sbci	r19, 0xFF	; 255
 4fa:	26 17       	cp	r18, r22
 4fc:	37 07       	cpc	r19, r23
 4fe:	cc f3       	brlt	.-14     	; 0x4f2 <do_crc+0x12>
 500:	08 95       	ret


//make crc checksum
uint8_t do_crc(uint8_t in_data[], uint8_t length)
{
	uint8_t ret = 0;
 502:	80 e0       	ldi	r24, 0x00	; 0
	{
		//xor
		ret ^= in_data[i];
	}
	return ret;
}
 504:	08 95       	ret

00000506 <send_package>:
	
	return fail_return;
}
//pad package and send over usart
void send_package(super_paketet outgoing_package)
{
 506:	cf 93       	push	r28
 508:	df 93       	push	r29
 50a:	cd b7       	in	r28, 0x3d	; 61
 50c:	de b7       	in	r29, 0x3e	; 62
 50e:	2c 97       	sbiw	r28, 0x0c	; 12
 510:	0f b6       	in	r0, 0x3f	; 63
 512:	f8 94       	cli
 514:	de bf       	out	0x3e, r29	; 62
 516:	0f be       	out	0x3f, r0	; 63
 518:	cd bf       	out	0x3d, r28	; 61
 51a:	48 87       	std	Y+8, r20	; 0x08
 51c:	59 87       	std	Y+9, r21	; 0x09
 51e:	6a 87       	std	Y+10, r22	; 0x0a
 520:	7b 87       	std	Y+11, r23	; 0x0b
 522:	8c 87       	std	Y+12, r24	; 0x0c
	outgoing_package.crc = do_crc((uint8_t*)&outgoing_package, PACKAGE_SIZE-1);
 524:	64 e0       	ldi	r22, 0x04	; 4
 526:	ce 01       	movw	r24, r28
 528:	08 96       	adiw	r24, 0x08	; 8
 52a:	0e 94 70 02 	call	0x4e0	; 0x4e0 <do_crc>
 52e:	8c 87       	std	Y+12, r24	; 0x0c
	const int outgoing_data_length = sizeof(super_paketet) + 2;
	
	char outgoing_data[outgoing_data_length]; // package + preamble
	
	*(uint16_t*)outgoing_data = PREAMBLE;
 530:	8f ef       	ldi	r24, 0xFF	; 255
 532:	95 e5       	ldi	r25, 0x55	; 85
 534:	9a 83       	std	Y+2, r25	; 0x02
 536:	89 83       	std	Y+1, r24	; 0x01
	*(super_paketet*)(outgoing_data + 2) = outgoing_package;
 538:	85 e0       	ldi	r24, 0x05	; 5
 53a:	fe 01       	movw	r30, r28
 53c:	38 96       	adiw	r30, 0x08	; 8
 53e:	de 01       	movw	r26, r28
 540:	13 96       	adiw	r26, 0x03	; 3
 542:	01 90       	ld	r0, Z+
 544:	0d 92       	st	X+, r0
 546:	8a 95       	dec	r24
 548:	e1 f7       	brne	.-8      	; 0x542 <send_package+0x3c>
	
	send_string(outgoing_data, outgoing_data_length);
 54a:	67 e0       	ldi	r22, 0x07	; 7
 54c:	ce 01       	movw	r24, r28
 54e:	01 96       	adiw	r24, 0x01	; 1
 550:	0e 94 0d 01 	call	0x21a	; 0x21a <send_string>
 554:	2c 96       	adiw	r28, 0x0c	; 12
 556:	0f b6       	in	r0, 0x3f	; 63
 558:	f8 94       	cli
 55a:	de bf       	out	0x3e, r29	; 62
 55c:	0f be       	out	0x3f, r0	; 63
 55e:	cd bf       	out	0x3d, r28	; 61
 560:	df 91       	pop	r29
 562:	cf 91       	pop	r28
 564:	08 95       	ret

00000566 <__subsf3>:
 566:	50 58       	subi	r21, 0x80	; 128

00000568 <__addsf3>:
 568:	bb 27       	eor	r27, r27
 56a:	aa 27       	eor	r26, r26
 56c:	0e d0       	rcall	.+28     	; 0x58a <__addsf3x>
 56e:	48 c1       	rjmp	.+656    	; 0x800 <__fp_round>
 570:	39 d1       	rcall	.+626    	; 0x7e4 <__fp_pscA>
 572:	30 f0       	brcs	.+12     	; 0x580 <__addsf3+0x18>
 574:	3e d1       	rcall	.+636    	; 0x7f2 <__fp_pscB>
 576:	20 f0       	brcs	.+8      	; 0x580 <__addsf3+0x18>
 578:	31 f4       	brne	.+12     	; 0x586 <__addsf3+0x1e>
 57a:	9f 3f       	cpi	r25, 0xFF	; 255
 57c:	11 f4       	brne	.+4      	; 0x582 <__addsf3+0x1a>
 57e:	1e f4       	brtc	.+6      	; 0x586 <__addsf3+0x1e>
 580:	2e c1       	rjmp	.+604    	; 0x7de <__fp_nan>
 582:	0e f4       	brtc	.+2      	; 0x586 <__addsf3+0x1e>
 584:	e0 95       	com	r30
 586:	e7 fb       	bst	r30, 7
 588:	24 c1       	rjmp	.+584    	; 0x7d2 <__fp_inf>

0000058a <__addsf3x>:
 58a:	e9 2f       	mov	r30, r25
 58c:	4a d1       	rcall	.+660    	; 0x822 <__fp_split3>
 58e:	80 f3       	brcs	.-32     	; 0x570 <__addsf3+0x8>
 590:	ba 17       	cp	r27, r26
 592:	62 07       	cpc	r22, r18
 594:	73 07       	cpc	r23, r19
 596:	84 07       	cpc	r24, r20
 598:	95 07       	cpc	r25, r21
 59a:	18 f0       	brcs	.+6      	; 0x5a2 <__addsf3x+0x18>
 59c:	71 f4       	brne	.+28     	; 0x5ba <__addsf3x+0x30>
 59e:	9e f5       	brtc	.+102    	; 0x606 <__addsf3x+0x7c>
 5a0:	62 c1       	rjmp	.+708    	; 0x866 <__fp_zero>
 5a2:	0e f4       	brtc	.+2      	; 0x5a6 <__addsf3x+0x1c>
 5a4:	e0 95       	com	r30
 5a6:	0b 2e       	mov	r0, r27
 5a8:	ba 2f       	mov	r27, r26
 5aa:	a0 2d       	mov	r26, r0
 5ac:	0b 01       	movw	r0, r22
 5ae:	b9 01       	movw	r22, r18
 5b0:	90 01       	movw	r18, r0
 5b2:	0c 01       	movw	r0, r24
 5b4:	ca 01       	movw	r24, r20
 5b6:	a0 01       	movw	r20, r0
 5b8:	11 24       	eor	r1, r1
 5ba:	ff 27       	eor	r31, r31
 5bc:	59 1b       	sub	r21, r25
 5be:	99 f0       	breq	.+38     	; 0x5e6 <__addsf3x+0x5c>
 5c0:	59 3f       	cpi	r21, 0xF9	; 249
 5c2:	50 f4       	brcc	.+20     	; 0x5d8 <__addsf3x+0x4e>
 5c4:	50 3e       	cpi	r21, 0xE0	; 224
 5c6:	68 f1       	brcs	.+90     	; 0x622 <__addsf3x+0x98>
 5c8:	1a 16       	cp	r1, r26
 5ca:	f0 40       	sbci	r31, 0x00	; 0
 5cc:	a2 2f       	mov	r26, r18
 5ce:	23 2f       	mov	r18, r19
 5d0:	34 2f       	mov	r19, r20
 5d2:	44 27       	eor	r20, r20
 5d4:	58 5f       	subi	r21, 0xF8	; 248
 5d6:	f3 cf       	rjmp	.-26     	; 0x5be <__addsf3x+0x34>
 5d8:	46 95       	lsr	r20
 5da:	37 95       	ror	r19
 5dc:	27 95       	ror	r18
 5de:	a7 95       	ror	r26
 5e0:	f0 40       	sbci	r31, 0x00	; 0
 5e2:	53 95       	inc	r21
 5e4:	c9 f7       	brne	.-14     	; 0x5d8 <__addsf3x+0x4e>
 5e6:	7e f4       	brtc	.+30     	; 0x606 <__addsf3x+0x7c>
 5e8:	1f 16       	cp	r1, r31
 5ea:	ba 0b       	sbc	r27, r26
 5ec:	62 0b       	sbc	r22, r18
 5ee:	73 0b       	sbc	r23, r19
 5f0:	84 0b       	sbc	r24, r20
 5f2:	ba f0       	brmi	.+46     	; 0x622 <__addsf3x+0x98>
 5f4:	91 50       	subi	r25, 0x01	; 1
 5f6:	a1 f0       	breq	.+40     	; 0x620 <__addsf3x+0x96>
 5f8:	ff 0f       	add	r31, r31
 5fa:	bb 1f       	adc	r27, r27
 5fc:	66 1f       	adc	r22, r22
 5fe:	77 1f       	adc	r23, r23
 600:	88 1f       	adc	r24, r24
 602:	c2 f7       	brpl	.-16     	; 0x5f4 <__addsf3x+0x6a>
 604:	0e c0       	rjmp	.+28     	; 0x622 <__addsf3x+0x98>
 606:	ba 0f       	add	r27, r26
 608:	62 1f       	adc	r22, r18
 60a:	73 1f       	adc	r23, r19
 60c:	84 1f       	adc	r24, r20
 60e:	48 f4       	brcc	.+18     	; 0x622 <__addsf3x+0x98>
 610:	87 95       	ror	r24
 612:	77 95       	ror	r23
 614:	67 95       	ror	r22
 616:	b7 95       	ror	r27
 618:	f7 95       	ror	r31
 61a:	9e 3f       	cpi	r25, 0xFE	; 254
 61c:	08 f0       	brcs	.+2      	; 0x620 <__addsf3x+0x96>
 61e:	b3 cf       	rjmp	.-154    	; 0x586 <__addsf3+0x1e>
 620:	93 95       	inc	r25
 622:	88 0f       	add	r24, r24
 624:	08 f0       	brcs	.+2      	; 0x628 <__addsf3x+0x9e>
 626:	99 27       	eor	r25, r25
 628:	ee 0f       	add	r30, r30
 62a:	97 95       	ror	r25
 62c:	87 95       	ror	r24
 62e:	08 95       	ret

00000630 <__divsf3>:
 630:	0c d0       	rcall	.+24     	; 0x64a <__divsf3x>
 632:	e6 c0       	rjmp	.+460    	; 0x800 <__fp_round>
 634:	de d0       	rcall	.+444    	; 0x7f2 <__fp_pscB>
 636:	40 f0       	brcs	.+16     	; 0x648 <__divsf3+0x18>
 638:	d5 d0       	rcall	.+426    	; 0x7e4 <__fp_pscA>
 63a:	30 f0       	brcs	.+12     	; 0x648 <__divsf3+0x18>
 63c:	21 f4       	brne	.+8      	; 0x646 <__divsf3+0x16>
 63e:	5f 3f       	cpi	r21, 0xFF	; 255
 640:	19 f0       	breq	.+6      	; 0x648 <__divsf3+0x18>
 642:	c7 c0       	rjmp	.+398    	; 0x7d2 <__fp_inf>
 644:	51 11       	cpse	r21, r1
 646:	10 c1       	rjmp	.+544    	; 0x868 <__fp_szero>
 648:	ca c0       	rjmp	.+404    	; 0x7de <__fp_nan>

0000064a <__divsf3x>:
 64a:	eb d0       	rcall	.+470    	; 0x822 <__fp_split3>
 64c:	98 f3       	brcs	.-26     	; 0x634 <__divsf3+0x4>

0000064e <__divsf3_pse>:
 64e:	99 23       	and	r25, r25
 650:	c9 f3       	breq	.-14     	; 0x644 <__divsf3+0x14>
 652:	55 23       	and	r21, r21
 654:	b1 f3       	breq	.-20     	; 0x642 <__divsf3+0x12>
 656:	95 1b       	sub	r25, r21
 658:	55 0b       	sbc	r21, r21
 65a:	bb 27       	eor	r27, r27
 65c:	aa 27       	eor	r26, r26
 65e:	62 17       	cp	r22, r18
 660:	73 07       	cpc	r23, r19
 662:	84 07       	cpc	r24, r20
 664:	38 f0       	brcs	.+14     	; 0x674 <__divsf3_pse+0x26>
 666:	9f 5f       	subi	r25, 0xFF	; 255
 668:	5f 4f       	sbci	r21, 0xFF	; 255
 66a:	22 0f       	add	r18, r18
 66c:	33 1f       	adc	r19, r19
 66e:	44 1f       	adc	r20, r20
 670:	aa 1f       	adc	r26, r26
 672:	a9 f3       	breq	.-22     	; 0x65e <__divsf3_pse+0x10>
 674:	33 d0       	rcall	.+102    	; 0x6dc <__divsf3_pse+0x8e>
 676:	0e 2e       	mov	r0, r30
 678:	3a f0       	brmi	.+14     	; 0x688 <__divsf3_pse+0x3a>
 67a:	e0 e8       	ldi	r30, 0x80	; 128
 67c:	30 d0       	rcall	.+96     	; 0x6de <__divsf3_pse+0x90>
 67e:	91 50       	subi	r25, 0x01	; 1
 680:	50 40       	sbci	r21, 0x00	; 0
 682:	e6 95       	lsr	r30
 684:	00 1c       	adc	r0, r0
 686:	ca f7       	brpl	.-14     	; 0x67a <__divsf3_pse+0x2c>
 688:	29 d0       	rcall	.+82     	; 0x6dc <__divsf3_pse+0x8e>
 68a:	fe 2f       	mov	r31, r30
 68c:	27 d0       	rcall	.+78     	; 0x6dc <__divsf3_pse+0x8e>
 68e:	66 0f       	add	r22, r22
 690:	77 1f       	adc	r23, r23
 692:	88 1f       	adc	r24, r24
 694:	bb 1f       	adc	r27, r27
 696:	26 17       	cp	r18, r22
 698:	37 07       	cpc	r19, r23
 69a:	48 07       	cpc	r20, r24
 69c:	ab 07       	cpc	r26, r27
 69e:	b0 e8       	ldi	r27, 0x80	; 128
 6a0:	09 f0       	breq	.+2      	; 0x6a4 <__divsf3_pse+0x56>
 6a2:	bb 0b       	sbc	r27, r27
 6a4:	80 2d       	mov	r24, r0
 6a6:	bf 01       	movw	r22, r30
 6a8:	ff 27       	eor	r31, r31
 6aa:	93 58       	subi	r25, 0x83	; 131
 6ac:	5f 4f       	sbci	r21, 0xFF	; 255
 6ae:	2a f0       	brmi	.+10     	; 0x6ba <__divsf3_pse+0x6c>
 6b0:	9e 3f       	cpi	r25, 0xFE	; 254
 6b2:	51 05       	cpc	r21, r1
 6b4:	68 f0       	brcs	.+26     	; 0x6d0 <__divsf3_pse+0x82>
 6b6:	8d c0       	rjmp	.+282    	; 0x7d2 <__fp_inf>
 6b8:	d7 c0       	rjmp	.+430    	; 0x868 <__fp_szero>
 6ba:	5f 3f       	cpi	r21, 0xFF	; 255
 6bc:	ec f3       	brlt	.-6      	; 0x6b8 <__divsf3_pse+0x6a>
 6be:	98 3e       	cpi	r25, 0xE8	; 232
 6c0:	dc f3       	brlt	.-10     	; 0x6b8 <__divsf3_pse+0x6a>
 6c2:	86 95       	lsr	r24
 6c4:	77 95       	ror	r23
 6c6:	67 95       	ror	r22
 6c8:	b7 95       	ror	r27
 6ca:	f7 95       	ror	r31
 6cc:	9f 5f       	subi	r25, 0xFF	; 255
 6ce:	c9 f7       	brne	.-14     	; 0x6c2 <__divsf3_pse+0x74>
 6d0:	88 0f       	add	r24, r24
 6d2:	91 1d       	adc	r25, r1
 6d4:	96 95       	lsr	r25
 6d6:	87 95       	ror	r24
 6d8:	97 f9       	bld	r25, 7
 6da:	08 95       	ret
 6dc:	e1 e0       	ldi	r30, 0x01	; 1
 6de:	66 0f       	add	r22, r22
 6e0:	77 1f       	adc	r23, r23
 6e2:	88 1f       	adc	r24, r24
 6e4:	bb 1f       	adc	r27, r27
 6e6:	62 17       	cp	r22, r18
 6e8:	73 07       	cpc	r23, r19
 6ea:	84 07       	cpc	r24, r20
 6ec:	ba 07       	cpc	r27, r26
 6ee:	20 f0       	brcs	.+8      	; 0x6f8 <__divsf3_pse+0xaa>
 6f0:	62 1b       	sub	r22, r18
 6f2:	73 0b       	sbc	r23, r19
 6f4:	84 0b       	sbc	r24, r20
 6f6:	ba 0b       	sbc	r27, r26
 6f8:	ee 1f       	adc	r30, r30
 6fa:	88 f7       	brcc	.-30     	; 0x6de <__divsf3_pse+0x90>
 6fc:	e0 95       	com	r30
 6fe:	08 95       	ret

00000700 <__fixunssfsi>:
 700:	98 d0       	rcall	.+304    	; 0x832 <__fp_splitA>
 702:	88 f0       	brcs	.+34     	; 0x726 <__fixunssfsi+0x26>
 704:	9f 57       	subi	r25, 0x7F	; 127
 706:	90 f0       	brcs	.+36     	; 0x72c <__fixunssfsi+0x2c>
 708:	b9 2f       	mov	r27, r25
 70a:	99 27       	eor	r25, r25
 70c:	b7 51       	subi	r27, 0x17	; 23
 70e:	a0 f0       	brcs	.+40     	; 0x738 <__fixunssfsi+0x38>
 710:	d1 f0       	breq	.+52     	; 0x746 <__fixunssfsi+0x46>
 712:	66 0f       	add	r22, r22
 714:	77 1f       	adc	r23, r23
 716:	88 1f       	adc	r24, r24
 718:	99 1f       	adc	r25, r25
 71a:	1a f0       	brmi	.+6      	; 0x722 <__fixunssfsi+0x22>
 71c:	ba 95       	dec	r27
 71e:	c9 f7       	brne	.-14     	; 0x712 <__fixunssfsi+0x12>
 720:	12 c0       	rjmp	.+36     	; 0x746 <__fixunssfsi+0x46>
 722:	b1 30       	cpi	r27, 0x01	; 1
 724:	81 f0       	breq	.+32     	; 0x746 <__fixunssfsi+0x46>
 726:	9f d0       	rcall	.+318    	; 0x866 <__fp_zero>
 728:	b1 e0       	ldi	r27, 0x01	; 1
 72a:	08 95       	ret
 72c:	9c c0       	rjmp	.+312    	; 0x866 <__fp_zero>
 72e:	67 2f       	mov	r22, r23
 730:	78 2f       	mov	r23, r24
 732:	88 27       	eor	r24, r24
 734:	b8 5f       	subi	r27, 0xF8	; 248
 736:	39 f0       	breq	.+14     	; 0x746 <__fixunssfsi+0x46>
 738:	b9 3f       	cpi	r27, 0xF9	; 249
 73a:	cc f3       	brlt	.-14     	; 0x72e <__fixunssfsi+0x2e>
 73c:	86 95       	lsr	r24
 73e:	77 95       	ror	r23
 740:	67 95       	ror	r22
 742:	b3 95       	inc	r27
 744:	d9 f7       	brne	.-10     	; 0x73c <__fixunssfsi+0x3c>
 746:	3e f4       	brtc	.+14     	; 0x756 <__fixunssfsi+0x56>
 748:	90 95       	com	r25
 74a:	80 95       	com	r24
 74c:	70 95       	com	r23
 74e:	61 95       	neg	r22
 750:	7f 4f       	sbci	r23, 0xFF	; 255
 752:	8f 4f       	sbci	r24, 0xFF	; 255
 754:	9f 4f       	sbci	r25, 0xFF	; 255
 756:	08 95       	ret

00000758 <__floatunsisf>:
 758:	e8 94       	clt
 75a:	09 c0       	rjmp	.+18     	; 0x76e <__floatsisf+0x12>

0000075c <__floatsisf>:
 75c:	97 fb       	bst	r25, 7
 75e:	3e f4       	brtc	.+14     	; 0x76e <__floatsisf+0x12>
 760:	90 95       	com	r25
 762:	80 95       	com	r24
 764:	70 95       	com	r23
 766:	61 95       	neg	r22
 768:	7f 4f       	sbci	r23, 0xFF	; 255
 76a:	8f 4f       	sbci	r24, 0xFF	; 255
 76c:	9f 4f       	sbci	r25, 0xFF	; 255
 76e:	99 23       	and	r25, r25
 770:	a9 f0       	breq	.+42     	; 0x79c <__floatsisf+0x40>
 772:	f9 2f       	mov	r31, r25
 774:	96 e9       	ldi	r25, 0x96	; 150
 776:	bb 27       	eor	r27, r27
 778:	93 95       	inc	r25
 77a:	f6 95       	lsr	r31
 77c:	87 95       	ror	r24
 77e:	77 95       	ror	r23
 780:	67 95       	ror	r22
 782:	b7 95       	ror	r27
 784:	f1 11       	cpse	r31, r1
 786:	f8 cf       	rjmp	.-16     	; 0x778 <__floatsisf+0x1c>
 788:	fa f4       	brpl	.+62     	; 0x7c8 <__floatsisf+0x6c>
 78a:	bb 0f       	add	r27, r27
 78c:	11 f4       	brne	.+4      	; 0x792 <__floatsisf+0x36>
 78e:	60 ff       	sbrs	r22, 0
 790:	1b c0       	rjmp	.+54     	; 0x7c8 <__floatsisf+0x6c>
 792:	6f 5f       	subi	r22, 0xFF	; 255
 794:	7f 4f       	sbci	r23, 0xFF	; 255
 796:	8f 4f       	sbci	r24, 0xFF	; 255
 798:	9f 4f       	sbci	r25, 0xFF	; 255
 79a:	16 c0       	rjmp	.+44     	; 0x7c8 <__floatsisf+0x6c>
 79c:	88 23       	and	r24, r24
 79e:	11 f0       	breq	.+4      	; 0x7a4 <__floatsisf+0x48>
 7a0:	96 e9       	ldi	r25, 0x96	; 150
 7a2:	11 c0       	rjmp	.+34     	; 0x7c6 <__floatsisf+0x6a>
 7a4:	77 23       	and	r23, r23
 7a6:	21 f0       	breq	.+8      	; 0x7b0 <__floatsisf+0x54>
 7a8:	9e e8       	ldi	r25, 0x8E	; 142
 7aa:	87 2f       	mov	r24, r23
 7ac:	76 2f       	mov	r23, r22
 7ae:	05 c0       	rjmp	.+10     	; 0x7ba <__floatsisf+0x5e>
 7b0:	66 23       	and	r22, r22
 7b2:	71 f0       	breq	.+28     	; 0x7d0 <__floatsisf+0x74>
 7b4:	96 e8       	ldi	r25, 0x86	; 134
 7b6:	86 2f       	mov	r24, r22
 7b8:	70 e0       	ldi	r23, 0x00	; 0
 7ba:	60 e0       	ldi	r22, 0x00	; 0
 7bc:	2a f0       	brmi	.+10     	; 0x7c8 <__floatsisf+0x6c>
 7be:	9a 95       	dec	r25
 7c0:	66 0f       	add	r22, r22
 7c2:	77 1f       	adc	r23, r23
 7c4:	88 1f       	adc	r24, r24
 7c6:	da f7       	brpl	.-10     	; 0x7be <__floatsisf+0x62>
 7c8:	88 0f       	add	r24, r24
 7ca:	96 95       	lsr	r25
 7cc:	87 95       	ror	r24
 7ce:	97 f9       	bld	r25, 7
 7d0:	08 95       	ret

000007d2 <__fp_inf>:
 7d2:	97 f9       	bld	r25, 7
 7d4:	9f 67       	ori	r25, 0x7F	; 127
 7d6:	80 e8       	ldi	r24, 0x80	; 128
 7d8:	70 e0       	ldi	r23, 0x00	; 0
 7da:	60 e0       	ldi	r22, 0x00	; 0
 7dc:	08 95       	ret

000007de <__fp_nan>:
 7de:	9f ef       	ldi	r25, 0xFF	; 255
 7e0:	80 ec       	ldi	r24, 0xC0	; 192
 7e2:	08 95       	ret

000007e4 <__fp_pscA>:
 7e4:	00 24       	eor	r0, r0
 7e6:	0a 94       	dec	r0
 7e8:	16 16       	cp	r1, r22
 7ea:	17 06       	cpc	r1, r23
 7ec:	18 06       	cpc	r1, r24
 7ee:	09 06       	cpc	r0, r25
 7f0:	08 95       	ret

000007f2 <__fp_pscB>:
 7f2:	00 24       	eor	r0, r0
 7f4:	0a 94       	dec	r0
 7f6:	12 16       	cp	r1, r18
 7f8:	13 06       	cpc	r1, r19
 7fa:	14 06       	cpc	r1, r20
 7fc:	05 06       	cpc	r0, r21
 7fe:	08 95       	ret

00000800 <__fp_round>:
 800:	09 2e       	mov	r0, r25
 802:	03 94       	inc	r0
 804:	00 0c       	add	r0, r0
 806:	11 f4       	brne	.+4      	; 0x80c <__fp_round+0xc>
 808:	88 23       	and	r24, r24
 80a:	52 f0       	brmi	.+20     	; 0x820 <__fp_round+0x20>
 80c:	bb 0f       	add	r27, r27
 80e:	40 f4       	brcc	.+16     	; 0x820 <__fp_round+0x20>
 810:	bf 2b       	or	r27, r31
 812:	11 f4       	brne	.+4      	; 0x818 <__fp_round+0x18>
 814:	60 ff       	sbrs	r22, 0
 816:	04 c0       	rjmp	.+8      	; 0x820 <__fp_round+0x20>
 818:	6f 5f       	subi	r22, 0xFF	; 255
 81a:	7f 4f       	sbci	r23, 0xFF	; 255
 81c:	8f 4f       	sbci	r24, 0xFF	; 255
 81e:	9f 4f       	sbci	r25, 0xFF	; 255
 820:	08 95       	ret

00000822 <__fp_split3>:
 822:	57 fd       	sbrc	r21, 7
 824:	90 58       	subi	r25, 0x80	; 128
 826:	44 0f       	add	r20, r20
 828:	55 1f       	adc	r21, r21
 82a:	59 f0       	breq	.+22     	; 0x842 <__fp_splitA+0x10>
 82c:	5f 3f       	cpi	r21, 0xFF	; 255
 82e:	71 f0       	breq	.+28     	; 0x84c <__fp_splitA+0x1a>
 830:	47 95       	ror	r20

00000832 <__fp_splitA>:
 832:	88 0f       	add	r24, r24
 834:	97 fb       	bst	r25, 7
 836:	99 1f       	adc	r25, r25
 838:	61 f0       	breq	.+24     	; 0x852 <__fp_splitA+0x20>
 83a:	9f 3f       	cpi	r25, 0xFF	; 255
 83c:	79 f0       	breq	.+30     	; 0x85c <__fp_splitA+0x2a>
 83e:	87 95       	ror	r24
 840:	08 95       	ret
 842:	12 16       	cp	r1, r18
 844:	13 06       	cpc	r1, r19
 846:	14 06       	cpc	r1, r20
 848:	55 1f       	adc	r21, r21
 84a:	f2 cf       	rjmp	.-28     	; 0x830 <__fp_split3+0xe>
 84c:	46 95       	lsr	r20
 84e:	f1 df       	rcall	.-30     	; 0x832 <__fp_splitA>
 850:	08 c0       	rjmp	.+16     	; 0x862 <__fp_splitA+0x30>
 852:	16 16       	cp	r1, r22
 854:	17 06       	cpc	r1, r23
 856:	18 06       	cpc	r1, r24
 858:	99 1f       	adc	r25, r25
 85a:	f1 cf       	rjmp	.-30     	; 0x83e <__fp_splitA+0xc>
 85c:	86 95       	lsr	r24
 85e:	71 05       	cpc	r23, r1
 860:	61 05       	cpc	r22, r1
 862:	08 94       	sec
 864:	08 95       	ret

00000866 <__fp_zero>:
 866:	e8 94       	clt

00000868 <__fp_szero>:
 868:	bb 27       	eor	r27, r27
 86a:	66 27       	eor	r22, r22
 86c:	77 27       	eor	r23, r23
 86e:	cb 01       	movw	r24, r22
 870:	97 f9       	bld	r25, 7
 872:	08 95       	ret

00000874 <__mulsf3>:
 874:	0b d0       	rcall	.+22     	; 0x88c <__mulsf3x>
 876:	c4 cf       	rjmp	.-120    	; 0x800 <__fp_round>
 878:	b5 df       	rcall	.-150    	; 0x7e4 <__fp_pscA>
 87a:	28 f0       	brcs	.+10     	; 0x886 <__mulsf3+0x12>
 87c:	ba df       	rcall	.-140    	; 0x7f2 <__fp_pscB>
 87e:	18 f0       	brcs	.+6      	; 0x886 <__mulsf3+0x12>
 880:	95 23       	and	r25, r21
 882:	09 f0       	breq	.+2      	; 0x886 <__mulsf3+0x12>
 884:	a6 cf       	rjmp	.-180    	; 0x7d2 <__fp_inf>
 886:	ab cf       	rjmp	.-170    	; 0x7de <__fp_nan>
 888:	11 24       	eor	r1, r1
 88a:	ee cf       	rjmp	.-36     	; 0x868 <__fp_szero>

0000088c <__mulsf3x>:
 88c:	ca df       	rcall	.-108    	; 0x822 <__fp_split3>
 88e:	a0 f3       	brcs	.-24     	; 0x878 <__mulsf3+0x4>

00000890 <__mulsf3_pse>:
 890:	95 9f       	mul	r25, r21
 892:	d1 f3       	breq	.-12     	; 0x888 <__mulsf3+0x14>
 894:	95 0f       	add	r25, r21
 896:	50 e0       	ldi	r21, 0x00	; 0
 898:	55 1f       	adc	r21, r21
 89a:	62 9f       	mul	r22, r18
 89c:	f0 01       	movw	r30, r0
 89e:	72 9f       	mul	r23, r18
 8a0:	bb 27       	eor	r27, r27
 8a2:	f0 0d       	add	r31, r0
 8a4:	b1 1d       	adc	r27, r1
 8a6:	63 9f       	mul	r22, r19
 8a8:	aa 27       	eor	r26, r26
 8aa:	f0 0d       	add	r31, r0
 8ac:	b1 1d       	adc	r27, r1
 8ae:	aa 1f       	adc	r26, r26
 8b0:	64 9f       	mul	r22, r20
 8b2:	66 27       	eor	r22, r22
 8b4:	b0 0d       	add	r27, r0
 8b6:	a1 1d       	adc	r26, r1
 8b8:	66 1f       	adc	r22, r22
 8ba:	82 9f       	mul	r24, r18
 8bc:	22 27       	eor	r18, r18
 8be:	b0 0d       	add	r27, r0
 8c0:	a1 1d       	adc	r26, r1
 8c2:	62 1f       	adc	r22, r18
 8c4:	73 9f       	mul	r23, r19
 8c6:	b0 0d       	add	r27, r0
 8c8:	a1 1d       	adc	r26, r1
 8ca:	62 1f       	adc	r22, r18
 8cc:	83 9f       	mul	r24, r19
 8ce:	a0 0d       	add	r26, r0
 8d0:	61 1d       	adc	r22, r1
 8d2:	22 1f       	adc	r18, r18
 8d4:	74 9f       	mul	r23, r20
 8d6:	33 27       	eor	r19, r19
 8d8:	a0 0d       	add	r26, r0
 8da:	61 1d       	adc	r22, r1
 8dc:	23 1f       	adc	r18, r19
 8de:	84 9f       	mul	r24, r20
 8e0:	60 0d       	add	r22, r0
 8e2:	21 1d       	adc	r18, r1
 8e4:	82 2f       	mov	r24, r18
 8e6:	76 2f       	mov	r23, r22
 8e8:	6a 2f       	mov	r22, r26
 8ea:	11 24       	eor	r1, r1
 8ec:	9f 57       	subi	r25, 0x7F	; 127
 8ee:	50 40       	sbci	r21, 0x00	; 0
 8f0:	8a f0       	brmi	.+34     	; 0x914 <__stack+0x15>
 8f2:	e1 f0       	breq	.+56     	; 0x92c <__stack+0x2d>
 8f4:	88 23       	and	r24, r24
 8f6:	4a f0       	brmi	.+18     	; 0x90a <__stack+0xb>
 8f8:	ee 0f       	add	r30, r30
 8fa:	ff 1f       	adc	r31, r31
 8fc:	bb 1f       	adc	r27, r27
 8fe:	66 1f       	adc	r22, r22
 900:	77 1f       	adc	r23, r23
 902:	88 1f       	adc	r24, r24
 904:	91 50       	subi	r25, 0x01	; 1
 906:	50 40       	sbci	r21, 0x00	; 0
 908:	a9 f7       	brne	.-22     	; 0x8f4 <__mulsf3_pse+0x64>
 90a:	9e 3f       	cpi	r25, 0xFE	; 254
 90c:	51 05       	cpc	r21, r1
 90e:	70 f0       	brcs	.+28     	; 0x92c <__stack+0x2d>
 910:	60 cf       	rjmp	.-320    	; 0x7d2 <__fp_inf>
 912:	aa cf       	rjmp	.-172    	; 0x868 <__fp_szero>
 914:	5f 3f       	cpi	r21, 0xFF	; 255
 916:	ec f3       	brlt	.-6      	; 0x912 <__stack+0x13>
 918:	98 3e       	cpi	r25, 0xE8	; 232
 91a:	dc f3       	brlt	.-10     	; 0x912 <__stack+0x13>
 91c:	86 95       	lsr	r24
 91e:	77 95       	ror	r23
 920:	67 95       	ror	r22
 922:	b7 95       	ror	r27
 924:	f7 95       	ror	r31
 926:	e7 95       	ror	r30
 928:	9f 5f       	subi	r25, 0xFF	; 255
 92a:	c1 f7       	brne	.-16     	; 0x91c <__stack+0x1d>
 92c:	fe 2b       	or	r31, r30
 92e:	88 0f       	add	r24, r24
 930:	91 1d       	adc	r25, r1
 932:	96 95       	lsr	r25
 934:	87 95       	ror	r24
 936:	97 f9       	bld	r25, 7
 938:	08 95       	ret

0000093a <__udivmodsi4>:
 93a:	a1 e2       	ldi	r26, 0x21	; 33
 93c:	1a 2e       	mov	r1, r26
 93e:	aa 1b       	sub	r26, r26
 940:	bb 1b       	sub	r27, r27
 942:	fd 01       	movw	r30, r26
 944:	0d c0       	rjmp	.+26     	; 0x960 <__udivmodsi4_ep>

00000946 <__udivmodsi4_loop>:
 946:	aa 1f       	adc	r26, r26
 948:	bb 1f       	adc	r27, r27
 94a:	ee 1f       	adc	r30, r30
 94c:	ff 1f       	adc	r31, r31
 94e:	a2 17       	cp	r26, r18
 950:	b3 07       	cpc	r27, r19
 952:	e4 07       	cpc	r30, r20
 954:	f5 07       	cpc	r31, r21
 956:	20 f0       	brcs	.+8      	; 0x960 <__udivmodsi4_ep>
 958:	a2 1b       	sub	r26, r18
 95a:	b3 0b       	sbc	r27, r19
 95c:	e4 0b       	sbc	r30, r20
 95e:	f5 0b       	sbc	r31, r21

00000960 <__udivmodsi4_ep>:
 960:	66 1f       	adc	r22, r22
 962:	77 1f       	adc	r23, r23
 964:	88 1f       	adc	r24, r24
 966:	99 1f       	adc	r25, r25
 968:	1a 94       	dec	r1
 96a:	69 f7       	brne	.-38     	; 0x946 <__udivmodsi4_loop>
 96c:	60 95       	com	r22
 96e:	70 95       	com	r23
 970:	80 95       	com	r24
 972:	90 95       	com	r25
 974:	9b 01       	movw	r18, r22
 976:	ac 01       	movw	r20, r24
 978:	bd 01       	movw	r22, r26
 97a:	cf 01       	movw	r24, r30
 97c:	08 95       	ret

0000097e <_exit>:
 97e:	f8 94       	cli

00000980 <__stop_program>:
 980:	ff cf       	rjmp	.-2      	; 0x980 <__stop_program>
