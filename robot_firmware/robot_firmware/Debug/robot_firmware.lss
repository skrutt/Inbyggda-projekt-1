
robot_firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00000bce  00000c62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e4  00800120  00800120  00000c82  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c82  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  00000cde  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e81  00000000  00000000  00000dc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000070b  00000000  00000000  00001c47  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000530  00000000  00000000  00002352  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000228  00000000  00000000  00002884  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000450  00000000  00000000  00002aac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008da  00000000  00000000  00002efc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  000037d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 65 02 	jmp	0x4ca	; 0x4ca <__vector_18>
  4c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ec       	ldi	r30, 0xCE	; 206
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 32       	cpi	r26, 0x20	; 32
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a0 e2       	ldi	r26, 0x20	; 32
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c9 00 	call	0x192	; 0x192 <main>
  9e:	0c 94 e5 05 	jmp	0xbca	; 0xbca <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <motor_pwm_init>:
	
	motor_set_direction(motor, 1);
}

void motor_pwm_init() {
	DDRD |= (1 << PORTD6) | (1 << PORTD5);
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	80 66       	ori	r24, 0x60	; 96
  aa:	8a b9       	out	0x0a, r24	; 10

	TCCR0A |= (1 << WGM00) | (1 << COM0A1) | (1 << COM0B1);		// PWM, Phase Correct
  ac:	84 b5       	in	r24, 0x24	; 36
  ae:	81 6a       	ori	r24, 0xA1	; 161
  b0:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS02);										// 256 prescaler (ska väl kanske ändras)
  b2:	85 b5       	in	r24, 0x25	; 37
  b4:	84 60       	ori	r24, 0x04	; 4
  b6:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;													// Reset TCNT0
  b8:	16 bc       	out	0x26, r1	; 38
	
	OCR0A = 0;
  ba:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0;
  bc:	18 bc       	out	0x28, r1	; 40
  be:	08 95       	ret

000000c0 <motor_set_throttle>:
}

void motor_set_throttle(Motor *motor, uint8_t th) {
  c0:	fc 01       	movw	r30, r24
	uint8_t finalThrottle = th + motor->throttle_offset;
  c2:	20 81       	ld	r18, Z
	
	if(th + motor->throttle_offset > 255) {
  c4:	82 2f       	mov	r24, r18
  c6:	99 27       	eor	r25, r25
  c8:	87 fd       	sbrc	r24, 7
  ca:	90 95       	com	r25
  cc:	86 0f       	add	r24, r22
  ce:	91 1d       	adc	r25, r1
  d0:	8f 3f       	cpi	r24, 0xFF	; 255
  d2:	91 05       	cpc	r25, r1
  d4:	09 f0       	breq	.+2      	; 0xd8 <motor_set_throttle+0x18>
  d6:	24 f4       	brge	.+8      	; 0xe0 <motor_set_throttle+0x20>
		finalThrottle = 255;
	}
	else if(th + motor->throttle_offset < 0) {
  d8:	99 23       	and	r25, r25
  da:	24 f0       	brlt	.+8      	; 0xe4 <motor_set_throttle+0x24>
	OCR0A = 0;
	OCR0B = 0;
}

void motor_set_throttle(Motor *motor, uint8_t th) {
	uint8_t finalThrottle = th + motor->throttle_offset;
  dc:	62 0f       	add	r22, r18
  de:	03 c0       	rjmp	.+6      	; 0xe6 <motor_set_throttle+0x26>
	
	if(th + motor->throttle_offset > 255) {
		finalThrottle = 255;
  e0:	6f ef       	ldi	r22, 0xFF	; 255
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <motor_set_throttle+0x26>
	}
	else if(th + motor->throttle_offset < 0) {
		finalThrottle = 0;
  e4:	60 e0       	ldi	r22, 0x00	; 0
	}
	
	// Reverse PWM output if going in reverse.
	if(motor->direction == 0) {
  e6:	83 81       	ldd	r24, Z+3	; 0x03
  e8:	81 11       	cpse	r24, r1
  ea:	01 c0       	rjmp	.+2      	; 0xee <motor_set_throttle+0x2e>
		finalThrottle = 255 - finalThrottle;
  ec:	60 95       	com	r22
	}
	
	*(motor->OCR) = finalThrottle;
  ee:	01 80       	ldd	r0, Z+1	; 0x01
  f0:	f2 81       	ldd	r31, Z+2	; 0x02
  f2:	e0 2d       	mov	r30, r0
  f4:	60 83       	st	Z, r22
  f6:	08 95       	ret

000000f8 <motor_set_direction>:
}

void motor_set_direction(Motor *motor, uint8_t dir) {
  f8:	fc 01       	movw	r30, r24
	if(dir == 1) {
  fa:	61 30       	cpi	r22, 0x01	; 1
  fc:	91 f4       	brne	.+36     	; 0x122 <motor_set_direction+0x2a>
		motor->direction = dir;
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	83 83       	std	Z+3, r24	; 0x03
		*(motor->dirPort) &= ~(1 << motor->dirPin);
 102:	a4 81       	ldd	r26, Z+4	; 0x04
 104:	b5 81       	ldd	r27, Z+5	; 0x05
 106:	4c 91       	ld	r20, X
 108:	21 e0       	ldi	r18, 0x01	; 1
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	c9 01       	movw	r24, r18
 10e:	06 80       	ldd	r0, Z+6	; 0x06
 110:	02 c0       	rjmp	.+4      	; 0x116 <motor_set_direction+0x1e>
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	0a 94       	dec	r0
 118:	e2 f7       	brpl	.-8      	; 0x112 <motor_set_direction+0x1a>
 11a:	80 95       	com	r24
 11c:	84 23       	and	r24, r20
 11e:	8c 93       	st	X, r24
 120:	08 95       	ret
	}
	else if(dir == 0) {
 122:	61 11       	cpse	r22, r1
 124:	0f c0       	rjmp	.+30     	; 0x144 <motor_set_direction+0x4c>
		motor->direction = dir;
 126:	13 82       	std	Z+3, r1	; 0x03
		*(motor->dirPort) |= (1 << motor->dirPin);
 128:	a4 81       	ldd	r26, Z+4	; 0x04
 12a:	b5 81       	ldd	r27, Z+5	; 0x05
 12c:	4c 91       	ld	r20, X
 12e:	21 e0       	ldi	r18, 0x01	; 1
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	c9 01       	movw	r24, r18
 134:	06 80       	ldd	r0, Z+6	; 0x06
 136:	02 c0       	rjmp	.+4      	; 0x13c <motor_set_direction+0x44>
 138:	88 0f       	add	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	0a 94       	dec	r0
 13e:	e2 f7       	brpl	.-8      	; 0x138 <motor_set_direction+0x40>
 140:	84 2b       	or	r24, r20
 142:	8c 93       	st	X, r24
 144:	08 95       	ret

00000146 <motor_init>:
#include "motor.h"

void motor_init(Motor *motor, uint8_t th_offset, volatile uint8_t *OCR, volatile uint8_t *DDR, volatile uint8_t *dirPort, uint8_t dirPin) {
 146:	ef 92       	push	r14
 148:	ff 92       	push	r15
 14a:	0f 93       	push	r16
 14c:	1f 93       	push	r17
	motor->throttle_offset = th_offset;
 14e:	fc 01       	movw	r30, r24
 150:	60 83       	st	Z, r22
	motor->OCR = OCR;
 152:	52 83       	std	Z+2, r21	; 0x02
 154:	41 83       	std	Z+1, r20	; 0x01
	motor->dirPort = dirPort;
 156:	15 83       	std	Z+5, r17	; 0x05
 158:	04 83       	std	Z+4, r16	; 0x04
	motor->dirPin = dirPin;
 15a:	e6 82       	std	Z+6, r14	; 0x06
	*DDR |= (1 << dirPin);
 15c:	f9 01       	movw	r30, r18
 15e:	60 81       	ld	r22, Z
 160:	41 e0       	ldi	r20, 0x01	; 1
 162:	50 e0       	ldi	r21, 0x00	; 0
 164:	fa 01       	movw	r30, r20
 166:	02 c0       	rjmp	.+4      	; 0x16c <motor_init+0x26>
 168:	ee 0f       	add	r30, r30
 16a:	ff 1f       	adc	r31, r31
 16c:	ea 94       	dec	r14
 16e:	e2 f7       	brpl	.-8      	; 0x168 <motor_init+0x22>
 170:	7f 01       	movw	r14, r30
 172:	e6 2a       	or	r14, r22
 174:	f9 01       	movw	r30, r18
 176:	e0 82       	st	Z, r14
	
	motor_set_direction(motor, 1);
 178:	61 e0       	ldi	r22, 0x01	; 1
 17a:	0e 94 7c 00 	call	0xf8	; 0xf8 <motor_set_direction>
}
 17e:	1f 91       	pop	r17
 180:	0f 91       	pop	r16
 182:	ff 90       	pop	r15
 184:	ef 90       	pop	r14
 186:	08 95       	ret

00000188 <uart_putchar>:

FILE mystdout;

int uart_putchar(char c, FILE *stream) 
{ 
	send_c(c);
 188:	0e 94 be 02 	call	0x57c	; 0x57c <send_c>
	return 0;
}
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	08 95       	ret

00000192 <main>:



int main()
{
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	cd b7       	in	r28, 0x3d	; 61
 198:	de b7       	in	r29, 0x3e	; 62
 19a:	63 97       	sbiw	r28, 0x13	; 19
 19c:	0f b6       	in	r0, 0x3f	; 63
 19e:	f8 94       	cli
 1a0:	de bf       	out	0x3e, r29	; 62
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	cd bf       	out	0x3d, r28	; 61
	//Set up motor pwm
	Motor leftMotor;
	Motor rightMotor;
	motor_init(&leftMotor, 0, &OCR0A, &DDRD, &PORTD, 3);
 1a6:	0f 2e       	mov	r0, r31
 1a8:	f3 e0       	ldi	r31, 0x03	; 3
 1aa:	ef 2e       	mov	r14, r31
 1ac:	f0 2d       	mov	r31, r0
 1ae:	0b e2       	ldi	r16, 0x2B	; 43
 1b0:	10 e0       	ldi	r17, 0x00	; 0
 1b2:	2a e2       	ldi	r18, 0x2A	; 42
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	47 e4       	ldi	r20, 0x47	; 71
 1b8:	50 e0       	ldi	r21, 0x00	; 0
 1ba:	60 e0       	ldi	r22, 0x00	; 0
 1bc:	ce 01       	movw	r24, r28
 1be:	01 96       	adiw	r24, 0x01	; 1
 1c0:	0e 94 a3 00 	call	0x146	; 0x146 <motor_init>
	motor_init(&rightMotor, 0, &OCR0B, &DDRD, &PORTD, 4);
 1c4:	68 94       	set
 1c6:	ee 24       	eor	r14, r14
 1c8:	e2 f8       	bld	r14, 2
 1ca:	2a e2       	ldi	r18, 0x2A	; 42
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	48 e4       	ldi	r20, 0x48	; 72
 1d0:	50 e0       	ldi	r21, 0x00	; 0
 1d2:	60 e0       	ldi	r22, 0x00	; 0
 1d4:	ce 01       	movw	r24, r28
 1d6:	08 96       	adiw	r24, 0x08	; 8
 1d8:	0e 94 a3 00 	call	0x146	; 0x146 <motor_init>

	motor_pwm_init();
 1dc:	0e 94 53 00 	call	0xa6	; 0xa6 <motor_pwm_init>
	
	DDRD = 2;				// output
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xff;					// input
 1e4:	8f ef       	ldi	r24, 0xFF	; 255
 1e6:	84 b9       	out	0x04, r24	; 4
	SETBIT(PORTB,PB0);			// enable pull-up
 1e8:	28 9a       	sbi	0x05, 0	; 5
	SETBIT(PORTB,PB1);			// enable pull-up
 1ea:	29 9a       	sbi	0x05, 1	; 5
	sei();
 1ec:	78 94       	sei
	InitUART(9600);	
 1ee:	80 e8       	ldi	r24, 0x80	; 128
 1f0:	95 e2       	ldi	r25, 0x25	; 37
 1f2:	0e 94 88 01 	call	0x310	; 0x310 <InitUART>
	
	fdev_setup_stream(&mystdout, uart_putchar, NULL, _FDEV_SETUP_WRITE);
 1f6:	84 ec       	ldi	r24, 0xC4	; 196
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	90 93 31 01 	sts	0x0131, r25
 1fe:	80 93 30 01 	sts	0x0130, r24
 202:	10 92 33 01 	sts	0x0133, r1
 206:	10 92 32 01 	sts	0x0132, r1
 20a:	82 e0       	ldi	r24, 0x02	; 2
 20c:	80 93 2b 01 	sts	0x012B, r24
 210:	10 92 35 01 	sts	0x0135, r1
 214:	10 92 34 01 	sts	0x0134, r1
	stdout = &mystdout;			
 218:	88 e2       	ldi	r24, 0x28	; 40
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	90 93 01 02 	sts	0x0201, r25
 220:	80 93 00 02 	sts	0x0200, r24
	char	ch = 0;
	send_string(" Wait", 4);
 224:	64 e0       	ldi	r22, 0x04	; 4
 226:	84 e0       	ldi	r24, 0x04	; 4
 228:	91 e0       	ldi	r25, 0x01	; 1
 22a:	0e 94 da 02 	call	0x5b4	; 0x5b4 <send_string>
	
	int thLeft = 127,  thRight = 127;
 22e:	0f 2e       	mov	r0, r31
 230:	ff e7       	ldi	r31, 0x7F	; 127
 232:	ef 2e       	mov	r14, r31
 234:	f1 2c       	mov	r15, r1
 236:	f0 2d       	mov	r31, r0
 238:	0f e7       	ldi	r16, 0x7F	; 127
 23a:	10 e0       	ldi	r17, 0x00	; 0
		super_paketet inc = check_for_package();
		if (inc.adress != 0 && inc.type == 1)
		{
			thLeft = inc.payload[0];
			thRight = inc.payload[1];
			printf("Paket! payload: %d", inc.payload[0]);
 23c:	0f 2e       	mov	r0, r31
 23e:	fc e0       	ldi	r31, 0x0C	; 12
 240:	cf 2e       	mov	r12, r31
 242:	f1 e0       	ldi	r31, 0x01	; 1
 244:	df 2e       	mov	r13, r31
 246:	f0 2d       	mov	r31, r0
		}
		
		if(thLeft < 127) {
			motor_set_direction(&leftMotor, 0);
			motor_set_throttle(&leftMotor, 127 - thLeft);
 248:	0f 2e       	mov	r0, r31
 24a:	ff e7       	ldi	r31, 0x7F	; 127
 24c:	bf 2e       	mov	r11, r31
 24e:	f0 2d       	mov	r31, r0
	int thLeft = 127,  thRight = 127;

	while(1)
	{
		
		send_string(".", 1);
 250:	61 e0       	ldi	r22, 0x01	; 1
 252:	8a e0       	ldi	r24, 0x0A	; 10
 254:	91 e0       	ldi	r25, 0x01	; 1
 256:	0e 94 da 02 	call	0x5b4	; 0x5b4 <send_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25a:	8f e3       	ldi	r24, 0x3F	; 63
 25c:	9c e9       	ldi	r25, 0x9C	; 156
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <main+0xcc>
 262:	00 c0       	rjmp	.+0      	; 0x264 <main+0xd2>
 264:	00 00       	nop
		_delay_ms(20);
		super_paketet inc = check_for_package();
 266:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <check_for_package>
 26a:	2f 87       	std	Y+15, r18	; 0x0f
 26c:	38 8b       	std	Y+16, r19	; 0x10
 26e:	49 8b       	std	Y+17, r20	; 0x11
 270:	5a 8b       	std	Y+18, r21	; 0x12
 272:	6b 8b       	std	Y+19, r22	; 0x13
		if (inc.adress != 0 && inc.type == 1)
 274:	22 23       	and	r18, r18
 276:	81 f0       	breq	.+32     	; 0x298 <main+0x106>
 278:	31 30       	cpi	r19, 0x01	; 1
 27a:	71 f4       	brne	.+28     	; 0x298 <main+0x106>
		{
			thLeft = inc.payload[0];
 27c:	04 2f       	mov	r16, r20
 27e:	10 e0       	ldi	r17, 0x00	; 0
			thRight = inc.payload[1];
 280:	e5 2e       	mov	r14, r21
 282:	f1 2c       	mov	r15, r1
			printf("Paket! payload: %d", inc.payload[0]);
 284:	1f 92       	push	r1
 286:	4f 93       	push	r20
 288:	df 92       	push	r13
 28a:	cf 92       	push	r12
 28c:	0e 94 22 03 	call	0x644	; 0x644 <printf>
 290:	0f 90       	pop	r0
 292:	0f 90       	pop	r0
 294:	0f 90       	pop	r0
 296:	0f 90       	pop	r0
		}
		
		if(thLeft < 127) {
 298:	0f 37       	cpi	r16, 0x7F	; 127
 29a:	11 05       	cpc	r17, r1
 29c:	64 f4       	brge	.+24     	; 0x2b6 <main+0x124>
			motor_set_direction(&leftMotor, 0);
 29e:	60 e0       	ldi	r22, 0x00	; 0
 2a0:	ce 01       	movw	r24, r28
 2a2:	01 96       	adiw	r24, 0x01	; 1
 2a4:	0e 94 7c 00 	call	0xf8	; 0xf8 <motor_set_direction>
			motor_set_throttle(&leftMotor, 127 - thLeft);
 2a8:	6b 2d       	mov	r22, r11
 2aa:	60 1b       	sub	r22, r16
 2ac:	ce 01       	movw	r24, r28
 2ae:	01 96       	adiw	r24, 0x01	; 1
 2b0:	0e 94 60 00 	call	0xc0	; 0xc0 <motor_set_throttle>
 2b4:	0b c0       	rjmp	.+22     	; 0x2cc <main+0x13a>
		}
		else {
			motor_set_direction(&leftMotor, 1);
 2b6:	61 e0       	ldi	r22, 0x01	; 1
 2b8:	ce 01       	movw	r24, r28
 2ba:	01 96       	adiw	r24, 0x01	; 1
 2bc:	0e 94 7c 00 	call	0xf8	; 0xf8 <motor_set_direction>
			motor_set_throttle(&leftMotor, thLeft - 127);
 2c0:	61 e8       	ldi	r22, 0x81	; 129
 2c2:	60 0f       	add	r22, r16
 2c4:	ce 01       	movw	r24, r28
 2c6:	01 96       	adiw	r24, 0x01	; 1
 2c8:	0e 94 60 00 	call	0xc0	; 0xc0 <motor_set_throttle>
		}
		if(thRight < 127) {
 2cc:	9f e7       	ldi	r25, 0x7F	; 127
 2ce:	e9 16       	cp	r14, r25
 2d0:	f1 04       	cpc	r15, r1
 2d2:	64 f4       	brge	.+24     	; 0x2ec <main+0x15a>
			motor_set_direction(&rightMotor, 0);
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	ce 01       	movw	r24, r28
 2d8:	08 96       	adiw	r24, 0x08	; 8
 2da:	0e 94 7c 00 	call	0xf8	; 0xf8 <motor_set_direction>
			motor_set_throttle(&rightMotor, 127 - thRight);
 2de:	6b 2d       	mov	r22, r11
 2e0:	6e 19       	sub	r22, r14
 2e2:	ce 01       	movw	r24, r28
 2e4:	08 96       	adiw	r24, 0x08	; 8
 2e6:	0e 94 60 00 	call	0xc0	; 0xc0 <motor_set_throttle>
 2ea:	0b c0       	rjmp	.+22     	; 0x302 <main+0x170>
		}
		else {
			motor_set_direction(&rightMotor, 1);
 2ec:	61 e0       	ldi	r22, 0x01	; 1
 2ee:	ce 01       	movw	r24, r28
 2f0:	08 96       	adiw	r24, 0x08	; 8
 2f2:	0e 94 7c 00 	call	0xf8	; 0xf8 <motor_set_direction>
			motor_set_throttle(&rightMotor, thRight - 127);
 2f6:	61 e8       	ldi	r22, 0x81	; 129
 2f8:	6e 0d       	add	r22, r14
 2fa:	ce 01       	movw	r24, r28
 2fc:	08 96       	adiw	r24, 0x08	; 8
 2fe:	0e 94 60 00 	call	0xc0	; 0xc0 <motor_set_throttle>
 302:	8f e9       	ldi	r24, 0x9F	; 159
 304:	9f e0       	ldi	r25, 0x0F	; 15
 306:	01 97       	sbiw	r24, 0x01	; 1
 308:	f1 f7       	brne	.-4      	; 0x306 <main+0x174>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <main+0x17a>
 30c:	00 00       	nop
		{
			PORTB = 0;
		}
		
		_delay_ms(2);
	}
 30e:	a0 cf       	rjmp	.-192    	; 0x250 <main+0xbe>

00000310 <InitUART>:
#define PREAMBLE 0x55FF
#define PACKAGE_SIZE sizeof(super_paketet)

void InitUART( unsigned int baud )
{
	int baudfactor = (F_CPU/16/baud-1);
 310:	9c 01       	movw	r18, r24
 312:	40 e0       	ldi	r20, 0x00	; 0
 314:	50 e0       	ldi	r21, 0x00	; 0
 316:	60 e2       	ldi	r22, 0x20	; 32
 318:	71 ea       	ldi	r23, 0xA1	; 161
 31a:	87 e0       	ldi	r24, 0x07	; 7
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 00 03 	call	0x600	; 0x600 <__udivmodsi4>
 322:	21 50       	subi	r18, 0x01	; 1
 324:	31 09       	sbc	r19, r1
	UBRR0H = (unsigned char)(baudfactor>>8);	//set the baud rate
 326:	30 93 c5 00 	sts	0x00C5, r19
	UBRR0L = (unsigned char)baudfactor;
 32a:	20 93 c4 00 	sts	0x00C4, r18
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);			//enable UART receiver and transmitter
 32e:	e1 ec       	ldi	r30, 0xC1	; 193
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	88 e1       	ldi	r24, 0x18	; 24
 334:	80 83       	st	Z, r24
	/* Set frame format: 8data */
	UCSR0C = (3<<UCSZ00);
 336:	86 e0       	ldi	r24, 0x06	; 6
 338:	80 93 c2 00 	sts	0x00C2, r24
	//Activate interrupts
	UCSR0B |= (1 << UDRIE0) + (1 << RXCIE0);
 33c:	80 81       	ld	r24, Z
 33e:	80 6a       	ori	r24, 0xA0	; 160
 340:	80 83       	st	Z, r24
 342:	08 95       	ret

00000344 <do_crc>:

//make crc checksum
uint8_t do_crc(uint8_t in_data[], uint8_t length)
{
	uint8_t ret = 0;
	for (int i = 0; i < length; i++)
 344:	70 e0       	ldi	r23, 0x00	; 0
 346:	16 16       	cp	r1, r22
 348:	17 06       	cpc	r1, r23
 34a:	6c f4       	brge	.+26     	; 0x366 <do_crc+0x22>
 34c:	e8 2f       	mov	r30, r24
 34e:	f9 2f       	mov	r31, r25
 350:	20 e0       	ldi	r18, 0x00	; 0
 352:	30 e0       	ldi	r19, 0x00	; 0


//make crc checksum
uint8_t do_crc(uint8_t in_data[], uint8_t length)
{
	uint8_t ret = 0;
 354:	80 e0       	ldi	r24, 0x00	; 0
	for (int i = 0; i < length; i++)
	{
		//xor
		ret ^= in_data[i];
 356:	91 91       	ld	r25, Z+
 358:	89 27       	eor	r24, r25

//make crc checksum
uint8_t do_crc(uint8_t in_data[], uint8_t length)
{
	uint8_t ret = 0;
	for (int i = 0; i < length; i++)
 35a:	2f 5f       	subi	r18, 0xFF	; 255
 35c:	3f 4f       	sbci	r19, 0xFF	; 255
 35e:	26 17       	cp	r18, r22
 360:	37 07       	cpc	r19, r23
 362:	cc f3       	brlt	.-14     	; 0x356 <do_crc+0x12>
 364:	08 95       	ret


//make crc checksum
uint8_t do_crc(uint8_t in_data[], uint8_t length)
{
	uint8_t ret = 0;
 366:	80 e0       	ldi	r24, 0x00	; 0
	{
		//xor
		ret ^= in_data[i];
	}
	return ret;
}
 368:	08 95       	ret

0000036a <process_data_for_package>:

//Call from isr
super_paketet process_data_for_package(char incomming_byte)
{
 36a:	1f 93       	push	r17
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	00 d0       	rcall	.+0      	; 0x372 <process_data_for_package+0x8>
 372:	00 d0       	rcall	.+0      	; 0x374 <process_data_for_package+0xa>
 374:	1f 92       	push	r1
 376:	cd b7       	in	r28, 0x3d	; 61
 378:	de b7       	in	r29, 0x3e	; 62
 37a:	18 2f       	mov	r17, r24
	//static uint8_t		counter = 0;
	super_paketet *package = (super_paketet *)buffer;
	super_paketet *new_package = (super_paketet *)(buffer + 1);
	
	//move into last place in buffer
	buffer[PACKAGE_SIZE] = incomming_byte;
 37c:	80 93 25 01 	sts	0x0125, r24
// 			//*buffer = *++buffer;
// 		}
// 	}
// 	
	//Copy new content
	*package = *new_package;
 380:	95 e0       	ldi	r25, 0x05	; 5
 382:	e1 e2       	ldi	r30, 0x21	; 33
 384:	f1 e0       	ldi	r31, 0x01	; 1
 386:	a0 e2       	ldi	r26, 0x20	; 32
 388:	b1 e0       	ldi	r27, 0x01	; 1
 38a:	01 90       	ld	r0, Z+
 38c:	0d 92       	st	X+, r0
 38e:	9a 95       	dec	r25
 390:	e1 f7       	brne	.-8      	; 0x38a <process_data_for_package+0x20>
	//check for package
	
	
	if (package->adress == ADRESS)
 392:	80 91 20 01 	lds	r24, 0x0120
 396:	86 36       	cpi	r24, 0x66	; 102
 398:	89 f4       	brne	.+34     	; 0x3bc <process_data_for_package+0x52>
	{
		//Woo paket!
		//Crc osv
		if (package->crc == do_crc((uint8_t*)package, PACKAGE_SIZE - 1))
 39a:	64 e0       	ldi	r22, 0x04	; 4
 39c:	80 e2       	ldi	r24, 0x20	; 32
 39e:	91 e0       	ldi	r25, 0x01	; 1
 3a0:	0e 94 a2 01 	call	0x344	; 0x344 <do_crc>
 3a4:	18 13       	cpse	r17, r24
 3a6:	0a c0       	rjmp	.+20     	; 0x3bc <process_data_for_package+0x52>
		{
			return *package;
 3a8:	85 e0       	ldi	r24, 0x05	; 5
 3aa:	e0 e2       	ldi	r30, 0x20	; 32
 3ac:	f1 e0       	ldi	r31, 0x01	; 1
 3ae:	de 01       	movw	r26, r28
 3b0:	11 96       	adiw	r26, 0x01	; 1
 3b2:	01 90       	ld	r0, Z+
 3b4:	0d 92       	st	X+, r0
 3b6:	8a 95       	dec	r24
 3b8:	e1 f7       	brne	.-8      	; 0x3b2 <process_data_for_package+0x48>
 3ba:	01 c0       	rjmp	.+2      	; 0x3be <process_data_for_package+0x54>
		}
	}
	super_paketet fail_return;
	fail_return.adress = 0;
	
	return fail_return;
 3bc:	19 82       	std	Y+1, r1	; 0x01
 3be:	29 81       	ldd	r18, Y+1	; 0x01
 3c0:	3a 81       	ldd	r19, Y+2	; 0x02
 3c2:	4b 81       	ldd	r20, Y+3	; 0x03
 3c4:	5c 81       	ldd	r21, Y+4	; 0x04
 3c6:	6d 81       	ldd	r22, Y+5	; 0x05
}
 3c8:	70 e0       	ldi	r23, 0x00	; 0
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	0f 90       	pop	r0
 3d0:	0f 90       	pop	r0
 3d2:	0f 90       	pop	r0
 3d4:	0f 90       	pop	r0
 3d6:	0f 90       	pop	r0
 3d8:	df 91       	pop	r29
 3da:	cf 91       	pop	r28
 3dc:	1f 91       	pop	r17
 3de:	08 95       	ret

000003e0 <check_for_package>:

//Fetch new packages if there is one
super_paketet check_for_package()
{
 3e0:	cf 93       	push	r28
 3e2:	df 93       	push	r29
 3e4:	cd b7       	in	r28, 0x3d	; 61
 3e6:	de b7       	in	r29, 0x3e	; 62
 3e8:	2b 97       	sbiw	r28, 0x0b	; 11
 3ea:	0f b6       	in	r0, 0x3f	; 63
 3ec:	f8 94       	cli
 3ee:	de bf       	out	0x3e, r29	; 62
 3f0:	0f be       	out	0x3f, r0	; 63
 3f2:	cd bf       	out	0x3d, r28	; 61
	char incomming_byte;
	//Check if we have data
	while (ReceiveByte(&incomming_byte))
 3f4:	14 c0       	rjmp	.+40     	; 0x41e <check_for_package+0x3e>
	{
		super_paketet incomming_package;
		//Send new data for processing
		incomming_package = process_data_for_package(incomming_byte);
 3f6:	8e 81       	ldd	r24, Y+6	; 0x06
 3f8:	0e 94 b5 01 	call	0x36a	; 0x36a <process_data_for_package>
 3fc:	2f 83       	std	Y+7, r18	; 0x07
 3fe:	38 87       	std	Y+8, r19	; 0x08
 400:	49 87       	std	Y+9, r20	; 0x09
 402:	5a 87       	std	Y+10, r21	; 0x0a
 404:	6b 87       	std	Y+11, r22	; 0x0b
		//Check if we got a package
		if (incomming_package.adress != 0)
 406:	22 23       	and	r18, r18
 408:	51 f0       	breq	.+20     	; 0x41e <check_for_package+0x3e>
		{
			return incomming_package;
 40a:	85 e0       	ldi	r24, 0x05	; 5
 40c:	fe 01       	movw	r30, r28
 40e:	37 96       	adiw	r30, 0x07	; 7
 410:	de 01       	movw	r26, r28
 412:	11 96       	adiw	r26, 0x01	; 1
 414:	01 90       	ld	r0, Z+
 416:	0d 92       	st	X+, r0
 418:	8a 95       	dec	r24
 41a:	e1 f7       	brne	.-8      	; 0x414 <check_for_package+0x34>
 41c:	07 c0       	rjmp	.+14     	; 0x42c <check_for_package+0x4c>
//Fetch new packages if there is one
super_paketet check_for_package()
{
	char incomming_byte;
	//Check if we have data
	while (ReceiveByte(&incomming_byte))
 41e:	ce 01       	movw	r24, r28
 420:	06 96       	adiw	r24, 0x06	; 6
 422:	0e 94 9d 02 	call	0x53a	; 0x53a <ReceiveByte>
 426:	81 11       	cpse	r24, r1
 428:	e6 cf       	rjmp	.-52     	; 0x3f6 <check_for_package+0x16>
		}
	}
	super_paketet fail_return;
	fail_return.adress = 0;
	
	return fail_return;
 42a:	19 82       	std	Y+1, r1	; 0x01
 42c:	29 81       	ldd	r18, Y+1	; 0x01
 42e:	3a 81       	ldd	r19, Y+2	; 0x02
 430:	4b 81       	ldd	r20, Y+3	; 0x03
 432:	5c 81       	ldd	r21, Y+4	; 0x04
 434:	6d 81       	ldd	r22, Y+5	; 0x05
}
 436:	70 e0       	ldi	r23, 0x00	; 0
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	2b 96       	adiw	r28, 0x0b	; 11
 43e:	0f b6       	in	r0, 0x3f	; 63
 440:	f8 94       	cli
 442:	de bf       	out	0x3e, r29	; 62
 444:	0f be       	out	0x3f, r0	; 63
 446:	cd bf       	out	0x3d, r28	; 61
 448:	df 91       	pop	r29
 44a:	cf 91       	pop	r28
 44c:	08 95       	ret

0000044e <__vector_19>:
#define release_lock()	sei()

//Usart transmit interrupt
//This interrupt is always called when UDR is empty
ISR(USART_UDRE_vect)
{
 44e:	1f 92       	push	r1
 450:	0f 92       	push	r0
 452:	0f b6       	in	r0, 0x3f	; 63
 454:	0f 92       	push	r0
 456:	11 24       	eor	r1, r1
 458:	2f 93       	push	r18
 45a:	8f 93       	push	r24
 45c:	9f 93       	push	r25
 45e:	ef 93       	push	r30
 460:	ff 93       	push	r31
	// check for empty transmit buffer	and if we have data
	if ( 0 != outgoing_data_counter)
 462:	80 91 27 01 	lds	r24, 0x0127
 466:	88 23       	and	r24, r24
 468:	09 f1       	breq	.+66     	; 0x4ac <__vector_19+0x5e>
	{
		outgoing_data_counter--;
 46a:	80 91 27 01 	lds	r24, 0x0127
 46e:	81 50       	subi	r24, 0x01	; 1
 470:	80 93 27 01 	sts	0x0127, r24
		UDR0 = *outgoing_data_head; 		// start transmition
 474:	e0 91 02 01 	lds	r30, 0x0102
 478:	f0 91 03 01 	lds	r31, 0x0103
 47c:	80 81       	ld	r24, Z
 47e:	80 93 c6 00 	sts	0x00C6, r24
		outgoing_data_head++;
 482:	80 91 02 01 	lds	r24, 0x0102
 486:	90 91 03 01 	lds	r25, 0x0103
 48a:	01 96       	adiw	r24, 0x01	; 1
		if (outgoing_data_head >= (outgoing_data + USART_TX_BUFFER_SIZE))
 48c:	21 e0       	ldi	r18, 0x01	; 1
 48e:	8e 3f       	cpi	r24, 0xFE	; 254
 490:	92 07       	cpc	r25, r18
 492:	28 f4       	brcc	.+10     	; 0x49e <__vector_19+0x50>
	// check for empty transmit buffer	and if we have data
	if ( 0 != outgoing_data_counter)
	{
		outgoing_data_counter--;
		UDR0 = *outgoing_data_head; 		// start transmition
		outgoing_data_head++;
 494:	90 93 03 01 	sts	0x0103, r25
 498:	80 93 02 01 	sts	0x0102, r24
 49c:	0c c0       	rjmp	.+24     	; 0x4b6 <__vector_19+0x68>
		if (outgoing_data_head >= (outgoing_data + USART_TX_BUFFER_SIZE))
		{
			outgoing_data_head = outgoing_data;	//reset ring buffer
 49e:	8a e9       	ldi	r24, 0x9A	; 154
 4a0:	91 e0       	ldi	r25, 0x01	; 1
 4a2:	90 93 03 01 	sts	0x0103, r25
 4a6:	80 93 02 01 	sts	0x0102, r24
 4aa:	05 c0       	rjmp	.+10     	; 0x4b6 <__vector_19+0x68>
		}
	}else{
		//Inactivate interrupt
		UCSR0B &= ~(1 << UDRIE0);
 4ac:	e1 ec       	ldi	r30, 0xC1	; 193
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	80 81       	ld	r24, Z
 4b2:	8f 7d       	andi	r24, 0xDF	; 223
 4b4:	80 83       	st	Z, r24
		
	}
}
 4b6:	ff 91       	pop	r31
 4b8:	ef 91       	pop	r30
 4ba:	9f 91       	pop	r25
 4bc:	8f 91       	pop	r24
 4be:	2f 91       	pop	r18
 4c0:	0f 90       	pop	r0
 4c2:	0f be       	out	0x3f, r0	; 63
 4c4:	0f 90       	pop	r0
 4c6:	1f 90       	pop	r1
 4c8:	18 95       	reti

000004ca <__vector_18>:
//Usart receive interrupt
ISR(USART_RX_vect)
{
 4ca:	1f 92       	push	r1
 4cc:	0f 92       	push	r0
 4ce:	0f b6       	in	r0, 0x3f	; 63
 4d0:	0f 92       	push	r0
 4d2:	11 24       	eor	r1, r1
 4d4:	2f 93       	push	r18
 4d6:	8f 93       	push	r24
 4d8:	9f 93       	push	r25
 4da:	ef 93       	push	r30
 4dc:	ff 93       	push	r31
	//place char into buffer
	*incomming_data_head = UDR0;	//Read from UDR gets RX byte
 4de:	e0 91 00 01 	lds	r30, 0x0100
 4e2:	f0 91 01 01 	lds	r31, 0x0101
 4e6:	80 91 c6 00 	lds	r24, 0x00C6
 4ea:	80 83       	st	Z, r24
	
	//increase head
	incomming_data_head++;
 4ec:	80 91 00 01 	lds	r24, 0x0100
 4f0:	90 91 01 01 	lds	r25, 0x0101
 4f4:	01 96       	adiw	r24, 0x01	; 1
	
	
	//Check for overflow head
	if (incomming_data_head >= (incomming_data + USART_RX_BUFFER_SIZE))
 4f6:	21 e0       	ldi	r18, 0x01	; 1
 4f8:	8a 39       	cpi	r24, 0x9A	; 154
 4fa:	92 07       	cpc	r25, r18
 4fc:	28 f4       	brcc	.+10     	; 0x508 <__vector_18+0x3e>
{
	//place char into buffer
	*incomming_data_head = UDR0;	//Read from UDR gets RX byte
	
	//increase head
	incomming_data_head++;
 4fe:	90 93 01 01 	sts	0x0101, r25
 502:	80 93 00 01 	sts	0x0100, r24
 506:	06 c0       	rjmp	.+12     	; 0x514 <__vector_18+0x4a>
	
	//Check for overflow head
	if (incomming_data_head >= (incomming_data + USART_RX_BUFFER_SIZE))
	{
		//End of ring, go around
		incomming_data_head = incomming_data;
 508:	86 e3       	ldi	r24, 0x36	; 54
 50a:	91 e0       	ldi	r25, 0x01	; 1
 50c:	90 93 01 01 	sts	0x0101, r25
 510:	80 93 00 01 	sts	0x0100, r24
	}
	//Check for overflow counter
	if(incomming_data_counter < USART_RX_BUFFER_SIZE)
 514:	80 91 26 01 	lds	r24, 0x0126
 518:	84 36       	cpi	r24, 0x64	; 100
 51a:	28 f4       	brcc	.+10     	; 0x526 <__vector_18+0x5c>
	{
		incomming_data_counter++;
 51c:	80 91 26 01 	lds	r24, 0x0126
 520:	8f 5f       	subi	r24, 0xFF	; 255
 522:	80 93 26 01 	sts	0x0126, r24
	}
}
 526:	ff 91       	pop	r31
 528:	ef 91       	pop	r30
 52a:	9f 91       	pop	r25
 52c:	8f 91       	pop	r24
 52e:	2f 91       	pop	r18
 530:	0f 90       	pop	r0
 532:	0f be       	out	0x3f, r0	; 63
 534:	0f 90       	pop	r0
 536:	1f 90       	pop	r1
 538:	18 95       	reti

0000053a <ReceiveByte>:

/* Read and write functions */
char ReceiveByte(char * result)
{
	get_lock();
 53a:	f8 94       	cli
	//If we have data
	if (incomming_data_counter > 0)
 53c:	20 91 26 01 	lds	r18, 0x0126
 540:	22 23       	and	r18, r18
 542:	c9 f0       	breq	.+50     	; 0x576 <ReceiveByte+0x3c>
	{
		//Assign pointer to data 
		//Read buffer in reverse because we add positive
		volatile char * temp = incomming_data_head - incomming_data_counter;
 544:	20 91 26 01 	lds	r18, 0x0126
 548:	e0 91 00 01 	lds	r30, 0x0100
 54c:	f0 91 01 01 	lds	r31, 0x0101
 550:	e2 1b       	sub	r30, r18
 552:	f1 09       	sbc	r31, r1
		
		//Check pointer for overflow
		if (temp < incomming_data )
 554:	21 e0       	ldi	r18, 0x01	; 1
 556:	e6 33       	cpi	r30, 0x36	; 54
 558:	f2 07       	cpc	r31, r18
 55a:	10 f4       	brcc	.+4      	; 0x560 <ReceiveByte+0x26>
		{
			temp += USART_RX_BUFFER_SIZE;	//Wrap around
 55c:	ec 59       	subi	r30, 0x9C	; 156
 55e:	ff 4f       	sbci	r31, 0xFF	; 255
		}
		//Decrease counter
		incomming_data_counter--;
 560:	20 91 26 01 	lds	r18, 0x0126
 564:	21 50       	subi	r18, 0x01	; 1
 566:	20 93 26 01 	sts	0x0126, r18

		//return that data
		*result = *temp;
 56a:	20 81       	ld	r18, Z
 56c:	fc 01       	movw	r30, r24
 56e:	20 83       	st	Z, r18
		release_lock();
 570:	78 94       	sei
		
		return 1;
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	08 95       	ret
	} 
	else
	{
		//Else fail
		release_lock();
 576:	78 94       	sei
		return 0;								// return the data
 578:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 57a:	08 95       	ret

0000057c <send_c>:
	return temp;
}

void send_c(char c)
{
	get_lock();
 57c:	f8 94       	cli
	volatile char * temp = (outgoing_data_head + outgoing_data_counter);
 57e:	90 91 27 01 	lds	r25, 0x0127
 582:	e0 91 02 01 	lds	r30, 0x0102
 586:	f0 91 03 01 	lds	r31, 0x0103
 58a:	e9 0f       	add	r30, r25
 58c:	f1 1d       	adc	r31, r1
	
	//Check for overflow
	if (temp >= (outgoing_data + USART_TX_BUFFER_SIZE))
 58e:	91 e0       	ldi	r25, 0x01	; 1
 590:	ee 3f       	cpi	r30, 0xFE	; 254
 592:	f9 07       	cpc	r31, r25
 594:	10 f0       	brcs	.+4      	; 0x59a <send_c+0x1e>
	{
		temp -= USART_TX_BUFFER_SIZE;
 596:	e4 56       	subi	r30, 0x64	; 100
 598:	f1 09       	sbc	r31, r1
	}

	*temp = c;		//add to queue
 59a:	80 83       	st	Z, r24
	outgoing_data_counter++;
 59c:	80 91 27 01 	lds	r24, 0x0127
 5a0:	8f 5f       	subi	r24, 0xFF	; 255
 5a2:	80 93 27 01 	sts	0x0127, r24
	//Activate TX interrupt
	UCSR0B |= (1 << UDRIE0);
 5a6:	e1 ec       	ldi	r30, 0xC1	; 193
 5a8:	f0 e0       	ldi	r31, 0x00	; 0
 5aa:	80 81       	ld	r24, Z
 5ac:	80 62       	ori	r24, 0x20	; 32
 5ae:	80 83       	st	Z, r24
	release_lock();
 5b0:	78 94       	sei
 5b2:	08 95       	ret

000005b4 <send_string>:
}

int8_t send_string(char data[], uint8_t length)
{
 5b4:	0f 93       	push	r16
 5b6:	1f 93       	push	r17
 5b8:	cf 93       	push	r28
 5ba:	df 93       	push	r29
 5bc:	06 2f       	mov	r16, r22
	if (data == 0)	//Check for valid pointer
 5be:	00 97       	sbiw	r24, 0x00	; 0
 5c0:	99 f0       	breq	.+38     	; 0x5e8 <send_string+0x34>
	{
		return -1;
	}
	//Check for space in buffer
	if ((length + outgoing_data_counter )>= USART_TX_BUFFER_SIZE)
 5c2:	20 91 27 01 	lds	r18, 0x0127
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	26 0f       	add	r18, r22
 5ca:	31 1d       	adc	r19, r1
 5cc:	24 36       	cpi	r18, 0x64	; 100
 5ce:	31 05       	cpc	r19, r1
 5d0:	6c f4       	brge	.+26     	; 0x5ec <send_string+0x38>
	{
		return -2;
	}
	//All good, add to buffer
	for (uint8_t i = 0; i < length; i++ )
 5d2:	66 23       	and	r22, r22
 5d4:	69 f0       	breq	.+26     	; 0x5f0 <send_string+0x3c>
 5d6:	ec 01       	movw	r28, r24
 5d8:	10 e0       	ldi	r17, 0x00	; 0
	{
		send_c(data[i]);
 5da:	89 91       	ld	r24, Y+
 5dc:	0e 94 be 02 	call	0x57c	; 0x57c <send_c>
	if ((length + outgoing_data_counter )>= USART_TX_BUFFER_SIZE)
	{
		return -2;
	}
	//All good, add to buffer
	for (uint8_t i = 0; i < length; i++ )
 5e0:	1f 5f       	subi	r17, 0xFF	; 255
 5e2:	10 13       	cpse	r17, r16
 5e4:	fa cf       	rjmp	.-12     	; 0x5da <send_string+0x26>
 5e6:	06 c0       	rjmp	.+12     	; 0x5f4 <send_string+0x40>

int8_t send_string(char data[], uint8_t length)
{
	if (data == 0)	//Check for valid pointer
	{
		return -1;
 5e8:	8f ef       	ldi	r24, 0xFF	; 255
 5ea:	05 c0       	rjmp	.+10     	; 0x5f6 <send_string+0x42>
	}
	//Check for space in buffer
	if ((length + outgoing_data_counter )>= USART_TX_BUFFER_SIZE)
	{
		return -2;
 5ec:	8e ef       	ldi	r24, 0xFE	; 254
 5ee:	03 c0       	rjmp	.+6      	; 0x5f6 <send_string+0x42>
	for (uint8_t i = 0; i < length; i++ )
	{
		send_c(data[i]);
	}
	
	return 0;
 5f0:	80 e0       	ldi	r24, 0x00	; 0
 5f2:	01 c0       	rjmp	.+2      	; 0x5f6 <send_string+0x42>
 5f4:	80 e0       	ldi	r24, 0x00	; 0
} 
 5f6:	df 91       	pop	r29
 5f8:	cf 91       	pop	r28
 5fa:	1f 91       	pop	r17
 5fc:	0f 91       	pop	r16
 5fe:	08 95       	ret

00000600 <__udivmodsi4>:
 600:	a1 e2       	ldi	r26, 0x21	; 33
 602:	1a 2e       	mov	r1, r26
 604:	aa 1b       	sub	r26, r26
 606:	bb 1b       	sub	r27, r27
 608:	fd 01       	movw	r30, r26
 60a:	0d c0       	rjmp	.+26     	; 0x626 <__udivmodsi4_ep>

0000060c <__udivmodsi4_loop>:
 60c:	aa 1f       	adc	r26, r26
 60e:	bb 1f       	adc	r27, r27
 610:	ee 1f       	adc	r30, r30
 612:	ff 1f       	adc	r31, r31
 614:	a2 17       	cp	r26, r18
 616:	b3 07       	cpc	r27, r19
 618:	e4 07       	cpc	r30, r20
 61a:	f5 07       	cpc	r31, r21
 61c:	20 f0       	brcs	.+8      	; 0x626 <__udivmodsi4_ep>
 61e:	a2 1b       	sub	r26, r18
 620:	b3 0b       	sbc	r27, r19
 622:	e4 0b       	sbc	r30, r20
 624:	f5 0b       	sbc	r31, r21

00000626 <__udivmodsi4_ep>:
 626:	66 1f       	adc	r22, r22
 628:	77 1f       	adc	r23, r23
 62a:	88 1f       	adc	r24, r24
 62c:	99 1f       	adc	r25, r25
 62e:	1a 94       	dec	r1
 630:	69 f7       	brne	.-38     	; 0x60c <__udivmodsi4_loop>
 632:	60 95       	com	r22
 634:	70 95       	com	r23
 636:	80 95       	com	r24
 638:	90 95       	com	r25
 63a:	9b 01       	movw	r18, r22
 63c:	ac 01       	movw	r20, r24
 63e:	bd 01       	movw	r22, r26
 640:	cf 01       	movw	r24, r30
 642:	08 95       	ret

00000644 <printf>:
 644:	a0 e0       	ldi	r26, 0x00	; 0
 646:	b0 e0       	ldi	r27, 0x00	; 0
 648:	e8 e2       	ldi	r30, 0x28	; 40
 64a:	f3 e0       	ldi	r31, 0x03	; 3
 64c:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__prologue_saves__+0x20>
 650:	fe 01       	movw	r30, r28
 652:	35 96       	adiw	r30, 0x05	; 5
 654:	61 91       	ld	r22, Z+
 656:	71 91       	ld	r23, Z+
 658:	af 01       	movw	r20, r30
 65a:	80 91 00 02 	lds	r24, 0x0200
 65e:	90 91 01 02 	lds	r25, 0x0201
 662:	0e 94 36 03 	call	0x66c	; 0x66c <vfprintf>
 666:	e2 e0       	ldi	r30, 0x02	; 2
 668:	0c 94 da 05 	jmp	0xbb4	; 0xbb4 <__epilogue_restores__+0x20>

0000066c <vfprintf>:
 66c:	ac e0       	ldi	r26, 0x0C	; 12
 66e:	b0 e0       	ldi	r27, 0x00	; 0
 670:	ec e3       	ldi	r30, 0x3C	; 60
 672:	f3 e0       	ldi	r31, 0x03	; 3
 674:	0c 94 ae 05 	jmp	0xb5c	; 0xb5c <__prologue_saves__>
 678:	7c 01       	movw	r14, r24
 67a:	6b 01       	movw	r12, r22
 67c:	8a 01       	movw	r16, r20
 67e:	fc 01       	movw	r30, r24
 680:	17 82       	std	Z+7, r1	; 0x07
 682:	16 82       	std	Z+6, r1	; 0x06
 684:	83 81       	ldd	r24, Z+3	; 0x03
 686:	81 ff       	sbrs	r24, 1
 688:	bd c1       	rjmp	.+890    	; 0xa04 <__stack+0x105>
 68a:	ce 01       	movw	r24, r28
 68c:	01 96       	adiw	r24, 0x01	; 1
 68e:	4c 01       	movw	r8, r24
 690:	f7 01       	movw	r30, r14
 692:	93 81       	ldd	r25, Z+3	; 0x03
 694:	f6 01       	movw	r30, r12
 696:	93 fd       	sbrc	r25, 3
 698:	85 91       	lpm	r24, Z+
 69a:	93 ff       	sbrs	r25, 3
 69c:	81 91       	ld	r24, Z+
 69e:	6f 01       	movw	r12, r30
 6a0:	88 23       	and	r24, r24
 6a2:	09 f4       	brne	.+2      	; 0x6a6 <vfprintf+0x3a>
 6a4:	ab c1       	rjmp	.+854    	; 0x9fc <__stack+0xfd>
 6a6:	85 32       	cpi	r24, 0x25	; 37
 6a8:	39 f4       	brne	.+14     	; 0x6b8 <vfprintf+0x4c>
 6aa:	93 fd       	sbrc	r25, 3
 6ac:	85 91       	lpm	r24, Z+
 6ae:	93 ff       	sbrs	r25, 3
 6b0:	81 91       	ld	r24, Z+
 6b2:	6f 01       	movw	r12, r30
 6b4:	85 32       	cpi	r24, 0x25	; 37
 6b6:	29 f4       	brne	.+10     	; 0x6c2 <vfprintf+0x56>
 6b8:	b7 01       	movw	r22, r14
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	0e 94 1e 05 	call	0xa3c	; 0xa3c <fputc>
 6c0:	e7 cf       	rjmp	.-50     	; 0x690 <vfprintf+0x24>
 6c2:	51 2c       	mov	r5, r1
 6c4:	31 2c       	mov	r3, r1
 6c6:	20 e0       	ldi	r18, 0x00	; 0
 6c8:	20 32       	cpi	r18, 0x20	; 32
 6ca:	a0 f4       	brcc	.+40     	; 0x6f4 <vfprintf+0x88>
 6cc:	8b 32       	cpi	r24, 0x2B	; 43
 6ce:	69 f0       	breq	.+26     	; 0x6ea <vfprintf+0x7e>
 6d0:	30 f4       	brcc	.+12     	; 0x6de <vfprintf+0x72>
 6d2:	80 32       	cpi	r24, 0x20	; 32
 6d4:	59 f0       	breq	.+22     	; 0x6ec <vfprintf+0x80>
 6d6:	83 32       	cpi	r24, 0x23	; 35
 6d8:	69 f4       	brne	.+26     	; 0x6f4 <vfprintf+0x88>
 6da:	20 61       	ori	r18, 0x10	; 16
 6dc:	2c c0       	rjmp	.+88     	; 0x736 <vfprintf+0xca>
 6de:	8d 32       	cpi	r24, 0x2D	; 45
 6e0:	39 f0       	breq	.+14     	; 0x6f0 <vfprintf+0x84>
 6e2:	80 33       	cpi	r24, 0x30	; 48
 6e4:	39 f4       	brne	.+14     	; 0x6f4 <vfprintf+0x88>
 6e6:	21 60       	ori	r18, 0x01	; 1
 6e8:	26 c0       	rjmp	.+76     	; 0x736 <vfprintf+0xca>
 6ea:	22 60       	ori	r18, 0x02	; 2
 6ec:	24 60       	ori	r18, 0x04	; 4
 6ee:	23 c0       	rjmp	.+70     	; 0x736 <vfprintf+0xca>
 6f0:	28 60       	ori	r18, 0x08	; 8
 6f2:	21 c0       	rjmp	.+66     	; 0x736 <vfprintf+0xca>
 6f4:	27 fd       	sbrc	r18, 7
 6f6:	27 c0       	rjmp	.+78     	; 0x746 <vfprintf+0xda>
 6f8:	30 ed       	ldi	r19, 0xD0	; 208
 6fa:	38 0f       	add	r19, r24
 6fc:	3a 30       	cpi	r19, 0x0A	; 10
 6fe:	78 f4       	brcc	.+30     	; 0x71e <vfprintf+0xb2>
 700:	26 ff       	sbrs	r18, 6
 702:	06 c0       	rjmp	.+12     	; 0x710 <vfprintf+0xa4>
 704:	fa e0       	ldi	r31, 0x0A	; 10
 706:	5f 9e       	mul	r5, r31
 708:	30 0d       	add	r19, r0
 70a:	11 24       	eor	r1, r1
 70c:	53 2e       	mov	r5, r19
 70e:	13 c0       	rjmp	.+38     	; 0x736 <vfprintf+0xca>
 710:	8a e0       	ldi	r24, 0x0A	; 10
 712:	38 9e       	mul	r3, r24
 714:	30 0d       	add	r19, r0
 716:	11 24       	eor	r1, r1
 718:	33 2e       	mov	r3, r19
 71a:	20 62       	ori	r18, 0x20	; 32
 71c:	0c c0       	rjmp	.+24     	; 0x736 <vfprintf+0xca>
 71e:	8e 32       	cpi	r24, 0x2E	; 46
 720:	21 f4       	brne	.+8      	; 0x72a <vfprintf+0xbe>
 722:	26 fd       	sbrc	r18, 6
 724:	6b c1       	rjmp	.+726    	; 0x9fc <__stack+0xfd>
 726:	20 64       	ori	r18, 0x40	; 64
 728:	06 c0       	rjmp	.+12     	; 0x736 <vfprintf+0xca>
 72a:	8c 36       	cpi	r24, 0x6C	; 108
 72c:	11 f4       	brne	.+4      	; 0x732 <vfprintf+0xc6>
 72e:	20 68       	ori	r18, 0x80	; 128
 730:	02 c0       	rjmp	.+4      	; 0x736 <vfprintf+0xca>
 732:	88 36       	cpi	r24, 0x68	; 104
 734:	41 f4       	brne	.+16     	; 0x746 <vfprintf+0xda>
 736:	f6 01       	movw	r30, r12
 738:	93 fd       	sbrc	r25, 3
 73a:	85 91       	lpm	r24, Z+
 73c:	93 ff       	sbrs	r25, 3
 73e:	81 91       	ld	r24, Z+
 740:	6f 01       	movw	r12, r30
 742:	81 11       	cpse	r24, r1
 744:	c1 cf       	rjmp	.-126    	; 0x6c8 <vfprintf+0x5c>
 746:	98 2f       	mov	r25, r24
 748:	9f 7d       	andi	r25, 0xDF	; 223
 74a:	95 54       	subi	r25, 0x45	; 69
 74c:	93 30       	cpi	r25, 0x03	; 3
 74e:	28 f4       	brcc	.+10     	; 0x75a <vfprintf+0xee>
 750:	0c 5f       	subi	r16, 0xFC	; 252
 752:	1f 4f       	sbci	r17, 0xFF	; 255
 754:	ff e3       	ldi	r31, 0x3F	; 63
 756:	f9 83       	std	Y+1, r31	; 0x01
 758:	0d c0       	rjmp	.+26     	; 0x774 <vfprintf+0x108>
 75a:	83 36       	cpi	r24, 0x63	; 99
 75c:	31 f0       	breq	.+12     	; 0x76a <vfprintf+0xfe>
 75e:	83 37       	cpi	r24, 0x73	; 115
 760:	71 f0       	breq	.+28     	; 0x77e <vfprintf+0x112>
 762:	83 35       	cpi	r24, 0x53	; 83
 764:	09 f0       	breq	.+2      	; 0x768 <vfprintf+0xfc>
 766:	5b c0       	rjmp	.+182    	; 0x81e <vfprintf+0x1b2>
 768:	22 c0       	rjmp	.+68     	; 0x7ae <vfprintf+0x142>
 76a:	f8 01       	movw	r30, r16
 76c:	80 81       	ld	r24, Z
 76e:	89 83       	std	Y+1, r24	; 0x01
 770:	0e 5f       	subi	r16, 0xFE	; 254
 772:	1f 4f       	sbci	r17, 0xFF	; 255
 774:	44 24       	eor	r4, r4
 776:	43 94       	inc	r4
 778:	51 2c       	mov	r5, r1
 77a:	54 01       	movw	r10, r8
 77c:	15 c0       	rjmp	.+42     	; 0x7a8 <vfprintf+0x13c>
 77e:	38 01       	movw	r6, r16
 780:	f2 e0       	ldi	r31, 0x02	; 2
 782:	6f 0e       	add	r6, r31
 784:	71 1c       	adc	r7, r1
 786:	f8 01       	movw	r30, r16
 788:	a0 80       	ld	r10, Z
 78a:	b1 80       	ldd	r11, Z+1	; 0x01
 78c:	26 ff       	sbrs	r18, 6
 78e:	03 c0       	rjmp	.+6      	; 0x796 <vfprintf+0x12a>
 790:	65 2d       	mov	r22, r5
 792:	70 e0       	ldi	r23, 0x00	; 0
 794:	02 c0       	rjmp	.+4      	; 0x79a <vfprintf+0x12e>
 796:	6f ef       	ldi	r22, 0xFF	; 255
 798:	7f ef       	ldi	r23, 0xFF	; 255
 79a:	c5 01       	movw	r24, r10
 79c:	2c 87       	std	Y+12, r18	; 0x0c
 79e:	0e 94 13 05 	call	0xa26	; 0xa26 <strnlen>
 7a2:	2c 01       	movw	r4, r24
 7a4:	83 01       	movw	r16, r6
 7a6:	2c 85       	ldd	r18, Y+12	; 0x0c
 7a8:	2f 77       	andi	r18, 0x7F	; 127
 7aa:	22 2e       	mov	r2, r18
 7ac:	17 c0       	rjmp	.+46     	; 0x7dc <vfprintf+0x170>
 7ae:	38 01       	movw	r6, r16
 7b0:	f2 e0       	ldi	r31, 0x02	; 2
 7b2:	6f 0e       	add	r6, r31
 7b4:	71 1c       	adc	r7, r1
 7b6:	f8 01       	movw	r30, r16
 7b8:	a0 80       	ld	r10, Z
 7ba:	b1 80       	ldd	r11, Z+1	; 0x01
 7bc:	26 ff       	sbrs	r18, 6
 7be:	03 c0       	rjmp	.+6      	; 0x7c6 <vfprintf+0x15a>
 7c0:	65 2d       	mov	r22, r5
 7c2:	70 e0       	ldi	r23, 0x00	; 0
 7c4:	02 c0       	rjmp	.+4      	; 0x7ca <vfprintf+0x15e>
 7c6:	6f ef       	ldi	r22, 0xFF	; 255
 7c8:	7f ef       	ldi	r23, 0xFF	; 255
 7ca:	c5 01       	movw	r24, r10
 7cc:	2c 87       	std	Y+12, r18	; 0x0c
 7ce:	0e 94 08 05 	call	0xa10	; 0xa10 <strnlen_P>
 7d2:	2c 01       	movw	r4, r24
 7d4:	2c 85       	ldd	r18, Y+12	; 0x0c
 7d6:	20 68       	ori	r18, 0x80	; 128
 7d8:	22 2e       	mov	r2, r18
 7da:	83 01       	movw	r16, r6
 7dc:	23 fc       	sbrc	r2, 3
 7de:	1b c0       	rjmp	.+54     	; 0x816 <vfprintf+0x1aa>
 7e0:	83 2d       	mov	r24, r3
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	48 16       	cp	r4, r24
 7e6:	59 06       	cpc	r5, r25
 7e8:	b0 f4       	brcc	.+44     	; 0x816 <vfprintf+0x1aa>
 7ea:	b7 01       	movw	r22, r14
 7ec:	80 e2       	ldi	r24, 0x20	; 32
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	0e 94 1e 05 	call	0xa3c	; 0xa3c <fputc>
 7f4:	3a 94       	dec	r3
 7f6:	f4 cf       	rjmp	.-24     	; 0x7e0 <vfprintf+0x174>
 7f8:	f5 01       	movw	r30, r10
 7fa:	27 fc       	sbrc	r2, 7
 7fc:	85 91       	lpm	r24, Z+
 7fe:	27 fe       	sbrs	r2, 7
 800:	81 91       	ld	r24, Z+
 802:	5f 01       	movw	r10, r30
 804:	b7 01       	movw	r22, r14
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	0e 94 1e 05 	call	0xa3c	; 0xa3c <fputc>
 80c:	31 10       	cpse	r3, r1
 80e:	3a 94       	dec	r3
 810:	f1 e0       	ldi	r31, 0x01	; 1
 812:	4f 1a       	sub	r4, r31
 814:	51 08       	sbc	r5, r1
 816:	41 14       	cp	r4, r1
 818:	51 04       	cpc	r5, r1
 81a:	71 f7       	brne	.-36     	; 0x7f8 <vfprintf+0x18c>
 81c:	e5 c0       	rjmp	.+458    	; 0x9e8 <__stack+0xe9>
 81e:	84 36       	cpi	r24, 0x64	; 100
 820:	11 f0       	breq	.+4      	; 0x826 <vfprintf+0x1ba>
 822:	89 36       	cpi	r24, 0x69	; 105
 824:	39 f5       	brne	.+78     	; 0x874 <vfprintf+0x208>
 826:	f8 01       	movw	r30, r16
 828:	27 ff       	sbrs	r18, 7
 82a:	07 c0       	rjmp	.+14     	; 0x83a <vfprintf+0x1ce>
 82c:	60 81       	ld	r22, Z
 82e:	71 81       	ldd	r23, Z+1	; 0x01
 830:	82 81       	ldd	r24, Z+2	; 0x02
 832:	93 81       	ldd	r25, Z+3	; 0x03
 834:	0c 5f       	subi	r16, 0xFC	; 252
 836:	1f 4f       	sbci	r17, 0xFF	; 255
 838:	08 c0       	rjmp	.+16     	; 0x84a <vfprintf+0x1de>
 83a:	60 81       	ld	r22, Z
 83c:	71 81       	ldd	r23, Z+1	; 0x01
 83e:	88 27       	eor	r24, r24
 840:	77 fd       	sbrc	r23, 7
 842:	80 95       	com	r24
 844:	98 2f       	mov	r25, r24
 846:	0e 5f       	subi	r16, 0xFE	; 254
 848:	1f 4f       	sbci	r17, 0xFF	; 255
 84a:	2f 76       	andi	r18, 0x6F	; 111
 84c:	b2 2e       	mov	r11, r18
 84e:	97 ff       	sbrs	r25, 7
 850:	09 c0       	rjmp	.+18     	; 0x864 <vfprintf+0x1f8>
 852:	90 95       	com	r25
 854:	80 95       	com	r24
 856:	70 95       	com	r23
 858:	61 95       	neg	r22
 85a:	7f 4f       	sbci	r23, 0xFF	; 255
 85c:	8f 4f       	sbci	r24, 0xFF	; 255
 85e:	9f 4f       	sbci	r25, 0xFF	; 255
 860:	20 68       	ori	r18, 0x80	; 128
 862:	b2 2e       	mov	r11, r18
 864:	2a e0       	ldi	r18, 0x0A	; 10
 866:	30 e0       	ldi	r19, 0x00	; 0
 868:	a4 01       	movw	r20, r8
 86a:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__ultoa_invert>
 86e:	a8 2e       	mov	r10, r24
 870:	a8 18       	sub	r10, r8
 872:	44 c0       	rjmp	.+136    	; 0x8fc <vfprintf+0x290>
 874:	85 37       	cpi	r24, 0x75	; 117
 876:	29 f4       	brne	.+10     	; 0x882 <vfprintf+0x216>
 878:	2f 7e       	andi	r18, 0xEF	; 239
 87a:	b2 2e       	mov	r11, r18
 87c:	2a e0       	ldi	r18, 0x0A	; 10
 87e:	30 e0       	ldi	r19, 0x00	; 0
 880:	25 c0       	rjmp	.+74     	; 0x8cc <vfprintf+0x260>
 882:	f2 2f       	mov	r31, r18
 884:	f9 7f       	andi	r31, 0xF9	; 249
 886:	bf 2e       	mov	r11, r31
 888:	8f 36       	cpi	r24, 0x6F	; 111
 88a:	c1 f0       	breq	.+48     	; 0x8bc <vfprintf+0x250>
 88c:	18 f4       	brcc	.+6      	; 0x894 <vfprintf+0x228>
 88e:	88 35       	cpi	r24, 0x58	; 88
 890:	79 f0       	breq	.+30     	; 0x8b0 <vfprintf+0x244>
 892:	b4 c0       	rjmp	.+360    	; 0x9fc <__stack+0xfd>
 894:	80 37       	cpi	r24, 0x70	; 112
 896:	19 f0       	breq	.+6      	; 0x89e <vfprintf+0x232>
 898:	88 37       	cpi	r24, 0x78	; 120
 89a:	21 f0       	breq	.+8      	; 0x8a4 <vfprintf+0x238>
 89c:	af c0       	rjmp	.+350    	; 0x9fc <__stack+0xfd>
 89e:	2f 2f       	mov	r18, r31
 8a0:	20 61       	ori	r18, 0x10	; 16
 8a2:	b2 2e       	mov	r11, r18
 8a4:	b4 fe       	sbrs	r11, 4
 8a6:	0d c0       	rjmp	.+26     	; 0x8c2 <vfprintf+0x256>
 8a8:	8b 2d       	mov	r24, r11
 8aa:	84 60       	ori	r24, 0x04	; 4
 8ac:	b8 2e       	mov	r11, r24
 8ae:	09 c0       	rjmp	.+18     	; 0x8c2 <vfprintf+0x256>
 8b0:	24 ff       	sbrs	r18, 4
 8b2:	0a c0       	rjmp	.+20     	; 0x8c8 <vfprintf+0x25c>
 8b4:	9f 2f       	mov	r25, r31
 8b6:	96 60       	ori	r25, 0x06	; 6
 8b8:	b9 2e       	mov	r11, r25
 8ba:	06 c0       	rjmp	.+12     	; 0x8c8 <vfprintf+0x25c>
 8bc:	28 e0       	ldi	r18, 0x08	; 8
 8be:	30 e0       	ldi	r19, 0x00	; 0
 8c0:	05 c0       	rjmp	.+10     	; 0x8cc <vfprintf+0x260>
 8c2:	20 e1       	ldi	r18, 0x10	; 16
 8c4:	30 e0       	ldi	r19, 0x00	; 0
 8c6:	02 c0       	rjmp	.+4      	; 0x8cc <vfprintf+0x260>
 8c8:	20 e1       	ldi	r18, 0x10	; 16
 8ca:	32 e0       	ldi	r19, 0x02	; 2
 8cc:	f8 01       	movw	r30, r16
 8ce:	b7 fe       	sbrs	r11, 7
 8d0:	07 c0       	rjmp	.+14     	; 0x8e0 <vfprintf+0x274>
 8d2:	60 81       	ld	r22, Z
 8d4:	71 81       	ldd	r23, Z+1	; 0x01
 8d6:	82 81       	ldd	r24, Z+2	; 0x02
 8d8:	93 81       	ldd	r25, Z+3	; 0x03
 8da:	0c 5f       	subi	r16, 0xFC	; 252
 8dc:	1f 4f       	sbci	r17, 0xFF	; 255
 8de:	06 c0       	rjmp	.+12     	; 0x8ec <vfprintf+0x280>
 8e0:	60 81       	ld	r22, Z
 8e2:	71 81       	ldd	r23, Z+1	; 0x01
 8e4:	80 e0       	ldi	r24, 0x00	; 0
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	0e 5f       	subi	r16, 0xFE	; 254
 8ea:	1f 4f       	sbci	r17, 0xFF	; 255
 8ec:	a4 01       	movw	r20, r8
 8ee:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__ultoa_invert>
 8f2:	a8 2e       	mov	r10, r24
 8f4:	a8 18       	sub	r10, r8
 8f6:	fb 2d       	mov	r31, r11
 8f8:	ff 77       	andi	r31, 0x7F	; 127
 8fa:	bf 2e       	mov	r11, r31
 8fc:	b6 fe       	sbrs	r11, 6
 8fe:	0b c0       	rjmp	.+22     	; 0x916 <__stack+0x17>
 900:	2b 2d       	mov	r18, r11
 902:	2e 7f       	andi	r18, 0xFE	; 254
 904:	a5 14       	cp	r10, r5
 906:	50 f4       	brcc	.+20     	; 0x91c <__stack+0x1d>
 908:	b4 fe       	sbrs	r11, 4
 90a:	0a c0       	rjmp	.+20     	; 0x920 <__stack+0x21>
 90c:	b2 fc       	sbrc	r11, 2
 90e:	08 c0       	rjmp	.+16     	; 0x920 <__stack+0x21>
 910:	2b 2d       	mov	r18, r11
 912:	2e 7e       	andi	r18, 0xEE	; 238
 914:	05 c0       	rjmp	.+10     	; 0x920 <__stack+0x21>
 916:	7a 2c       	mov	r7, r10
 918:	2b 2d       	mov	r18, r11
 91a:	03 c0       	rjmp	.+6      	; 0x922 <__stack+0x23>
 91c:	7a 2c       	mov	r7, r10
 91e:	01 c0       	rjmp	.+2      	; 0x922 <__stack+0x23>
 920:	75 2c       	mov	r7, r5
 922:	24 ff       	sbrs	r18, 4
 924:	0d c0       	rjmp	.+26     	; 0x940 <__stack+0x41>
 926:	fe 01       	movw	r30, r28
 928:	ea 0d       	add	r30, r10
 92a:	f1 1d       	adc	r31, r1
 92c:	80 81       	ld	r24, Z
 92e:	80 33       	cpi	r24, 0x30	; 48
 930:	11 f4       	brne	.+4      	; 0x936 <__stack+0x37>
 932:	29 7e       	andi	r18, 0xE9	; 233
 934:	09 c0       	rjmp	.+18     	; 0x948 <__stack+0x49>
 936:	22 ff       	sbrs	r18, 2
 938:	06 c0       	rjmp	.+12     	; 0x946 <__stack+0x47>
 93a:	73 94       	inc	r7
 93c:	73 94       	inc	r7
 93e:	04 c0       	rjmp	.+8      	; 0x948 <__stack+0x49>
 940:	82 2f       	mov	r24, r18
 942:	86 78       	andi	r24, 0x86	; 134
 944:	09 f0       	breq	.+2      	; 0x948 <__stack+0x49>
 946:	73 94       	inc	r7
 948:	23 fd       	sbrc	r18, 3
 94a:	13 c0       	rjmp	.+38     	; 0x972 <__stack+0x73>
 94c:	20 ff       	sbrs	r18, 0
 94e:	06 c0       	rjmp	.+12     	; 0x95c <__stack+0x5d>
 950:	5a 2c       	mov	r5, r10
 952:	73 14       	cp	r7, r3
 954:	18 f4       	brcc	.+6      	; 0x95c <__stack+0x5d>
 956:	53 0c       	add	r5, r3
 958:	57 18       	sub	r5, r7
 95a:	73 2c       	mov	r7, r3
 95c:	73 14       	cp	r7, r3
 95e:	68 f4       	brcc	.+26     	; 0x97a <__stack+0x7b>
 960:	b7 01       	movw	r22, r14
 962:	80 e2       	ldi	r24, 0x20	; 32
 964:	90 e0       	ldi	r25, 0x00	; 0
 966:	2c 87       	std	Y+12, r18	; 0x0c
 968:	0e 94 1e 05 	call	0xa3c	; 0xa3c <fputc>
 96c:	73 94       	inc	r7
 96e:	2c 85       	ldd	r18, Y+12	; 0x0c
 970:	f5 cf       	rjmp	.-22     	; 0x95c <__stack+0x5d>
 972:	73 14       	cp	r7, r3
 974:	10 f4       	brcc	.+4      	; 0x97a <__stack+0x7b>
 976:	37 18       	sub	r3, r7
 978:	01 c0       	rjmp	.+2      	; 0x97c <__stack+0x7d>
 97a:	31 2c       	mov	r3, r1
 97c:	24 ff       	sbrs	r18, 4
 97e:	12 c0       	rjmp	.+36     	; 0x9a4 <__stack+0xa5>
 980:	b7 01       	movw	r22, r14
 982:	80 e3       	ldi	r24, 0x30	; 48
 984:	90 e0       	ldi	r25, 0x00	; 0
 986:	2c 87       	std	Y+12, r18	; 0x0c
 988:	0e 94 1e 05 	call	0xa3c	; 0xa3c <fputc>
 98c:	2c 85       	ldd	r18, Y+12	; 0x0c
 98e:	22 ff       	sbrs	r18, 2
 990:	17 c0       	rjmp	.+46     	; 0x9c0 <__stack+0xc1>
 992:	21 ff       	sbrs	r18, 1
 994:	03 c0       	rjmp	.+6      	; 0x99c <__stack+0x9d>
 996:	88 e5       	ldi	r24, 0x58	; 88
 998:	90 e0       	ldi	r25, 0x00	; 0
 99a:	02 c0       	rjmp	.+4      	; 0x9a0 <__stack+0xa1>
 99c:	88 e7       	ldi	r24, 0x78	; 120
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	b7 01       	movw	r22, r14
 9a2:	0c c0       	rjmp	.+24     	; 0x9bc <__stack+0xbd>
 9a4:	82 2f       	mov	r24, r18
 9a6:	86 78       	andi	r24, 0x86	; 134
 9a8:	59 f0       	breq	.+22     	; 0x9c0 <__stack+0xc1>
 9aa:	21 fd       	sbrc	r18, 1
 9ac:	02 c0       	rjmp	.+4      	; 0x9b2 <__stack+0xb3>
 9ae:	80 e2       	ldi	r24, 0x20	; 32
 9b0:	01 c0       	rjmp	.+2      	; 0x9b4 <__stack+0xb5>
 9b2:	8b e2       	ldi	r24, 0x2B	; 43
 9b4:	27 fd       	sbrc	r18, 7
 9b6:	8d e2       	ldi	r24, 0x2D	; 45
 9b8:	b7 01       	movw	r22, r14
 9ba:	90 e0       	ldi	r25, 0x00	; 0
 9bc:	0e 94 1e 05 	call	0xa3c	; 0xa3c <fputc>
 9c0:	a5 14       	cp	r10, r5
 9c2:	38 f4       	brcc	.+14     	; 0x9d2 <__stack+0xd3>
 9c4:	b7 01       	movw	r22, r14
 9c6:	80 e3       	ldi	r24, 0x30	; 48
 9c8:	90 e0       	ldi	r25, 0x00	; 0
 9ca:	0e 94 1e 05 	call	0xa3c	; 0xa3c <fputc>
 9ce:	5a 94       	dec	r5
 9d0:	f7 cf       	rjmp	.-18     	; 0x9c0 <__stack+0xc1>
 9d2:	aa 94       	dec	r10
 9d4:	f4 01       	movw	r30, r8
 9d6:	ea 0d       	add	r30, r10
 9d8:	f1 1d       	adc	r31, r1
 9da:	80 81       	ld	r24, Z
 9dc:	b7 01       	movw	r22, r14
 9de:	90 e0       	ldi	r25, 0x00	; 0
 9e0:	0e 94 1e 05 	call	0xa3c	; 0xa3c <fputc>
 9e4:	a1 10       	cpse	r10, r1
 9e6:	f5 cf       	rjmp	.-22     	; 0x9d2 <__stack+0xd3>
 9e8:	33 20       	and	r3, r3
 9ea:	09 f4       	brne	.+2      	; 0x9ee <__stack+0xef>
 9ec:	51 ce       	rjmp	.-862    	; 0x690 <vfprintf+0x24>
 9ee:	b7 01       	movw	r22, r14
 9f0:	80 e2       	ldi	r24, 0x20	; 32
 9f2:	90 e0       	ldi	r25, 0x00	; 0
 9f4:	0e 94 1e 05 	call	0xa3c	; 0xa3c <fputc>
 9f8:	3a 94       	dec	r3
 9fa:	f6 cf       	rjmp	.-20     	; 0x9e8 <__stack+0xe9>
 9fc:	f7 01       	movw	r30, r14
 9fe:	86 81       	ldd	r24, Z+6	; 0x06
 a00:	97 81       	ldd	r25, Z+7	; 0x07
 a02:	02 c0       	rjmp	.+4      	; 0xa08 <__stack+0x109>
 a04:	8f ef       	ldi	r24, 0xFF	; 255
 a06:	9f ef       	ldi	r25, 0xFF	; 255
 a08:	2c 96       	adiw	r28, 0x0c	; 12
 a0a:	e2 e1       	ldi	r30, 0x12	; 18
 a0c:	0c 94 ca 05 	jmp	0xb94	; 0xb94 <__epilogue_restores__>

00000a10 <strnlen_P>:
 a10:	fc 01       	movw	r30, r24
 a12:	05 90       	lpm	r0, Z+
 a14:	61 50       	subi	r22, 0x01	; 1
 a16:	70 40       	sbci	r23, 0x00	; 0
 a18:	01 10       	cpse	r0, r1
 a1a:	d8 f7       	brcc	.-10     	; 0xa12 <strnlen_P+0x2>
 a1c:	80 95       	com	r24
 a1e:	90 95       	com	r25
 a20:	8e 0f       	add	r24, r30
 a22:	9f 1f       	adc	r25, r31
 a24:	08 95       	ret

00000a26 <strnlen>:
 a26:	fc 01       	movw	r30, r24
 a28:	61 50       	subi	r22, 0x01	; 1
 a2a:	70 40       	sbci	r23, 0x00	; 0
 a2c:	01 90       	ld	r0, Z+
 a2e:	01 10       	cpse	r0, r1
 a30:	d8 f7       	brcc	.-10     	; 0xa28 <strnlen+0x2>
 a32:	80 95       	com	r24
 a34:	90 95       	com	r25
 a36:	8e 0f       	add	r24, r30
 a38:	9f 1f       	adc	r25, r31
 a3a:	08 95       	ret

00000a3c <fputc>:
 a3c:	0f 93       	push	r16
 a3e:	1f 93       	push	r17
 a40:	cf 93       	push	r28
 a42:	df 93       	push	r29
 a44:	18 2f       	mov	r17, r24
 a46:	09 2f       	mov	r16, r25
 a48:	eb 01       	movw	r28, r22
 a4a:	8b 81       	ldd	r24, Y+3	; 0x03
 a4c:	81 fd       	sbrc	r24, 1
 a4e:	03 c0       	rjmp	.+6      	; 0xa56 <fputc+0x1a>
 a50:	8f ef       	ldi	r24, 0xFF	; 255
 a52:	9f ef       	ldi	r25, 0xFF	; 255
 a54:	20 c0       	rjmp	.+64     	; 0xa96 <fputc+0x5a>
 a56:	82 ff       	sbrs	r24, 2
 a58:	10 c0       	rjmp	.+32     	; 0xa7a <fputc+0x3e>
 a5a:	4e 81       	ldd	r20, Y+6	; 0x06
 a5c:	5f 81       	ldd	r21, Y+7	; 0x07
 a5e:	2c 81       	ldd	r18, Y+4	; 0x04
 a60:	3d 81       	ldd	r19, Y+5	; 0x05
 a62:	42 17       	cp	r20, r18
 a64:	53 07       	cpc	r21, r19
 a66:	7c f4       	brge	.+30     	; 0xa86 <fputc+0x4a>
 a68:	e8 81       	ld	r30, Y
 a6a:	f9 81       	ldd	r31, Y+1	; 0x01
 a6c:	9f 01       	movw	r18, r30
 a6e:	2f 5f       	subi	r18, 0xFF	; 255
 a70:	3f 4f       	sbci	r19, 0xFF	; 255
 a72:	39 83       	std	Y+1, r19	; 0x01
 a74:	28 83       	st	Y, r18
 a76:	10 83       	st	Z, r17
 a78:	06 c0       	rjmp	.+12     	; 0xa86 <fputc+0x4a>
 a7a:	e8 85       	ldd	r30, Y+8	; 0x08
 a7c:	f9 85       	ldd	r31, Y+9	; 0x09
 a7e:	81 2f       	mov	r24, r17
 a80:	09 95       	icall
 a82:	89 2b       	or	r24, r25
 a84:	29 f7       	brne	.-54     	; 0xa50 <fputc+0x14>
 a86:	2e 81       	ldd	r18, Y+6	; 0x06
 a88:	3f 81       	ldd	r19, Y+7	; 0x07
 a8a:	2f 5f       	subi	r18, 0xFF	; 255
 a8c:	3f 4f       	sbci	r19, 0xFF	; 255
 a8e:	3f 83       	std	Y+7, r19	; 0x07
 a90:	2e 83       	std	Y+6, r18	; 0x06
 a92:	81 2f       	mov	r24, r17
 a94:	90 2f       	mov	r25, r16
 a96:	df 91       	pop	r29
 a98:	cf 91       	pop	r28
 a9a:	1f 91       	pop	r17
 a9c:	0f 91       	pop	r16
 a9e:	08 95       	ret

00000aa0 <__ultoa_invert>:
 aa0:	fa 01       	movw	r30, r20
 aa2:	aa 27       	eor	r26, r26
 aa4:	28 30       	cpi	r18, 0x08	; 8
 aa6:	51 f1       	breq	.+84     	; 0xafc <__ultoa_invert+0x5c>
 aa8:	20 31       	cpi	r18, 0x10	; 16
 aaa:	81 f1       	breq	.+96     	; 0xb0c <__ultoa_invert+0x6c>
 aac:	e8 94       	clt
 aae:	6f 93       	push	r22
 ab0:	6e 7f       	andi	r22, 0xFE	; 254
 ab2:	6e 5f       	subi	r22, 0xFE	; 254
 ab4:	7f 4f       	sbci	r23, 0xFF	; 255
 ab6:	8f 4f       	sbci	r24, 0xFF	; 255
 ab8:	9f 4f       	sbci	r25, 0xFF	; 255
 aba:	af 4f       	sbci	r26, 0xFF	; 255
 abc:	b1 e0       	ldi	r27, 0x01	; 1
 abe:	3e d0       	rcall	.+124    	; 0xb3c <__ultoa_invert+0x9c>
 ac0:	b4 e0       	ldi	r27, 0x04	; 4
 ac2:	3c d0       	rcall	.+120    	; 0xb3c <__ultoa_invert+0x9c>
 ac4:	67 0f       	add	r22, r23
 ac6:	78 1f       	adc	r23, r24
 ac8:	89 1f       	adc	r24, r25
 aca:	9a 1f       	adc	r25, r26
 acc:	a1 1d       	adc	r26, r1
 ace:	68 0f       	add	r22, r24
 ad0:	79 1f       	adc	r23, r25
 ad2:	8a 1f       	adc	r24, r26
 ad4:	91 1d       	adc	r25, r1
 ad6:	a1 1d       	adc	r26, r1
 ad8:	6a 0f       	add	r22, r26
 ada:	71 1d       	adc	r23, r1
 adc:	81 1d       	adc	r24, r1
 ade:	91 1d       	adc	r25, r1
 ae0:	a1 1d       	adc	r26, r1
 ae2:	20 d0       	rcall	.+64     	; 0xb24 <__ultoa_invert+0x84>
 ae4:	09 f4       	brne	.+2      	; 0xae8 <__ultoa_invert+0x48>
 ae6:	68 94       	set
 ae8:	3f 91       	pop	r19
 aea:	2a e0       	ldi	r18, 0x0A	; 10
 aec:	26 9f       	mul	r18, r22
 aee:	11 24       	eor	r1, r1
 af0:	30 19       	sub	r19, r0
 af2:	30 5d       	subi	r19, 0xD0	; 208
 af4:	31 93       	st	Z+, r19
 af6:	de f6       	brtc	.-74     	; 0xaae <__ultoa_invert+0xe>
 af8:	cf 01       	movw	r24, r30
 afa:	08 95       	ret
 afc:	46 2f       	mov	r20, r22
 afe:	47 70       	andi	r20, 0x07	; 7
 b00:	40 5d       	subi	r20, 0xD0	; 208
 b02:	41 93       	st	Z+, r20
 b04:	b3 e0       	ldi	r27, 0x03	; 3
 b06:	0f d0       	rcall	.+30     	; 0xb26 <__ultoa_invert+0x86>
 b08:	c9 f7       	brne	.-14     	; 0xafc <__ultoa_invert+0x5c>
 b0a:	f6 cf       	rjmp	.-20     	; 0xaf8 <__ultoa_invert+0x58>
 b0c:	46 2f       	mov	r20, r22
 b0e:	4f 70       	andi	r20, 0x0F	; 15
 b10:	40 5d       	subi	r20, 0xD0	; 208
 b12:	4a 33       	cpi	r20, 0x3A	; 58
 b14:	18 f0       	brcs	.+6      	; 0xb1c <__ultoa_invert+0x7c>
 b16:	49 5d       	subi	r20, 0xD9	; 217
 b18:	31 fd       	sbrc	r19, 1
 b1a:	40 52       	subi	r20, 0x20	; 32
 b1c:	41 93       	st	Z+, r20
 b1e:	02 d0       	rcall	.+4      	; 0xb24 <__ultoa_invert+0x84>
 b20:	a9 f7       	brne	.-22     	; 0xb0c <__ultoa_invert+0x6c>
 b22:	ea cf       	rjmp	.-44     	; 0xaf8 <__ultoa_invert+0x58>
 b24:	b4 e0       	ldi	r27, 0x04	; 4
 b26:	a6 95       	lsr	r26
 b28:	97 95       	ror	r25
 b2a:	87 95       	ror	r24
 b2c:	77 95       	ror	r23
 b2e:	67 95       	ror	r22
 b30:	ba 95       	dec	r27
 b32:	c9 f7       	brne	.-14     	; 0xb26 <__ultoa_invert+0x86>
 b34:	00 97       	sbiw	r24, 0x00	; 0
 b36:	61 05       	cpc	r22, r1
 b38:	71 05       	cpc	r23, r1
 b3a:	08 95       	ret
 b3c:	9b 01       	movw	r18, r22
 b3e:	ac 01       	movw	r20, r24
 b40:	0a 2e       	mov	r0, r26
 b42:	06 94       	lsr	r0
 b44:	57 95       	ror	r21
 b46:	47 95       	ror	r20
 b48:	37 95       	ror	r19
 b4a:	27 95       	ror	r18
 b4c:	ba 95       	dec	r27
 b4e:	c9 f7       	brne	.-14     	; 0xb42 <__ultoa_invert+0xa2>
 b50:	62 0f       	add	r22, r18
 b52:	73 1f       	adc	r23, r19
 b54:	84 1f       	adc	r24, r20
 b56:	95 1f       	adc	r25, r21
 b58:	a0 1d       	adc	r26, r0
 b5a:	08 95       	ret

00000b5c <__prologue_saves__>:
 b5c:	2f 92       	push	r2
 b5e:	3f 92       	push	r3
 b60:	4f 92       	push	r4
 b62:	5f 92       	push	r5
 b64:	6f 92       	push	r6
 b66:	7f 92       	push	r7
 b68:	8f 92       	push	r8
 b6a:	9f 92       	push	r9
 b6c:	af 92       	push	r10
 b6e:	bf 92       	push	r11
 b70:	cf 92       	push	r12
 b72:	df 92       	push	r13
 b74:	ef 92       	push	r14
 b76:	ff 92       	push	r15
 b78:	0f 93       	push	r16
 b7a:	1f 93       	push	r17
 b7c:	cf 93       	push	r28
 b7e:	df 93       	push	r29
 b80:	cd b7       	in	r28, 0x3d	; 61
 b82:	de b7       	in	r29, 0x3e	; 62
 b84:	ca 1b       	sub	r28, r26
 b86:	db 0b       	sbc	r29, r27
 b88:	0f b6       	in	r0, 0x3f	; 63
 b8a:	f8 94       	cli
 b8c:	de bf       	out	0x3e, r29	; 62
 b8e:	0f be       	out	0x3f, r0	; 63
 b90:	cd bf       	out	0x3d, r28	; 61
 b92:	09 94       	ijmp

00000b94 <__epilogue_restores__>:
 b94:	2a 88       	ldd	r2, Y+18	; 0x12
 b96:	39 88       	ldd	r3, Y+17	; 0x11
 b98:	48 88       	ldd	r4, Y+16	; 0x10
 b9a:	5f 84       	ldd	r5, Y+15	; 0x0f
 b9c:	6e 84       	ldd	r6, Y+14	; 0x0e
 b9e:	7d 84       	ldd	r7, Y+13	; 0x0d
 ba0:	8c 84       	ldd	r8, Y+12	; 0x0c
 ba2:	9b 84       	ldd	r9, Y+11	; 0x0b
 ba4:	aa 84       	ldd	r10, Y+10	; 0x0a
 ba6:	b9 84       	ldd	r11, Y+9	; 0x09
 ba8:	c8 84       	ldd	r12, Y+8	; 0x08
 baa:	df 80       	ldd	r13, Y+7	; 0x07
 bac:	ee 80       	ldd	r14, Y+6	; 0x06
 bae:	fd 80       	ldd	r15, Y+5	; 0x05
 bb0:	0c 81       	ldd	r16, Y+4	; 0x04
 bb2:	1b 81       	ldd	r17, Y+3	; 0x03
 bb4:	aa 81       	ldd	r26, Y+2	; 0x02
 bb6:	b9 81       	ldd	r27, Y+1	; 0x01
 bb8:	ce 0f       	add	r28, r30
 bba:	d1 1d       	adc	r29, r1
 bbc:	0f b6       	in	r0, 0x3f	; 63
 bbe:	f8 94       	cli
 bc0:	de bf       	out	0x3e, r29	; 62
 bc2:	0f be       	out	0x3f, r0	; 63
 bc4:	cd bf       	out	0x3d, r28	; 61
 bc6:	ed 01       	movw	r28, r26
 bc8:	08 95       	ret

00000bca <_exit>:
 bca:	f8 94       	cli

00000bcc <__stop_program>:
 bcc:	ff cf       	rjmp	.-2      	; 0xbcc <__stop_program>
