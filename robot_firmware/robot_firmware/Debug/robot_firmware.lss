
robot_firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  000011e6  0000127a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000eb  00800120  00800120  0000129a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000129a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000130  00000000  00000000  000012f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000130f  00000000  00000000  00001426  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000871  00000000  00000000  00002735  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006a7  00000000  00000000  00002fa6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000340  00000000  00000000  00003650  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000581  00000000  00000000  00003990  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ecc  00000000  00000000  00003f11  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  00004ddd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 70 03 	jmp	0x6e0	; 0x6e0 <__vector_18>
      4c:	0c 94 32 03 	jmp	0x664	; 0x664 <__vector_19>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 ee       	ldi	r30, 0xE6	; 230
      7c:	f1 e1       	ldi	r31, 0x11	; 17
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 32       	cpi	r26, 0x20	; 32
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	a0 e2       	ldi	r26, 0x20	; 32
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ab 30       	cpi	r26, 0x0B	; 11
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 2d 01 	call	0x25a	; 0x25a <main>
      9e:	0c 94 f1 08 	jmp	0x11e2	; 0x11e2 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <motor_pwm_init>:
	
	motor_set_direction(motor, 1);
}

void motor_pwm_init() {
	DDRD |= (1 << PORTD6) | (1 << PORTD5);
      a6:	8a b1       	in	r24, 0x0a	; 10
      a8:	80 66       	ori	r24, 0x60	; 96
      aa:	8a b9       	out	0x0a, r24	; 10

	TCCR0A |= (1 << WGM00) | (1 << COM0A1) | (1 << COM0B1);		// PWM, Phase Correct
      ac:	84 b5       	in	r24, 0x24	; 36
      ae:	81 6a       	ori	r24, 0xA1	; 161
      b0:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS02);										// 256 prescaler (ska väl kanske ändras)
      b2:	85 b5       	in	r24, 0x25	; 37
      b4:	84 60       	ori	r24, 0x04	; 4
      b6:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;													// Reset TCNT0
      b8:	16 bc       	out	0x26, r1	; 38
	
	OCR0A = 0;
      ba:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0;
      bc:	18 bc       	out	0x28, r1	; 40
      be:	08 95       	ret

000000c0 <motor_set_throttle>:
}

void motor_set_throttle(Motor *motor, uint8_t th, float scale) 
{
      c0:	6f 92       	push	r6
      c2:	7f 92       	push	r7
      c4:	8f 92       	push	r8
      c6:	9f 92       	push	r9
      c8:	af 92       	push	r10
      ca:	bf 92       	push	r11
      cc:	cf 92       	push	r12
      ce:	df 92       	push	r13
      d0:	ef 92       	push	r14
      d2:	ff 92       	push	r15
      d4:	0f 93       	push	r16
      d6:	1f 93       	push	r17
      d8:	cf 93       	push	r28
      da:	df 93       	push	r29
      dc:	ec 01       	movw	r28, r24
      de:	76 2e       	mov	r7, r22
      e0:	69 01       	movw	r12, r18
      e2:	7a 01       	movw	r14, r20
	const float max_in = 127;
	float max_ut = 255 - motor->throttle_offset;
      e4:	68 80       	ld	r6, Y
      e6:	06 2d       	mov	r16, r6
      e8:	11 27       	eor	r17, r17
      ea:	07 fd       	sbrc	r16, 7
      ec:	10 95       	com	r17
	float	perc = th / max_in;
      ee:	70 e0       	ldi	r23, 0x00	; 0
	uint8_t finalThrottle = (perc * max_ut * scale + 0.5) + motor->throttle_offset;
	
	
	
	
	if(th + motor->throttle_offset > 255) {
      f0:	c8 01       	movw	r24, r16
      f2:	86 0f       	add	r24, r22
      f4:	97 1f       	adc	r25, r23
      f6:	8f 3f       	cpi	r24, 0xFF	; 255
      f8:	91 05       	cpc	r25, r1
      fa:	09 f0       	breq	.+2      	; 0xfe <motor_set_throttle+0x3e>
      fc:	ec f5       	brge	.+122    	; 0x178 <motor_set_throttle+0xb8>
		finalThrottle = 255;
	}
	else if(th + motor->throttle_offset < 0) {
      fe:	99 23       	and	r25, r25
     100:	ec f1       	brlt	.+122    	; 0x17c <motor_set_throttle+0xbc>

void motor_set_throttle(Motor *motor, uint8_t th, float scale) 
{
	const float max_in = 127;
	float max_ut = 255 - motor->throttle_offset;
	float	perc = th / max_in;
     102:	88 27       	eor	r24, r24
     104:	77 fd       	sbrc	r23, 7
     106:	80 95       	com	r24
     108:	98 2f       	mov	r25, r24
     10a:	0e 94 1d 05 	call	0xa3a	; 0xa3a <__floatsisf>
     10e:	20 e0       	ldi	r18, 0x00	; 0
     110:	30 e0       	ldi	r19, 0x00	; 0
     112:	4e ef       	ldi	r20, 0xFE	; 254
     114:	52 e4       	ldi	r21, 0x42	; 66
     116:	0e 94 87 04 	call	0x90e	; 0x90e <__divsf3>
     11a:	4b 01       	movw	r8, r22
     11c:	5c 01       	movw	r10, r24
}

void motor_set_throttle(Motor *motor, uint8_t th, float scale) 
{
	const float max_in = 127;
	float max_ut = 255 - motor->throttle_offset;
     11e:	6f ef       	ldi	r22, 0xFF	; 255
     120:	70 e0       	ldi	r23, 0x00	; 0
     122:	60 1b       	sub	r22, r16
     124:	71 0b       	sbc	r23, r17
     126:	88 27       	eor	r24, r24
     128:	77 fd       	sbrc	r23, 7
     12a:	80 95       	com	r24
     12c:	98 2f       	mov	r25, r24
     12e:	0e 94 1d 05 	call	0xa3a	; 0xa3a <__floatsisf>
     132:	9b 01       	movw	r18, r22
     134:	ac 01       	movw	r20, r24
	float	perc = th / max_in;
	uint8_t finalThrottle = (perc * max_ut * scale + 0.5) + motor->throttle_offset;
     136:	c5 01       	movw	r24, r10
     138:	b4 01       	movw	r22, r8
     13a:	0e 94 a9 05 	call	0xb52	; 0xb52 <__mulsf3>
     13e:	a7 01       	movw	r20, r14
     140:	96 01       	movw	r18, r12
     142:	0e 94 a9 05 	call	0xb52	; 0xb52 <__mulsf3>
     146:	20 e0       	ldi	r18, 0x00	; 0
     148:	30 e0       	ldi	r19, 0x00	; 0
     14a:	40 e0       	ldi	r20, 0x00	; 0
     14c:	5f e3       	ldi	r21, 0x3F	; 63
     14e:	0e 94 23 04 	call	0x846	; 0x846 <__addsf3>
     152:	6b 01       	movw	r12, r22
     154:	7c 01       	movw	r14, r24
     156:	66 2d       	mov	r22, r6
     158:	77 27       	eor	r23, r23
     15a:	67 fd       	sbrc	r22, 7
     15c:	70 95       	com	r23
     15e:	87 2f       	mov	r24, r23
     160:	97 2f       	mov	r25, r23
     162:	0e 94 1d 05 	call	0xa3a	; 0xa3a <__floatsisf>
     166:	9b 01       	movw	r18, r22
     168:	ac 01       	movw	r20, r24
     16a:	c7 01       	movw	r24, r14
     16c:	b6 01       	movw	r22, r12
     16e:	0e 94 23 04 	call	0x846	; 0x846 <__addsf3>
     172:	0e 94 ef 04 	call	0x9de	; 0x9de <__fixunssfsi>
     176:	03 c0       	rjmp	.+6      	; 0x17e <motor_set_throttle+0xbe>
	
	
	
	
	if(th + motor->throttle_offset > 255) {
		finalThrottle = 255;
     178:	6f ef       	ldi	r22, 0xFF	; 255
     17a:	01 c0       	rjmp	.+2      	; 0x17e <motor_set_throttle+0xbe>
	}
	else if(th + motor->throttle_offset < 0) {
		finalThrottle = 0;
     17c:	60 e0       	ldi	r22, 0x00	; 0
	}
	//Set to stop!
	if (th == 0)
     17e:	71 10       	cpse	r7, r1
     180:	01 c0       	rjmp	.+2      	; 0x184 <motor_set_throttle+0xc4>
	{
		finalThrottle = 0;
     182:	60 e0       	ldi	r22, 0x00	; 0
	}
	
	// Reverse PWM output if going in reverse.
	if(motor->direction == 0) {
     184:	8b 81       	ldd	r24, Y+3	; 0x03
     186:	81 11       	cpse	r24, r1
     188:	01 c0       	rjmp	.+2      	; 0x18c <motor_set_throttle+0xcc>
		finalThrottle = 255 - finalThrottle;
     18a:	60 95       	com	r22
	}
	
	*(motor->OCR) = finalThrottle;
     18c:	e9 81       	ldd	r30, Y+1	; 0x01
     18e:	fa 81       	ldd	r31, Y+2	; 0x02
     190:	60 83       	st	Z, r22
}
     192:	df 91       	pop	r29
     194:	cf 91       	pop	r28
     196:	1f 91       	pop	r17
     198:	0f 91       	pop	r16
     19a:	ff 90       	pop	r15
     19c:	ef 90       	pop	r14
     19e:	df 90       	pop	r13
     1a0:	cf 90       	pop	r12
     1a2:	bf 90       	pop	r11
     1a4:	af 90       	pop	r10
     1a6:	9f 90       	pop	r9
     1a8:	8f 90       	pop	r8
     1aa:	7f 90       	pop	r7
     1ac:	6f 90       	pop	r6
     1ae:	08 95       	ret

000001b0 <motor_set_direction>:

void motor_set_direction(Motor *motor, uint8_t dir) {
     1b0:	fc 01       	movw	r30, r24
	if(dir == 1) {
     1b2:	61 30       	cpi	r22, 0x01	; 1
     1b4:	91 f4       	brne	.+36     	; 0x1da <motor_set_direction+0x2a>
		motor->direction = dir;
     1b6:	81 e0       	ldi	r24, 0x01	; 1
     1b8:	83 83       	std	Z+3, r24	; 0x03
		*(motor->dirPort) &= ~(1 << motor->dirPin);
     1ba:	a4 81       	ldd	r26, Z+4	; 0x04
     1bc:	b5 81       	ldd	r27, Z+5	; 0x05
     1be:	4c 91       	ld	r20, X
     1c0:	21 e0       	ldi	r18, 0x01	; 1
     1c2:	30 e0       	ldi	r19, 0x00	; 0
     1c4:	c9 01       	movw	r24, r18
     1c6:	06 80       	ldd	r0, Z+6	; 0x06
     1c8:	02 c0       	rjmp	.+4      	; 0x1ce <motor_set_direction+0x1e>
     1ca:	88 0f       	add	r24, r24
     1cc:	99 1f       	adc	r25, r25
     1ce:	0a 94       	dec	r0
     1d0:	e2 f7       	brpl	.-8      	; 0x1ca <motor_set_direction+0x1a>
     1d2:	80 95       	com	r24
     1d4:	84 23       	and	r24, r20
     1d6:	8c 93       	st	X, r24
     1d8:	08 95       	ret
	}
	else if(dir == 0) {
     1da:	61 11       	cpse	r22, r1
     1dc:	0f c0       	rjmp	.+30     	; 0x1fc <motor_set_direction+0x4c>
		motor->direction = dir;
     1de:	13 82       	std	Z+3, r1	; 0x03
		*(motor->dirPort) |= (1 << motor->dirPin);
     1e0:	a4 81       	ldd	r26, Z+4	; 0x04
     1e2:	b5 81       	ldd	r27, Z+5	; 0x05
     1e4:	4c 91       	ld	r20, X
     1e6:	21 e0       	ldi	r18, 0x01	; 1
     1e8:	30 e0       	ldi	r19, 0x00	; 0
     1ea:	c9 01       	movw	r24, r18
     1ec:	06 80       	ldd	r0, Z+6	; 0x06
     1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <motor_set_direction+0x44>
     1f0:	88 0f       	add	r24, r24
     1f2:	99 1f       	adc	r25, r25
     1f4:	0a 94       	dec	r0
     1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <motor_set_direction+0x40>
     1f8:	84 2b       	or	r24, r20
     1fa:	8c 93       	st	X, r24
     1fc:	08 95       	ret

000001fe <motor_init>:
#include "motor.h"

void motor_init(Motor *motor, uint8_t th_offset, volatile uint8_t *OCR, volatile uint8_t *DDR, volatile uint8_t *dirPort, uint8_t dirPin) {
     1fe:	ef 92       	push	r14
     200:	ff 92       	push	r15
     202:	0f 93       	push	r16
     204:	1f 93       	push	r17
	motor->throttle_offset = th_offset;
     206:	fc 01       	movw	r30, r24
     208:	60 83       	st	Z, r22
	motor->OCR = OCR;
     20a:	52 83       	std	Z+2, r21	; 0x02
     20c:	41 83       	std	Z+1, r20	; 0x01
	motor->dirPort = dirPort;
     20e:	15 83       	std	Z+5, r17	; 0x05
     210:	04 83       	std	Z+4, r16	; 0x04
	motor->dirPin = dirPin;
     212:	e6 82       	std	Z+6, r14	; 0x06
	*DDR |= (1 << dirPin);
     214:	f9 01       	movw	r30, r18
     216:	60 81       	ld	r22, Z
     218:	41 e0       	ldi	r20, 0x01	; 1
     21a:	50 e0       	ldi	r21, 0x00	; 0
     21c:	fa 01       	movw	r30, r20
     21e:	02 c0       	rjmp	.+4      	; 0x224 <motor_init+0x26>
     220:	ee 0f       	add	r30, r30
     222:	ff 1f       	adc	r31, r31
     224:	ea 94       	dec	r14
     226:	e2 f7       	brpl	.-8      	; 0x220 <motor_init+0x22>
     228:	7f 01       	movw	r14, r30
     22a:	e6 2a       	or	r14, r22
     22c:	f9 01       	movw	r30, r18
     22e:	e0 82       	st	Z, r14
	
	motor_set_direction(motor, 1);
     230:	61 e0       	ldi	r22, 0x01	; 1
     232:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <motor_set_direction>
}
     236:	1f 91       	pop	r17
     238:	0f 91       	pop	r16
     23a:	ff 90       	pop	r15
     23c:	ef 90       	pop	r14
     23e:	08 95       	ret

00000240 <enable_transmit>:
#define TRANSMIT_PORT_DDR	DDRC

//Set transmit high
void enable_transmit()
{
	TRANSMIT_PORT_DDR |= TRANSMIT_PIN;
     240:	3c 9a       	sbi	0x07, 4	; 7
	TRANSMIT_PORT	|= TRANSMIT_PIN;
     242:	44 9a       	sbi	0x08, 4	; 8
     244:	08 95       	ret

00000246 <disable_transmit>:
}
//Set transmit low
void disable_transmit()
{
	TRANSMIT_PORT_DDR |= TRANSMIT_PIN;
     246:	3c 9a       	sbi	0x07, 4	; 7
	TRANSMIT_PORT	&= ~TRANSMIT_PIN;
     248:	88 b1       	in	r24, 0x08	; 8
     24a:	80 7e       	andi	r24, 0xE0	; 224
     24c:	88 b9       	out	0x08, r24	; 8
     24e:	08 95       	ret

00000250 <uart_putchar>:

FILE mystdout;

int uart_putchar(char c, FILE *stream) 
{ 
	send_c(c);
     250:	0e 94 c9 03 	call	0x792	; 0x792 <send_c>
	return 0;
}
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	08 95       	ret

0000025a <main>:
void funkar(void)
{
	return;
}
int main()
{
     25a:	cf 93       	push	r28
     25c:	df 93       	push	r29
     25e:	cd b7       	in	r28, 0x3d	; 61
     260:	de b7       	in	r29, 0x3e	; 62
     262:	63 97       	sbiw	r28, 0x13	; 19
     264:	0f b6       	in	r0, 0x3f	; 63
     266:	f8 94       	cli
     268:	de bf       	out	0x3e, r29	; 62
     26a:	0f be       	out	0x3f, r0	; 63
     26c:	cd bf       	out	0x3d, r28	; 61
	DDRD = 2;					// output
     26e:	82 e0       	ldi	r24, 0x02	; 2
     270:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xff;				// input
     272:	8f ef       	ldi	r24, 0xFF	; 255
     274:	84 b9       	out	0x04, r24	; 4
	SETBIT(PORTB,PB0);			// enable pull-up
     276:	28 9a       	sbi	0x05, 0	; 5
	SETBIT(PORTB,PB1);			// enable pull-up
     278:	29 9a       	sbi	0x05, 1	; 5
	ADCSRA |= _BV(ADEN);		//Enable adc	
     27a:	ea e7       	ldi	r30, 0x7A	; 122
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	80 81       	ld	r24, Z
     280:	80 68       	ori	r24, 0x80	; 128
     282:	80 83       	st	Z, r24
	//Set up motor pwm
	Motor leftMotor;
	Motor rightMotor;
	//left OCA & PD7
	motor_init(&leftMotor, 10, &OCR0A, &DDRD, &PORTD, 7);
     284:	0f 2e       	mov	r0, r31
     286:	f7 e0       	ldi	r31, 0x07	; 7
     288:	ef 2e       	mov	r14, r31
     28a:	f0 2d       	mov	r31, r0
     28c:	0b e2       	ldi	r16, 0x2B	; 43
     28e:	10 e0       	ldi	r17, 0x00	; 0
     290:	2a e2       	ldi	r18, 0x2A	; 42
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	47 e4       	ldi	r20, 0x47	; 71
     296:	50 e0       	ldi	r21, 0x00	; 0
     298:	6a e0       	ldi	r22, 0x0A	; 10
     29a:	ce 01       	movw	r24, r28
     29c:	01 96       	adiw	r24, 0x01	; 1
     29e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <motor_init>
	//right OCB & PB7
	motor_init(&rightMotor, 10, &OCR0B, &DDRB, &PORTB, 7);
     2a2:	05 e2       	ldi	r16, 0x25	; 37
     2a4:	10 e0       	ldi	r17, 0x00	; 0
     2a6:	24 e2       	ldi	r18, 0x24	; 36
     2a8:	30 e0       	ldi	r19, 0x00	; 0
     2aa:	48 e4       	ldi	r20, 0x48	; 72
     2ac:	50 e0       	ldi	r21, 0x00	; 0
     2ae:	6a e0       	ldi	r22, 0x0A	; 10
     2b0:	ce 01       	movw	r24, r28
     2b2:	08 96       	adiw	r24, 0x08	; 8
     2b4:	0e 94 ff 00 	call	0x1fe	; 0x1fe <motor_init>

	motor_pwm_init(); 
     2b8:	0e 94 53 00 	call	0xa6	; 0xa6 <motor_pwm_init>
	
	//Set up superpaketet
	set_link_mode_functions(enable_transmit, disable_transmit);
     2bc:	63 e2       	ldi	r22, 0x23	; 35
     2be:	71 e0       	ldi	r23, 0x01	; 1
     2c0:	80 e2       	ldi	r24, 0x20	; 32
     2c2:	91 e0       	ldi	r25, 0x01	; 1
     2c4:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <set_link_mode_functions>
	
	//We are listening here
	disable_transmit();
     2c8:	0e 94 23 01 	call	0x246	; 0x246 <disable_transmit>
	

	sei();
     2cc:	78 94       	sei
	InitUART(9600);	
     2ce:	80 e8       	ldi	r24, 0x80	; 128
     2d0:	95 e2       	ldi	r25, 0x25	; 37
     2d2:	0e 94 63 02 	call	0x4c6	; 0x4c6 <InitUART>
	
	fdev_setup_stream(&mystdout, uart_putchar, NULL, _FDEV_SETUP_WRITE);
     2d6:	88 e2       	ldi	r24, 0x28	; 40
     2d8:	91 e0       	ldi	r25, 0x01	; 1
     2da:	90 93 34 01 	sts	0x0134, r25
     2de:	80 93 33 01 	sts	0x0133, r24
     2e2:	10 92 36 01 	sts	0x0136, r1
     2e6:	10 92 35 01 	sts	0x0135, r1
     2ea:	82 e0       	ldi	r24, 0x02	; 2
     2ec:	80 93 2e 01 	sts	0x012E, r24
     2f0:	10 92 38 01 	sts	0x0138, r1
     2f4:	10 92 37 01 	sts	0x0137, r1
	stdout = &mystdout;			
     2f8:	8b e2       	ldi	r24, 0x2B	; 43
     2fa:	91 e0       	ldi	r25, 0x01	; 1
     2fc:	90 93 08 02 	sts	0x0208, r25
     300:	80 93 07 02 	sts	0x0207, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     304:	8f e0       	ldi	r24, 0x0F	; 15
     306:	97 e2       	ldi	r25, 0x27	; 39
     308:	01 97       	sbiw	r24, 0x01	; 1
     30a:	f1 f7       	brne	.-4      	; 0x308 <main+0xae>
     30c:	00 c0       	rjmp	.+0      	; 0x30e <main+0xb4>
     30e:	00 00       	nop
	_delay_ms(5);
	
	send_string(" Wait", 5);
     310:	65 e0       	ldi	r22, 0x05	; 5
     312:	88 e0       	ldi	r24, 0x08	; 8
     314:	91 e0       	ldi	r25, 0x01	; 1
     316:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <send_string>
	
	int thLeft = 127,  thRight = 127;
     31a:	0f 2e       	mov	r0, r31
     31c:	ff e7       	ldi	r31, 0x7F	; 127
     31e:	ef 2e       	mov	r14, r31
     320:	f1 2c       	mov	r15, r1
     322:	f0 2d       	mov	r31, r0
     324:	0f e7       	ldi	r16, 0x7F	; 127
     326:	10 e0       	ldi	r17, 0x00	; 0
					thRight = inc.payload[1];
					//printf("Paket! %d & %d\n\r", inc.payload[0], inc.payload[1]);
					break;
				case 2:		//Throttle scaling
					th_scale = *(uint16_t*)inc.payload / 10000.0;
					printf("Paket! %d & %d\n\r", inc.payload[0], inc.payload[1]);
     328:	0f 2e       	mov	r0, r31
     32a:	fe e0       	ldi	r31, 0x0E	; 14
     32c:	cf 2e       	mov	r12, r31
     32e:	f1 e0       	ldi	r31, 0x01	; 1
     330:	df 2e       	mov	r13, r31
     332:	f0 2d       	mov	r31, r0
				if (count == 99)
				{
					count = 0;
				}
				//_delay_ms();
				send_package(inc);
     334:	0f 2e       	mov	r0, r31
     336:	f7 e0       	ldi	r31, 0x07	; 7
     338:	af 2e       	mov	r10, r31
     33a:	f0 2d       	mov	r31, r0
		}
		
		
		if(thLeft < 127) {
			motor_set_direction(&leftMotor, 0);
			motor_set_throttle(&leftMotor, 127 - thLeft, th_scale);
     33c:	0f 2e       	mov	r0, r31
     33e:	ff e7       	ldi	r31, 0x7F	; 127
     340:	bf 2e       	mov	r11, r31
     342:	f0 2d       	mov	r31, r0
     344:	8f e6       	ldi	r24, 0x6F	; 111
     346:	97 e1       	ldi	r25, 0x17	; 23
     348:	01 97       	sbiw	r24, 0x01	; 1
     34a:	f1 f7       	brne	.-4      	; 0x348 <main+0xee>
     34c:	00 c0       	rjmp	.+0      	; 0x34e <main+0xf4>
     34e:	00 00       	nop
	
	while(1)
	{
				
 		_delay_ms(3);
		super_paketet inc = check_for_package();
     350:	0e 94 cb 02 	call	0x596	; 0x596 <check_for_package>
     354:	2f 87       	std	Y+15, r18	; 0x0f
     356:	38 8b       	std	Y+16, r19	; 0x10
     358:	49 8b       	std	Y+17, r20	; 0x11
     35a:	5a 8b       	std	Y+18, r21	; 0x12
     35c:	6b 8b       	std	Y+19, r22	; 0x13
     35e:	83 2f       	mov	r24, r19
		if (inc.adress != 0)
     360:	22 23       	and	r18, r18
     362:	09 f4       	brne	.+2      	; 0x366 <main+0x10c>
     364:	51 c0       	rjmp	.+162    	; 0x408 <main+0x1ae>
		{
			//Check if package want a response
			if ((inc.type & 0x0f) == 7)
     366:	3f 70       	andi	r19, 0x0F	; 15
     368:	37 30       	cpi	r19, 0x07	; 7
     36a:	01 f5       	brne	.+64     	; 0x3ac <main+0x152>
			{
				//Send response
				enable_transmit();
     36c:	0e 94 20 01 	call	0x240	; 0x240 <enable_transmit>
				inc.type = 7;
				//Fill data
				//put distance from irSensor into inc.payload here
				static uint8_t count = 0;
				inc.payload[0] = count++;//irSensor(adc_read(ADC_PIN));
     370:	90 91 20 01 	lds	r25, 0x0120
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	89 0f       	add	r24, r25
     378:	80 93 20 01 	sts	0x0120, r24
     37c:	99 8b       	std	Y+17, r25	; 0x11
				if (count == 99)
     37e:	83 36       	cpi	r24, 0x63	; 99
     380:	11 f4       	brne	.+4      	; 0x386 <main+0x12c>
				{
					count = 0;
     382:	10 92 20 01 	sts	0x0120, r1
				}
				//_delay_ms();
				send_package(inc);
     386:	a8 8a       	std	Y+16, r10	; 0x10
     388:	4f 85       	ldd	r20, Y+15	; 0x0f
     38a:	5a 2d       	mov	r21, r10
     38c:	69 89       	ldd	r22, Y+17	; 0x11
     38e:	7a 89       	ldd	r23, Y+18	; 0x12
     390:	8b 89       	ldd	r24, Y+19	; 0x13
     392:	0e 94 02 03 	call	0x604	; 0x604 <send_package>
				//wait for send
				flush_usart();
     396:	0e 94 0f 04 	call	0x81e	; 0x81e <flush_usart>
     39a:	8f ec       	ldi	r24, 0xCF	; 207
     39c:	97 e0       	ldi	r25, 0x07	; 7
     39e:	01 97       	sbiw	r24, 0x01	; 1
     3a0:	f1 f7       	brne	.-4      	; 0x39e <main+0x144>
     3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <main+0x14a>
     3a4:	00 00       	nop
				_delay_ms(1);
				

				//_delay_ms(10);
				disable_transmit();
     3a6:	0e 94 23 01 	call	0x246	; 0x246 <disable_transmit>
     3aa:	2e c0       	rjmp	.+92     	; 0x408 <main+0x1ae>
			}
			switch(inc.type)
     3ac:	81 30       	cpi	r24, 0x01	; 1
     3ae:	19 f0       	breq	.+6      	; 0x3b6 <main+0x15c>
     3b0:	82 30       	cpi	r24, 0x02	; 2
     3b2:	31 f0       	breq	.+12     	; 0x3c0 <main+0x166>
     3b4:	29 c0       	rjmp	.+82     	; 0x408 <main+0x1ae>
			{
				case 1:
					thLeft = inc.payload[0];
     3b6:	09 89       	ldd	r16, Y+17	; 0x11
     3b8:	10 e0       	ldi	r17, 0x00	; 0
					thRight = inc.payload[1];
     3ba:	ea 88       	ldd	r14, Y+18	; 0x12
     3bc:	f1 2c       	mov	r15, r1
					//printf("Paket! %d & %d\n\r", inc.payload[0], inc.payload[1]);
					break;
     3be:	24 c0       	rjmp	.+72     	; 0x408 <main+0x1ae>
				case 2:		//Throttle scaling
					th_scale = *(uint16_t*)inc.payload / 10000.0;
     3c0:	69 89       	ldd	r22, Y+17	; 0x11
     3c2:	7a 89       	ldd	r23, Y+18	; 0x12
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	0e 94 1b 05 	call	0xa36	; 0xa36 <__floatunsisf>
     3cc:	20 e0       	ldi	r18, 0x00	; 0
     3ce:	30 e4       	ldi	r19, 0x40	; 64
     3d0:	4c e1       	ldi	r20, 0x1C	; 28
     3d2:	56 e4       	ldi	r21, 0x46	; 70
     3d4:	0e 94 87 04 	call	0x90e	; 0x90e <__divsf3>
     3d8:	60 93 00 01 	sts	0x0100, r22
     3dc:	70 93 01 01 	sts	0x0101, r23
     3e0:	80 93 02 01 	sts	0x0102, r24
     3e4:	90 93 03 01 	sts	0x0103, r25
					printf("Paket! %d & %d\n\r", inc.payload[0], inc.payload[1]);
     3e8:	8a 89       	ldd	r24, Y+18	; 0x12
     3ea:	1f 92       	push	r1
     3ec:	8f 93       	push	r24
     3ee:	89 89       	ldd	r24, Y+17	; 0x11
     3f0:	1f 92       	push	r1
     3f2:	8f 93       	push	r24
     3f4:	df 92       	push	r13
     3f6:	cf 92       	push	r12
     3f8:	0e 94 2e 06 	call	0xc5c	; 0xc5c <printf>
					break;
     3fc:	0f 90       	pop	r0
     3fe:	0f 90       	pop	r0
     400:	0f 90       	pop	r0
     402:	0f 90       	pop	r0
     404:	0f 90       	pop	r0
     406:	0f 90       	pop	r0
					break;
			}
		}
		
		
		if(thLeft < 127) {
     408:	0f 37       	cpi	r16, 0x7F	; 127
     40a:	11 05       	cpc	r17, r1
     40c:	a4 f4       	brge	.+40     	; 0x436 <main+0x1dc>
			motor_set_direction(&leftMotor, 0);
     40e:	60 e0       	ldi	r22, 0x00	; 0
     410:	ce 01       	movw	r24, r28
     412:	01 96       	adiw	r24, 0x01	; 1
     414:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <motor_set_direction>
			motor_set_throttle(&leftMotor, 127 - thLeft, th_scale);
     418:	20 91 00 01 	lds	r18, 0x0100
     41c:	30 91 01 01 	lds	r19, 0x0101
     420:	40 91 02 01 	lds	r20, 0x0102
     424:	50 91 03 01 	lds	r21, 0x0103
     428:	6b 2d       	mov	r22, r11
     42a:	60 1b       	sub	r22, r16
     42c:	ce 01       	movw	r24, r28
     42e:	01 96       	adiw	r24, 0x01	; 1
     430:	0e 94 60 00 	call	0xc0	; 0xc0 <motor_set_throttle>
     434:	13 c0       	rjmp	.+38     	; 0x45c <main+0x202>
		}
		else 
		{
			motor_set_direction(&leftMotor, 1);
     436:	61 e0       	ldi	r22, 0x01	; 1
     438:	ce 01       	movw	r24, r28
     43a:	01 96       	adiw	r24, 0x01	; 1
     43c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <motor_set_direction>
			motor_set_throttle(&leftMotor, thLeft - 127, th_scale);
     440:	20 91 00 01 	lds	r18, 0x0100
     444:	30 91 01 01 	lds	r19, 0x0101
     448:	40 91 02 01 	lds	r20, 0x0102
     44c:	50 91 03 01 	lds	r21, 0x0103
     450:	61 e8       	ldi	r22, 0x81	; 129
     452:	60 0f       	add	r22, r16
     454:	ce 01       	movw	r24, r28
     456:	01 96       	adiw	r24, 0x01	; 1
     458:	0e 94 60 00 	call	0xc0	; 0xc0 <motor_set_throttle>
		}
		
		if(thRight < 127) {
     45c:	9f e7       	ldi	r25, 0x7F	; 127
     45e:	e9 16       	cp	r14, r25
     460:	f1 04       	cpc	r15, r1
     462:	a4 f4       	brge	.+40     	; 0x48c <main+0x232>
			motor_set_direction(&rightMotor, 0);
     464:	60 e0       	ldi	r22, 0x00	; 0
     466:	ce 01       	movw	r24, r28
     468:	08 96       	adiw	r24, 0x08	; 8
     46a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <motor_set_direction>
			motor_set_throttle(&rightMotor, 127 - thRight, th_scale);
     46e:	20 91 00 01 	lds	r18, 0x0100
     472:	30 91 01 01 	lds	r19, 0x0101
     476:	40 91 02 01 	lds	r20, 0x0102
     47a:	50 91 03 01 	lds	r21, 0x0103
     47e:	6b 2d       	mov	r22, r11
     480:	6e 19       	sub	r22, r14
     482:	ce 01       	movw	r24, r28
     484:	08 96       	adiw	r24, 0x08	; 8
     486:	0e 94 60 00 	call	0xc0	; 0xc0 <motor_set_throttle>
     48a:	5c cf       	rjmp	.-328    	; 0x344 <main+0xea>
		}
		else {
			motor_set_direction(&rightMotor, 1);
     48c:	61 e0       	ldi	r22, 0x01	; 1
     48e:	ce 01       	movw	r24, r28
     490:	08 96       	adiw	r24, 0x08	; 8
     492:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <motor_set_direction>
			motor_set_throttle(&rightMotor, thRight - 127, th_scale);
     496:	20 91 00 01 	lds	r18, 0x0100
     49a:	30 91 01 01 	lds	r19, 0x0101
     49e:	40 91 02 01 	lds	r20, 0x0102
     4a2:	50 91 03 01 	lds	r21, 0x0103
     4a6:	61 e8       	ldi	r22, 0x81	; 129
     4a8:	6e 0d       	add	r22, r14
     4aa:	ce 01       	movw	r24, r28
     4ac:	08 96       	adiw	r24, 0x08	; 8
     4ae:	0e 94 60 00 	call	0xc0	; 0xc0 <motor_set_throttle>
		}
		
	}
     4b2:	48 cf       	rjmp	.-368    	; 0x344 <main+0xea>

000004b4 <set_link_mode_functions>:
void (*disable_transmit_func)();

//Init function for controlling radio module
void set_link_mode_functions(void (*enable_transmit), void (*disable_transmit))
{
	enable_transmit_func = enable_transmit;
     4b4:	90 93 3a 01 	sts	0x013A, r25
     4b8:	80 93 39 01 	sts	0x0139, r24
	disable_transmit_func = disable_transmit;
     4bc:	70 93 3c 01 	sts	0x013C, r23
     4c0:	60 93 3b 01 	sts	0x013B, r22
     4c4:	08 95       	ret

000004c6 <InitUART>:
}


void InitUART( unsigned int baud )
{
	int baudfactor = (F_CPU/16/baud-1);
     4c6:	9c 01       	movw	r18, r24
     4c8:	40 e0       	ldi	r20, 0x00	; 0
     4ca:	50 e0       	ldi	r21, 0x00	; 0
     4cc:	60 e2       	ldi	r22, 0x20	; 32
     4ce:	71 ea       	ldi	r23, 0xA1	; 161
     4d0:	87 e0       	ldi	r24, 0x07	; 7
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	0e 94 0c 06 	call	0xc18	; 0xc18 <__udivmodsi4>
     4d8:	21 50       	subi	r18, 0x01	; 1
     4da:	31 09       	sbc	r19, r1
	UBRR0H = (unsigned char)(baudfactor>>8);	//set the baud rate
     4dc:	30 93 c5 00 	sts	0x00C5, r19
	UBRR0L = (unsigned char)baudfactor;
     4e0:	20 93 c4 00 	sts	0x00C4, r18
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);			//enable UART receiver and transmitter
     4e4:	e1 ec       	ldi	r30, 0xC1	; 193
     4e6:	f0 e0       	ldi	r31, 0x00	; 0
     4e8:	88 e1       	ldi	r24, 0x18	; 24
     4ea:	80 83       	st	Z, r24
	/* Set frame format: 8data */
	UCSR0C = (3<<UCSZ00);
     4ec:	86 e0       	ldi	r24, 0x06	; 6
     4ee:	80 93 c2 00 	sts	0x00C2, r24
	//Activate interrupts
	UCSR0B |= (1 << UDRIE0) + (1 << RXCIE0);
     4f2:	80 81       	ld	r24, Z
     4f4:	80 6a       	ori	r24, 0xA0	; 160
     4f6:	80 83       	st	Z, r24
     4f8:	08 95       	ret

000004fa <do_crc>:

//make crc checksum
uint8_t do_crc(uint8_t in_data[], uint8_t length)
{
	uint8_t ret = 0;
	for (int i = 0; i < length; i++)
     4fa:	70 e0       	ldi	r23, 0x00	; 0
     4fc:	16 16       	cp	r1, r22
     4fe:	17 06       	cpc	r1, r23
     500:	6c f4       	brge	.+26     	; 0x51c <do_crc+0x22>
     502:	e8 2f       	mov	r30, r24
     504:	f9 2f       	mov	r31, r25
     506:	20 e0       	ldi	r18, 0x00	; 0
     508:	30 e0       	ldi	r19, 0x00	; 0


//make crc checksum
uint8_t do_crc(uint8_t in_data[], uint8_t length)
{
	uint8_t ret = 0;
     50a:	80 e0       	ldi	r24, 0x00	; 0
	for (int i = 0; i < length; i++)
	{
		//xor
		ret ^= in_data[i];
     50c:	91 91       	ld	r25, Z+
     50e:	89 27       	eor	r24, r25

//make crc checksum
uint8_t do_crc(uint8_t in_data[], uint8_t length)
{
	uint8_t ret = 0;
	for (int i = 0; i < length; i++)
     510:	2f 5f       	subi	r18, 0xFF	; 255
     512:	3f 4f       	sbci	r19, 0xFF	; 255
     514:	26 17       	cp	r18, r22
     516:	37 07       	cpc	r19, r23
     518:	cc f3       	brlt	.-14     	; 0x50c <do_crc+0x12>
     51a:	08 95       	ret


//make crc checksum
uint8_t do_crc(uint8_t in_data[], uint8_t length)
{
	uint8_t ret = 0;
     51c:	80 e0       	ldi	r24, 0x00	; 0
	{
		//xor
		ret ^= in_data[i];
	}
	return ret;
}
     51e:	08 95       	ret

00000520 <process_data_for_package>:

//Call from isr
super_paketet process_data_for_package(char incomming_byte)
{
     520:	1f 93       	push	r17
     522:	cf 93       	push	r28
     524:	df 93       	push	r29
     526:	00 d0       	rcall	.+0      	; 0x528 <process_data_for_package+0x8>
     528:	00 d0       	rcall	.+0      	; 0x52a <process_data_for_package+0xa>
     52a:	1f 92       	push	r1
     52c:	cd b7       	in	r28, 0x3d	; 61
     52e:	de b7       	in	r29, 0x3e	; 62
     530:	18 2f       	mov	r17, r24
	//static uint8_t		counter = 0;
	super_paketet *package = (super_paketet *)buffer;
	super_paketet *new_package = (super_paketet *)(buffer + 1);
	
	//move into last place in buffer
	buffer[PACKAGE_SIZE] = incomming_byte;
     532:	80 93 26 01 	sts	0x0126, r24
	//counter++;
	
	//Copy new content
	*package = *new_package;
     536:	95 e0       	ldi	r25, 0x05	; 5
     538:	e2 e2       	ldi	r30, 0x22	; 34
     53a:	f1 e0       	ldi	r31, 0x01	; 1
     53c:	a1 e2       	ldi	r26, 0x21	; 33
     53e:	b1 e0       	ldi	r27, 0x01	; 1
     540:	01 90       	ld	r0, Z+
     542:	0d 92       	st	X+, r0
     544:	9a 95       	dec	r25
     546:	e1 f7       	brne	.-8      	; 0x540 <process_data_for_package+0x20>
	//check for package
	
	
	if (package->adress == ADRESS)
     548:	80 91 21 01 	lds	r24, 0x0121
     54c:	86 36       	cpi	r24, 0x66	; 102
     54e:	89 f4       	brne	.+34     	; 0x572 <process_data_for_package+0x52>
	{
		//Woo paket!
		//Crc osv
		if (package->crc == do_crc((uint8_t*)package, PACKAGE_SIZE - 1))
     550:	64 e0       	ldi	r22, 0x04	; 4
     552:	81 e2       	ldi	r24, 0x21	; 33
     554:	91 e0       	ldi	r25, 0x01	; 1
     556:	0e 94 7d 02 	call	0x4fa	; 0x4fa <do_crc>
     55a:	18 13       	cpse	r17, r24
     55c:	0a c0       	rjmp	.+20     	; 0x572 <process_data_for_package+0x52>
		{
			return *package;
     55e:	85 e0       	ldi	r24, 0x05	; 5
     560:	e1 e2       	ldi	r30, 0x21	; 33
     562:	f1 e0       	ldi	r31, 0x01	; 1
     564:	de 01       	movw	r26, r28
     566:	11 96       	adiw	r26, 0x01	; 1
     568:	01 90       	ld	r0, Z+
     56a:	0d 92       	st	X+, r0
     56c:	8a 95       	dec	r24
     56e:	e1 f7       	brne	.-8      	; 0x568 <process_data_for_package+0x48>
     570:	01 c0       	rjmp	.+2      	; 0x574 <process_data_for_package+0x54>
		}
	}
	super_paketet fail_return;
	fail_return.adress = 0;
	
	return fail_return;
     572:	19 82       	std	Y+1, r1	; 0x01
     574:	29 81       	ldd	r18, Y+1	; 0x01
     576:	3a 81       	ldd	r19, Y+2	; 0x02
     578:	4b 81       	ldd	r20, Y+3	; 0x03
     57a:	5c 81       	ldd	r21, Y+4	; 0x04
     57c:	6d 81       	ldd	r22, Y+5	; 0x05
}
     57e:	70 e0       	ldi	r23, 0x00	; 0
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	0f 90       	pop	r0
     586:	0f 90       	pop	r0
     588:	0f 90       	pop	r0
     58a:	0f 90       	pop	r0
     58c:	0f 90       	pop	r0
     58e:	df 91       	pop	r29
     590:	cf 91       	pop	r28
     592:	1f 91       	pop	r17
     594:	08 95       	ret

00000596 <check_for_package>:

//Fetch new packages if there is one
super_paketet check_for_package()
{
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
     59a:	cd b7       	in	r28, 0x3d	; 61
     59c:	de b7       	in	r29, 0x3e	; 62
     59e:	2b 97       	sbiw	r28, 0x0b	; 11
     5a0:	0f b6       	in	r0, 0x3f	; 63
     5a2:	f8 94       	cli
     5a4:	de bf       	out	0x3e, r29	; 62
     5a6:	0f be       	out	0x3f, r0	; 63
     5a8:	cd bf       	out	0x3d, r28	; 61
	char incomming_byte;
	//Check if we have data
	while (ReceiveByte(&incomming_byte))
     5aa:	14 c0       	rjmp	.+40     	; 0x5d4 <check_for_package+0x3e>
	{
		super_paketet incomming_package;
		//Send new data for processing
		incomming_package = process_data_for_package(incomming_byte);
     5ac:	8e 81       	ldd	r24, Y+6	; 0x06
     5ae:	0e 94 90 02 	call	0x520	; 0x520 <process_data_for_package>
     5b2:	2f 83       	std	Y+7, r18	; 0x07
     5b4:	38 87       	std	Y+8, r19	; 0x08
     5b6:	49 87       	std	Y+9, r20	; 0x09
     5b8:	5a 87       	std	Y+10, r21	; 0x0a
     5ba:	6b 87       	std	Y+11, r22	; 0x0b
		//Check if we got a package
		if (incomming_package.adress != 0)
     5bc:	22 23       	and	r18, r18
     5be:	51 f0       	breq	.+20     	; 0x5d4 <check_for_package+0x3e>
		{
			return incomming_package;
     5c0:	85 e0       	ldi	r24, 0x05	; 5
     5c2:	fe 01       	movw	r30, r28
     5c4:	37 96       	adiw	r30, 0x07	; 7
     5c6:	de 01       	movw	r26, r28
     5c8:	11 96       	adiw	r26, 0x01	; 1
     5ca:	01 90       	ld	r0, Z+
     5cc:	0d 92       	st	X+, r0
     5ce:	8a 95       	dec	r24
     5d0:	e1 f7       	brne	.-8      	; 0x5ca <check_for_package+0x34>
     5d2:	07 c0       	rjmp	.+14     	; 0x5e2 <check_for_package+0x4c>
//Fetch new packages if there is one
super_paketet check_for_package()
{
	char incomming_byte;
	//Check if we have data
	while (ReceiveByte(&incomming_byte))
     5d4:	ce 01       	movw	r24, r28
     5d6:	06 96       	adiw	r24, 0x06	; 6
     5d8:	0e 94 a8 03 	call	0x750	; 0x750 <ReceiveByte>
     5dc:	81 11       	cpse	r24, r1
     5de:	e6 cf       	rjmp	.-52     	; 0x5ac <check_for_package+0x16>
		}
	}
	super_paketet fail_return;
	fail_return.adress = 0;
	
	return fail_return;
     5e0:	19 82       	std	Y+1, r1	; 0x01
     5e2:	29 81       	ldd	r18, Y+1	; 0x01
     5e4:	3a 81       	ldd	r19, Y+2	; 0x02
     5e6:	4b 81       	ldd	r20, Y+3	; 0x03
     5e8:	5c 81       	ldd	r21, Y+4	; 0x04
     5ea:	6d 81       	ldd	r22, Y+5	; 0x05
}
     5ec:	70 e0       	ldi	r23, 0x00	; 0
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	2b 96       	adiw	r28, 0x0b	; 11
     5f4:	0f b6       	in	r0, 0x3f	; 63
     5f6:	f8 94       	cli
     5f8:	de bf       	out	0x3e, r29	; 62
     5fa:	0f be       	out	0x3f, r0	; 63
     5fc:	cd bf       	out	0x3d, r28	; 61
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	08 95       	ret

00000604 <send_package>:
//pad package and send over usart
void send_package(super_paketet outgoing_package)
{
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	cd b7       	in	r28, 0x3d	; 61
     60a:	de b7       	in	r29, 0x3e	; 62
     60c:	2c 97       	sbiw	r28, 0x0c	; 12
     60e:	0f b6       	in	r0, 0x3f	; 63
     610:	f8 94       	cli
     612:	de bf       	out	0x3e, r29	; 62
     614:	0f be       	out	0x3f, r0	; 63
     616:	cd bf       	out	0x3d, r28	; 61
     618:	48 87       	std	Y+8, r20	; 0x08
     61a:	59 87       	std	Y+9, r21	; 0x09
     61c:	6a 87       	std	Y+10, r22	; 0x0a
     61e:	7b 87       	std	Y+11, r23	; 0x0b
     620:	8c 87       	std	Y+12, r24	; 0x0c
	outgoing_package.crc = do_crc((uint8_t*)&outgoing_package, PACKAGE_SIZE-1);
     622:	64 e0       	ldi	r22, 0x04	; 4
     624:	ce 01       	movw	r24, r28
     626:	08 96       	adiw	r24, 0x08	; 8
     628:	0e 94 7d 02 	call	0x4fa	; 0x4fa <do_crc>
     62c:	8c 87       	std	Y+12, r24	; 0x0c
	const int outgoing_data_length = sizeof(super_paketet) + 2;
	
	char outgoing_data[outgoing_data_length]; // package + preamble
	
	*(uint16_t*)outgoing_data = PREAMBLE;
     62e:	8f ef       	ldi	r24, 0xFF	; 255
     630:	95 e5       	ldi	r25, 0x55	; 85
     632:	9a 83       	std	Y+2, r25	; 0x02
     634:	89 83       	std	Y+1, r24	; 0x01
	*(super_paketet*)(outgoing_data + 2) = outgoing_package;
     636:	85 e0       	ldi	r24, 0x05	; 5
     638:	fe 01       	movw	r30, r28
     63a:	38 96       	adiw	r30, 0x08	; 8
     63c:	de 01       	movw	r26, r28
     63e:	13 96       	adiw	r26, 0x03	; 3
     640:	01 90       	ld	r0, Z+
     642:	0d 92       	st	X+, r0
     644:	8a 95       	dec	r24
     646:	e1 f7       	brne	.-8      	; 0x640 <send_package+0x3c>
	
	send_string(outgoing_data, outgoing_data_length);
     648:	67 e0       	ldi	r22, 0x07	; 7
     64a:	ce 01       	movw	r24, r28
     64c:	01 96       	adiw	r24, 0x01	; 1
     64e:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <send_string>
}
     652:	2c 96       	adiw	r28, 0x0c	; 12
     654:	0f b6       	in	r0, 0x3f	; 63
     656:	f8 94       	cli
     658:	de bf       	out	0x3e, r29	; 62
     65a:	0f be       	out	0x3f, r0	; 63
     65c:	cd bf       	out	0x3d, r28	; 61
     65e:	df 91       	pop	r29
     660:	cf 91       	pop	r28
     662:	08 95       	ret

00000664 <__vector_19>:
#define release_lock()	sei()

//Usart transmit interrupt
//This interrupt is always called when UDR is empty
ISR(USART_UDRE_vect)
{
     664:	1f 92       	push	r1
     666:	0f 92       	push	r0
     668:	0f b6       	in	r0, 0x3f	; 63
     66a:	0f 92       	push	r0
     66c:	11 24       	eor	r1, r1
     66e:	2f 93       	push	r18
     670:	8f 93       	push	r24
     672:	9f 93       	push	r25
     674:	ef 93       	push	r30
     676:	ff 93       	push	r31
	// check for empty transmit buffer	and if we have data
	if ( 0 != outgoing_data_counter)
     678:	80 91 2a 01 	lds	r24, 0x012A
     67c:	88 23       	and	r24, r24
     67e:	09 f1       	breq	.+66     	; 0x6c2 <__vector_19+0x5e>
	{
		outgoing_data_counter--;
     680:	80 91 2a 01 	lds	r24, 0x012A
     684:	81 50       	subi	r24, 0x01	; 1
     686:	80 93 2a 01 	sts	0x012A, r24
		UDR0 = *outgoing_data_head; 		// start transmition
     68a:	e0 91 06 01 	lds	r30, 0x0106
     68e:	f0 91 07 01 	lds	r31, 0x0107
     692:	80 81       	ld	r24, Z
     694:	80 93 c6 00 	sts	0x00C6, r24
		outgoing_data_head++;
     698:	80 91 06 01 	lds	r24, 0x0106
     69c:	90 91 07 01 	lds	r25, 0x0107
     6a0:	01 96       	adiw	r24, 0x01	; 1
		if (outgoing_data_head >= (outgoing_data + USART_TX_BUFFER_SIZE))
     6a2:	22 e0       	ldi	r18, 0x02	; 2
     6a4:	85 30       	cpi	r24, 0x05	; 5
     6a6:	92 07       	cpc	r25, r18
     6a8:	28 f4       	brcc	.+10     	; 0x6b4 <__vector_19+0x50>
	// check for empty transmit buffer	and if we have data
	if ( 0 != outgoing_data_counter)
	{
		outgoing_data_counter--;
		UDR0 = *outgoing_data_head; 		// start transmition
		outgoing_data_head++;
     6aa:	90 93 07 01 	sts	0x0107, r25
     6ae:	80 93 06 01 	sts	0x0106, r24
     6b2:	0c c0       	rjmp	.+24     	; 0x6cc <__vector_19+0x68>
		if (outgoing_data_head >= (outgoing_data + USART_TX_BUFFER_SIZE))
		{
			outgoing_data_head = outgoing_data;	//reset ring buffer
     6b4:	81 ea       	ldi	r24, 0xA1	; 161
     6b6:	91 e0       	ldi	r25, 0x01	; 1
     6b8:	90 93 07 01 	sts	0x0107, r25
     6bc:	80 93 06 01 	sts	0x0106, r24
     6c0:	05 c0       	rjmp	.+10     	; 0x6cc <__vector_19+0x68>
		}
	}else{
		//Inactivate interrupt
		UCSR0B &= ~(1 << UDRIE0);
     6c2:	e1 ec       	ldi	r30, 0xC1	; 193
     6c4:	f0 e0       	ldi	r31, 0x00	; 0
     6c6:	80 81       	ld	r24, Z
     6c8:	8f 7d       	andi	r24, 0xDF	; 223
     6ca:	80 83       	st	Z, r24
		
	}
}
     6cc:	ff 91       	pop	r31
     6ce:	ef 91       	pop	r30
     6d0:	9f 91       	pop	r25
     6d2:	8f 91       	pop	r24
     6d4:	2f 91       	pop	r18
     6d6:	0f 90       	pop	r0
     6d8:	0f be       	out	0x3f, r0	; 63
     6da:	0f 90       	pop	r0
     6dc:	1f 90       	pop	r1
     6de:	18 95       	reti

000006e0 <__vector_18>:
//Usart receive interrupt
ISR(USART_RX_vect)
{
     6e0:	1f 92       	push	r1
     6e2:	0f 92       	push	r0
     6e4:	0f b6       	in	r0, 0x3f	; 63
     6e6:	0f 92       	push	r0
     6e8:	11 24       	eor	r1, r1
     6ea:	2f 93       	push	r18
     6ec:	8f 93       	push	r24
     6ee:	9f 93       	push	r25
     6f0:	ef 93       	push	r30
     6f2:	ff 93       	push	r31
	//place char into buffer
	*incomming_data_head = UDR0;	//Read from UDR gets RX byte
     6f4:	e0 91 04 01 	lds	r30, 0x0104
     6f8:	f0 91 05 01 	lds	r31, 0x0105
     6fc:	80 91 c6 00 	lds	r24, 0x00C6
     700:	80 83       	st	Z, r24
	
	//increase head
	incomming_data_head++;
     702:	80 91 04 01 	lds	r24, 0x0104
     706:	90 91 05 01 	lds	r25, 0x0105
     70a:	01 96       	adiw	r24, 0x01	; 1
	
	
	//Check for overflow head
	if (incomming_data_head >= (incomming_data + USART_RX_BUFFER_SIZE))
     70c:	21 e0       	ldi	r18, 0x01	; 1
     70e:	81 3a       	cpi	r24, 0xA1	; 161
     710:	92 07       	cpc	r25, r18
     712:	28 f4       	brcc	.+10     	; 0x71e <__vector_18+0x3e>
{
	//place char into buffer
	*incomming_data_head = UDR0;	//Read from UDR gets RX byte
	
	//increase head
	incomming_data_head++;
     714:	90 93 05 01 	sts	0x0105, r25
     718:	80 93 04 01 	sts	0x0104, r24
     71c:	06 c0       	rjmp	.+12     	; 0x72a <__vector_18+0x4a>
	
	//Check for overflow head
	if (incomming_data_head >= (incomming_data + USART_RX_BUFFER_SIZE))
	{
		//End of ring, go around
		incomming_data_head = incomming_data;
     71e:	8d e3       	ldi	r24, 0x3D	; 61
     720:	91 e0       	ldi	r25, 0x01	; 1
     722:	90 93 05 01 	sts	0x0105, r25
     726:	80 93 04 01 	sts	0x0104, r24
	}
	//Check for overflow counter
	if(incomming_data_counter < USART_RX_BUFFER_SIZE)
     72a:	80 91 29 01 	lds	r24, 0x0129
     72e:	84 36       	cpi	r24, 0x64	; 100
     730:	28 f4       	brcc	.+10     	; 0x73c <__vector_18+0x5c>
	{
		incomming_data_counter++;
     732:	80 91 29 01 	lds	r24, 0x0129
     736:	8f 5f       	subi	r24, 0xFF	; 255
     738:	80 93 29 01 	sts	0x0129, r24
	}
}
     73c:	ff 91       	pop	r31
     73e:	ef 91       	pop	r30
     740:	9f 91       	pop	r25
     742:	8f 91       	pop	r24
     744:	2f 91       	pop	r18
     746:	0f 90       	pop	r0
     748:	0f be       	out	0x3f, r0	; 63
     74a:	0f 90       	pop	r0
     74c:	1f 90       	pop	r1
     74e:	18 95       	reti

00000750 <ReceiveByte>:

/* Read and write functions */
char ReceiveByte(char * result)
{
	get_lock();
     750:	f8 94       	cli
	//If we have data
	if (incomming_data_counter > 0)
     752:	20 91 29 01 	lds	r18, 0x0129
     756:	22 23       	and	r18, r18
     758:	c9 f0       	breq	.+50     	; 0x78c <ReceiveByte+0x3c>
	{
		//Assign pointer to data 
		//Read buffer in reverse because we add positive
		volatile char * temp = incomming_data_head - incomming_data_counter;
     75a:	20 91 29 01 	lds	r18, 0x0129
     75e:	e0 91 04 01 	lds	r30, 0x0104
     762:	f0 91 05 01 	lds	r31, 0x0105
     766:	e2 1b       	sub	r30, r18
     768:	f1 09       	sbc	r31, r1
		
		//Check pointer for overflow
		if (temp < incomming_data )
     76a:	21 e0       	ldi	r18, 0x01	; 1
     76c:	ed 33       	cpi	r30, 0x3D	; 61
     76e:	f2 07       	cpc	r31, r18
     770:	10 f4       	brcc	.+4      	; 0x776 <ReceiveByte+0x26>
		{
			temp += USART_RX_BUFFER_SIZE;	//Wrap around
     772:	ec 59       	subi	r30, 0x9C	; 156
     774:	ff 4f       	sbci	r31, 0xFF	; 255
		}
		//Decrease counter
		incomming_data_counter--;
     776:	20 91 29 01 	lds	r18, 0x0129
     77a:	21 50       	subi	r18, 0x01	; 1
     77c:	20 93 29 01 	sts	0x0129, r18

		//return that data
		*result = *temp;
     780:	20 81       	ld	r18, Z
     782:	fc 01       	movw	r30, r24
     784:	20 83       	st	Z, r18
		release_lock();
     786:	78 94       	sei
		
		return 1;
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	08 95       	ret
	} 
	else
	{
		//Else fail
		release_lock();
     78c:	78 94       	sei
		return 0;								// return the data
     78e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     790:	08 95       	ret

00000792 <send_c>:
	return temp;
}

void send_c(char c)
{
	get_lock();
     792:	f8 94       	cli
	//Check if there is space in the buffer
	if (outgoing_data_counter < USART_TX_BUFFER_SIZE)
     794:	90 91 2a 01 	lds	r25, 0x012A
     798:	94 36       	cpi	r25, 0x64	; 100
     79a:	c8 f4       	brcc	.+50     	; 0x7ce <send_c+0x3c>
	{
		volatile char * temp = (outgoing_data_head + outgoing_data_counter);
     79c:	90 91 2a 01 	lds	r25, 0x012A
     7a0:	e0 91 06 01 	lds	r30, 0x0106
     7a4:	f0 91 07 01 	lds	r31, 0x0107
     7a8:	e9 0f       	add	r30, r25
     7aa:	f1 1d       	adc	r31, r1
	
		//Check for overflow
		if (temp >= (outgoing_data + USART_TX_BUFFER_SIZE))
     7ac:	92 e0       	ldi	r25, 0x02	; 2
     7ae:	e5 30       	cpi	r30, 0x05	; 5
     7b0:	f9 07       	cpc	r31, r25
     7b2:	10 f0       	brcs	.+4      	; 0x7b8 <send_c+0x26>
		{
			temp -= USART_TX_BUFFER_SIZE;
     7b4:	e4 56       	subi	r30, 0x64	; 100
     7b6:	f1 09       	sbc	r31, r1
		}

		*temp = c;		//add to queue
     7b8:	80 83       	st	Z, r24
		outgoing_data_counter++;
     7ba:	80 91 2a 01 	lds	r24, 0x012A
     7be:	8f 5f       	subi	r24, 0xFF	; 255
     7c0:	80 93 2a 01 	sts	0x012A, r24
		//Activate TX interrupt
		UCSR0B |= (1 << UDRIE0);
     7c4:	e1 ec       	ldi	r30, 0xC1	; 193
     7c6:	f0 e0       	ldi	r31, 0x00	; 0
     7c8:	80 81       	ld	r24, Z
     7ca:	80 62       	ori	r24, 0x20	; 32
     7cc:	80 83       	st	Z, r24
	}
	release_lock();
     7ce:	78 94       	sei
     7d0:	08 95       	ret

000007d2 <send_string>:
}

int8_t send_string(char data[], uint8_t length)
{
     7d2:	0f 93       	push	r16
     7d4:	1f 93       	push	r17
     7d6:	cf 93       	push	r28
     7d8:	df 93       	push	r29
     7da:	06 2f       	mov	r16, r22
	if (data == 0)	//Check for valid pointer
     7dc:	00 97       	sbiw	r24, 0x00	; 0
     7de:	99 f0       	breq	.+38     	; 0x806 <send_string+0x34>
	{
		return -1;
	}
	//Check for space in buffer
	if ((length + outgoing_data_counter )>= USART_TX_BUFFER_SIZE)
     7e0:	20 91 2a 01 	lds	r18, 0x012A
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	26 0f       	add	r18, r22
     7e8:	31 1d       	adc	r19, r1
     7ea:	24 36       	cpi	r18, 0x64	; 100
     7ec:	31 05       	cpc	r19, r1
     7ee:	6c f4       	brge	.+26     	; 0x80a <send_string+0x38>
	{
		return -2;
	}
	//All good, add to buffer
	for (uint8_t i = 0; i < length; i++ )
     7f0:	66 23       	and	r22, r22
     7f2:	69 f0       	breq	.+26     	; 0x80e <send_string+0x3c>
     7f4:	ec 01       	movw	r28, r24
     7f6:	10 e0       	ldi	r17, 0x00	; 0
	{
		send_c(data[i]);
     7f8:	89 91       	ld	r24, Y+
     7fa:	0e 94 c9 03 	call	0x792	; 0x792 <send_c>
	if ((length + outgoing_data_counter )>= USART_TX_BUFFER_SIZE)
	{
		return -2;
	}
	//All good, add to buffer
	for (uint8_t i = 0; i < length; i++ )
     7fe:	1f 5f       	subi	r17, 0xFF	; 255
     800:	10 13       	cpse	r17, r16
     802:	fa cf       	rjmp	.-12     	; 0x7f8 <send_string+0x26>
     804:	06 c0       	rjmp	.+12     	; 0x812 <send_string+0x40>

int8_t send_string(char data[], uint8_t length)
{
	if (data == 0)	//Check for valid pointer
	{
		return -1;
     806:	8f ef       	ldi	r24, 0xFF	; 255
     808:	05 c0       	rjmp	.+10     	; 0x814 <send_string+0x42>
	}
	//Check for space in buffer
	if ((length + outgoing_data_counter )>= USART_TX_BUFFER_SIZE)
	{
		return -2;
     80a:	8e ef       	ldi	r24, 0xFE	; 254
     80c:	03 c0       	rjmp	.+6      	; 0x814 <send_string+0x42>
	for (uint8_t i = 0; i < length; i++ )
	{
		send_c(data[i]);
	}
	
	return 0;
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	01 c0       	rjmp	.+2      	; 0x814 <send_string+0x42>
     812:	80 e0       	ldi	r24, 0x00	; 0
} 
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	0f 91       	pop	r16
     81c:	08 95       	ret

0000081e <flush_usart>:
void flush_usart()
{
	volatile static int dummy = 0;
	//Wait for empty buffer
	while(//Activate TX interrupt
	UCSR0B & (1 << UDRIE0) )
     81e:	80 91 c1 00 	lds	r24, 0x00C1

void flush_usart()
{
	volatile static int dummy = 0;
	//Wait for empty buffer
	while(//Activate TX interrupt
     822:	85 ff       	sbrs	r24, 5
     824:	0e c0       	rjmp	.+28     	; 0x842 <flush_usart+0x24>
	UCSR0B & (1 << UDRIE0) )
     826:	e1 ec       	ldi	r30, 0xC1	; 193
     828:	f0 e0       	ldi	r31, 0x00	; 0
	{
		dummy++;
     82a:	80 91 27 01 	lds	r24, 0x0127
     82e:	90 91 28 01 	lds	r25, 0x0128
     832:	01 96       	adiw	r24, 0x01	; 1
     834:	90 93 28 01 	sts	0x0128, r25
     838:	80 93 27 01 	sts	0x0127, r24
void flush_usart()
{
	volatile static int dummy = 0;
	//Wait for empty buffer
	while(//Activate TX interrupt
	UCSR0B & (1 << UDRIE0) )
     83c:	80 81       	ld	r24, Z

void flush_usart()
{
	volatile static int dummy = 0;
	//Wait for empty buffer
	while(//Activate TX interrupt
     83e:	85 fd       	sbrc	r24, 5
     840:	f4 cf       	rjmp	.-24     	; 0x82a <flush_usart+0xc>
     842:	08 95       	ret

00000844 <__subsf3>:
     844:	50 58       	subi	r21, 0x80	; 128

00000846 <__addsf3>:
     846:	bb 27       	eor	r27, r27
     848:	aa 27       	eor	r26, r26
     84a:	0e d0       	rcall	.+28     	; 0x868 <__addsf3x>
     84c:	48 c1       	rjmp	.+656    	; 0xade <__fp_round>
     84e:	39 d1       	rcall	.+626    	; 0xac2 <__fp_pscA>
     850:	30 f0       	brcs	.+12     	; 0x85e <__addsf3+0x18>
     852:	3e d1       	rcall	.+636    	; 0xad0 <__fp_pscB>
     854:	20 f0       	brcs	.+8      	; 0x85e <__addsf3+0x18>
     856:	31 f4       	brne	.+12     	; 0x864 <__addsf3+0x1e>
     858:	9f 3f       	cpi	r25, 0xFF	; 255
     85a:	11 f4       	brne	.+4      	; 0x860 <__addsf3+0x1a>
     85c:	1e f4       	brtc	.+6      	; 0x864 <__addsf3+0x1e>
     85e:	2e c1       	rjmp	.+604    	; 0xabc <__fp_nan>
     860:	0e f4       	brtc	.+2      	; 0x864 <__addsf3+0x1e>
     862:	e0 95       	com	r30
     864:	e7 fb       	bst	r30, 7
     866:	24 c1       	rjmp	.+584    	; 0xab0 <__fp_inf>

00000868 <__addsf3x>:
     868:	e9 2f       	mov	r30, r25
     86a:	4a d1       	rcall	.+660    	; 0xb00 <__fp_split3>
     86c:	80 f3       	brcs	.-32     	; 0x84e <__addsf3+0x8>
     86e:	ba 17       	cp	r27, r26
     870:	62 07       	cpc	r22, r18
     872:	73 07       	cpc	r23, r19
     874:	84 07       	cpc	r24, r20
     876:	95 07       	cpc	r25, r21
     878:	18 f0       	brcs	.+6      	; 0x880 <__addsf3x+0x18>
     87a:	71 f4       	brne	.+28     	; 0x898 <__addsf3x+0x30>
     87c:	9e f5       	brtc	.+102    	; 0x8e4 <__addsf3x+0x7c>
     87e:	62 c1       	rjmp	.+708    	; 0xb44 <__fp_zero>
     880:	0e f4       	brtc	.+2      	; 0x884 <__addsf3x+0x1c>
     882:	e0 95       	com	r30
     884:	0b 2e       	mov	r0, r27
     886:	ba 2f       	mov	r27, r26
     888:	a0 2d       	mov	r26, r0
     88a:	0b 01       	movw	r0, r22
     88c:	b9 01       	movw	r22, r18
     88e:	90 01       	movw	r18, r0
     890:	0c 01       	movw	r0, r24
     892:	ca 01       	movw	r24, r20
     894:	a0 01       	movw	r20, r0
     896:	11 24       	eor	r1, r1
     898:	ff 27       	eor	r31, r31
     89a:	59 1b       	sub	r21, r25
     89c:	99 f0       	breq	.+38     	; 0x8c4 <__addsf3x+0x5c>
     89e:	59 3f       	cpi	r21, 0xF9	; 249
     8a0:	50 f4       	brcc	.+20     	; 0x8b6 <__addsf3x+0x4e>
     8a2:	50 3e       	cpi	r21, 0xE0	; 224
     8a4:	68 f1       	brcs	.+90     	; 0x900 <__stack+0x1>
     8a6:	1a 16       	cp	r1, r26
     8a8:	f0 40       	sbci	r31, 0x00	; 0
     8aa:	a2 2f       	mov	r26, r18
     8ac:	23 2f       	mov	r18, r19
     8ae:	34 2f       	mov	r19, r20
     8b0:	44 27       	eor	r20, r20
     8b2:	58 5f       	subi	r21, 0xF8	; 248
     8b4:	f3 cf       	rjmp	.-26     	; 0x89c <__addsf3x+0x34>
     8b6:	46 95       	lsr	r20
     8b8:	37 95       	ror	r19
     8ba:	27 95       	ror	r18
     8bc:	a7 95       	ror	r26
     8be:	f0 40       	sbci	r31, 0x00	; 0
     8c0:	53 95       	inc	r21
     8c2:	c9 f7       	brne	.-14     	; 0x8b6 <__addsf3x+0x4e>
     8c4:	7e f4       	brtc	.+30     	; 0x8e4 <__addsf3x+0x7c>
     8c6:	1f 16       	cp	r1, r31
     8c8:	ba 0b       	sbc	r27, r26
     8ca:	62 0b       	sbc	r22, r18
     8cc:	73 0b       	sbc	r23, r19
     8ce:	84 0b       	sbc	r24, r20
     8d0:	ba f0       	brmi	.+46     	; 0x900 <__stack+0x1>
     8d2:	91 50       	subi	r25, 0x01	; 1
     8d4:	a1 f0       	breq	.+40     	; 0x8fe <__addsf3x+0x96>
     8d6:	ff 0f       	add	r31, r31
     8d8:	bb 1f       	adc	r27, r27
     8da:	66 1f       	adc	r22, r22
     8dc:	77 1f       	adc	r23, r23
     8de:	88 1f       	adc	r24, r24
     8e0:	c2 f7       	brpl	.-16     	; 0x8d2 <__addsf3x+0x6a>
     8e2:	0e c0       	rjmp	.+28     	; 0x900 <__stack+0x1>
     8e4:	ba 0f       	add	r27, r26
     8e6:	62 1f       	adc	r22, r18
     8e8:	73 1f       	adc	r23, r19
     8ea:	84 1f       	adc	r24, r20
     8ec:	48 f4       	brcc	.+18     	; 0x900 <__stack+0x1>
     8ee:	87 95       	ror	r24
     8f0:	77 95       	ror	r23
     8f2:	67 95       	ror	r22
     8f4:	b7 95       	ror	r27
     8f6:	f7 95       	ror	r31
     8f8:	9e 3f       	cpi	r25, 0xFE	; 254
     8fa:	08 f0       	brcs	.+2      	; 0x8fe <__addsf3x+0x96>
     8fc:	b3 cf       	rjmp	.-154    	; 0x864 <__addsf3+0x1e>
     8fe:	93 95       	inc	r25
     900:	88 0f       	add	r24, r24
     902:	08 f0       	brcs	.+2      	; 0x906 <__stack+0x7>
     904:	99 27       	eor	r25, r25
     906:	ee 0f       	add	r30, r30
     908:	97 95       	ror	r25
     90a:	87 95       	ror	r24
     90c:	08 95       	ret

0000090e <__divsf3>:
     90e:	0c d0       	rcall	.+24     	; 0x928 <__divsf3x>
     910:	e6 c0       	rjmp	.+460    	; 0xade <__fp_round>
     912:	de d0       	rcall	.+444    	; 0xad0 <__fp_pscB>
     914:	40 f0       	brcs	.+16     	; 0x926 <__divsf3+0x18>
     916:	d5 d0       	rcall	.+426    	; 0xac2 <__fp_pscA>
     918:	30 f0       	brcs	.+12     	; 0x926 <__divsf3+0x18>
     91a:	21 f4       	brne	.+8      	; 0x924 <__divsf3+0x16>
     91c:	5f 3f       	cpi	r21, 0xFF	; 255
     91e:	19 f0       	breq	.+6      	; 0x926 <__divsf3+0x18>
     920:	c7 c0       	rjmp	.+398    	; 0xab0 <__fp_inf>
     922:	51 11       	cpse	r21, r1
     924:	10 c1       	rjmp	.+544    	; 0xb46 <__fp_szero>
     926:	ca c0       	rjmp	.+404    	; 0xabc <__fp_nan>

00000928 <__divsf3x>:
     928:	eb d0       	rcall	.+470    	; 0xb00 <__fp_split3>
     92a:	98 f3       	brcs	.-26     	; 0x912 <__divsf3+0x4>

0000092c <__divsf3_pse>:
     92c:	99 23       	and	r25, r25
     92e:	c9 f3       	breq	.-14     	; 0x922 <__divsf3+0x14>
     930:	55 23       	and	r21, r21
     932:	b1 f3       	breq	.-20     	; 0x920 <__divsf3+0x12>
     934:	95 1b       	sub	r25, r21
     936:	55 0b       	sbc	r21, r21
     938:	bb 27       	eor	r27, r27
     93a:	aa 27       	eor	r26, r26
     93c:	62 17       	cp	r22, r18
     93e:	73 07       	cpc	r23, r19
     940:	84 07       	cpc	r24, r20
     942:	38 f0       	brcs	.+14     	; 0x952 <__divsf3_pse+0x26>
     944:	9f 5f       	subi	r25, 0xFF	; 255
     946:	5f 4f       	sbci	r21, 0xFF	; 255
     948:	22 0f       	add	r18, r18
     94a:	33 1f       	adc	r19, r19
     94c:	44 1f       	adc	r20, r20
     94e:	aa 1f       	adc	r26, r26
     950:	a9 f3       	breq	.-22     	; 0x93c <__divsf3_pse+0x10>
     952:	33 d0       	rcall	.+102    	; 0x9ba <__divsf3_pse+0x8e>
     954:	0e 2e       	mov	r0, r30
     956:	3a f0       	brmi	.+14     	; 0x966 <__divsf3_pse+0x3a>
     958:	e0 e8       	ldi	r30, 0x80	; 128
     95a:	30 d0       	rcall	.+96     	; 0x9bc <__divsf3_pse+0x90>
     95c:	91 50       	subi	r25, 0x01	; 1
     95e:	50 40       	sbci	r21, 0x00	; 0
     960:	e6 95       	lsr	r30
     962:	00 1c       	adc	r0, r0
     964:	ca f7       	brpl	.-14     	; 0x958 <__divsf3_pse+0x2c>
     966:	29 d0       	rcall	.+82     	; 0x9ba <__divsf3_pse+0x8e>
     968:	fe 2f       	mov	r31, r30
     96a:	27 d0       	rcall	.+78     	; 0x9ba <__divsf3_pse+0x8e>
     96c:	66 0f       	add	r22, r22
     96e:	77 1f       	adc	r23, r23
     970:	88 1f       	adc	r24, r24
     972:	bb 1f       	adc	r27, r27
     974:	26 17       	cp	r18, r22
     976:	37 07       	cpc	r19, r23
     978:	48 07       	cpc	r20, r24
     97a:	ab 07       	cpc	r26, r27
     97c:	b0 e8       	ldi	r27, 0x80	; 128
     97e:	09 f0       	breq	.+2      	; 0x982 <__divsf3_pse+0x56>
     980:	bb 0b       	sbc	r27, r27
     982:	80 2d       	mov	r24, r0
     984:	bf 01       	movw	r22, r30
     986:	ff 27       	eor	r31, r31
     988:	93 58       	subi	r25, 0x83	; 131
     98a:	5f 4f       	sbci	r21, 0xFF	; 255
     98c:	2a f0       	brmi	.+10     	; 0x998 <__divsf3_pse+0x6c>
     98e:	9e 3f       	cpi	r25, 0xFE	; 254
     990:	51 05       	cpc	r21, r1
     992:	68 f0       	brcs	.+26     	; 0x9ae <__divsf3_pse+0x82>
     994:	8d c0       	rjmp	.+282    	; 0xab0 <__fp_inf>
     996:	d7 c0       	rjmp	.+430    	; 0xb46 <__fp_szero>
     998:	5f 3f       	cpi	r21, 0xFF	; 255
     99a:	ec f3       	brlt	.-6      	; 0x996 <__divsf3_pse+0x6a>
     99c:	98 3e       	cpi	r25, 0xE8	; 232
     99e:	dc f3       	brlt	.-10     	; 0x996 <__divsf3_pse+0x6a>
     9a0:	86 95       	lsr	r24
     9a2:	77 95       	ror	r23
     9a4:	67 95       	ror	r22
     9a6:	b7 95       	ror	r27
     9a8:	f7 95       	ror	r31
     9aa:	9f 5f       	subi	r25, 0xFF	; 255
     9ac:	c9 f7       	brne	.-14     	; 0x9a0 <__divsf3_pse+0x74>
     9ae:	88 0f       	add	r24, r24
     9b0:	91 1d       	adc	r25, r1
     9b2:	96 95       	lsr	r25
     9b4:	87 95       	ror	r24
     9b6:	97 f9       	bld	r25, 7
     9b8:	08 95       	ret
     9ba:	e1 e0       	ldi	r30, 0x01	; 1
     9bc:	66 0f       	add	r22, r22
     9be:	77 1f       	adc	r23, r23
     9c0:	88 1f       	adc	r24, r24
     9c2:	bb 1f       	adc	r27, r27
     9c4:	62 17       	cp	r22, r18
     9c6:	73 07       	cpc	r23, r19
     9c8:	84 07       	cpc	r24, r20
     9ca:	ba 07       	cpc	r27, r26
     9cc:	20 f0       	brcs	.+8      	; 0x9d6 <__divsf3_pse+0xaa>
     9ce:	62 1b       	sub	r22, r18
     9d0:	73 0b       	sbc	r23, r19
     9d2:	84 0b       	sbc	r24, r20
     9d4:	ba 0b       	sbc	r27, r26
     9d6:	ee 1f       	adc	r30, r30
     9d8:	88 f7       	brcc	.-30     	; 0x9bc <__divsf3_pse+0x90>
     9da:	e0 95       	com	r30
     9dc:	08 95       	ret

000009de <__fixunssfsi>:
     9de:	98 d0       	rcall	.+304    	; 0xb10 <__fp_splitA>
     9e0:	88 f0       	brcs	.+34     	; 0xa04 <__fixunssfsi+0x26>
     9e2:	9f 57       	subi	r25, 0x7F	; 127
     9e4:	90 f0       	brcs	.+36     	; 0xa0a <__fixunssfsi+0x2c>
     9e6:	b9 2f       	mov	r27, r25
     9e8:	99 27       	eor	r25, r25
     9ea:	b7 51       	subi	r27, 0x17	; 23
     9ec:	a0 f0       	brcs	.+40     	; 0xa16 <__fixunssfsi+0x38>
     9ee:	d1 f0       	breq	.+52     	; 0xa24 <__fixunssfsi+0x46>
     9f0:	66 0f       	add	r22, r22
     9f2:	77 1f       	adc	r23, r23
     9f4:	88 1f       	adc	r24, r24
     9f6:	99 1f       	adc	r25, r25
     9f8:	1a f0       	brmi	.+6      	; 0xa00 <__fixunssfsi+0x22>
     9fa:	ba 95       	dec	r27
     9fc:	c9 f7       	brne	.-14     	; 0x9f0 <__fixunssfsi+0x12>
     9fe:	12 c0       	rjmp	.+36     	; 0xa24 <__fixunssfsi+0x46>
     a00:	b1 30       	cpi	r27, 0x01	; 1
     a02:	81 f0       	breq	.+32     	; 0xa24 <__fixunssfsi+0x46>
     a04:	9f d0       	rcall	.+318    	; 0xb44 <__fp_zero>
     a06:	b1 e0       	ldi	r27, 0x01	; 1
     a08:	08 95       	ret
     a0a:	9c c0       	rjmp	.+312    	; 0xb44 <__fp_zero>
     a0c:	67 2f       	mov	r22, r23
     a0e:	78 2f       	mov	r23, r24
     a10:	88 27       	eor	r24, r24
     a12:	b8 5f       	subi	r27, 0xF8	; 248
     a14:	39 f0       	breq	.+14     	; 0xa24 <__fixunssfsi+0x46>
     a16:	b9 3f       	cpi	r27, 0xF9	; 249
     a18:	cc f3       	brlt	.-14     	; 0xa0c <__fixunssfsi+0x2e>
     a1a:	86 95       	lsr	r24
     a1c:	77 95       	ror	r23
     a1e:	67 95       	ror	r22
     a20:	b3 95       	inc	r27
     a22:	d9 f7       	brne	.-10     	; 0xa1a <__fixunssfsi+0x3c>
     a24:	3e f4       	brtc	.+14     	; 0xa34 <__fixunssfsi+0x56>
     a26:	90 95       	com	r25
     a28:	80 95       	com	r24
     a2a:	70 95       	com	r23
     a2c:	61 95       	neg	r22
     a2e:	7f 4f       	sbci	r23, 0xFF	; 255
     a30:	8f 4f       	sbci	r24, 0xFF	; 255
     a32:	9f 4f       	sbci	r25, 0xFF	; 255
     a34:	08 95       	ret

00000a36 <__floatunsisf>:
     a36:	e8 94       	clt
     a38:	09 c0       	rjmp	.+18     	; 0xa4c <__floatsisf+0x12>

00000a3a <__floatsisf>:
     a3a:	97 fb       	bst	r25, 7
     a3c:	3e f4       	brtc	.+14     	; 0xa4c <__floatsisf+0x12>
     a3e:	90 95       	com	r25
     a40:	80 95       	com	r24
     a42:	70 95       	com	r23
     a44:	61 95       	neg	r22
     a46:	7f 4f       	sbci	r23, 0xFF	; 255
     a48:	8f 4f       	sbci	r24, 0xFF	; 255
     a4a:	9f 4f       	sbci	r25, 0xFF	; 255
     a4c:	99 23       	and	r25, r25
     a4e:	a9 f0       	breq	.+42     	; 0xa7a <__floatsisf+0x40>
     a50:	f9 2f       	mov	r31, r25
     a52:	96 e9       	ldi	r25, 0x96	; 150
     a54:	bb 27       	eor	r27, r27
     a56:	93 95       	inc	r25
     a58:	f6 95       	lsr	r31
     a5a:	87 95       	ror	r24
     a5c:	77 95       	ror	r23
     a5e:	67 95       	ror	r22
     a60:	b7 95       	ror	r27
     a62:	f1 11       	cpse	r31, r1
     a64:	f8 cf       	rjmp	.-16     	; 0xa56 <__floatsisf+0x1c>
     a66:	fa f4       	brpl	.+62     	; 0xaa6 <__floatsisf+0x6c>
     a68:	bb 0f       	add	r27, r27
     a6a:	11 f4       	brne	.+4      	; 0xa70 <__floatsisf+0x36>
     a6c:	60 ff       	sbrs	r22, 0
     a6e:	1b c0       	rjmp	.+54     	; 0xaa6 <__floatsisf+0x6c>
     a70:	6f 5f       	subi	r22, 0xFF	; 255
     a72:	7f 4f       	sbci	r23, 0xFF	; 255
     a74:	8f 4f       	sbci	r24, 0xFF	; 255
     a76:	9f 4f       	sbci	r25, 0xFF	; 255
     a78:	16 c0       	rjmp	.+44     	; 0xaa6 <__floatsisf+0x6c>
     a7a:	88 23       	and	r24, r24
     a7c:	11 f0       	breq	.+4      	; 0xa82 <__floatsisf+0x48>
     a7e:	96 e9       	ldi	r25, 0x96	; 150
     a80:	11 c0       	rjmp	.+34     	; 0xaa4 <__floatsisf+0x6a>
     a82:	77 23       	and	r23, r23
     a84:	21 f0       	breq	.+8      	; 0xa8e <__floatsisf+0x54>
     a86:	9e e8       	ldi	r25, 0x8E	; 142
     a88:	87 2f       	mov	r24, r23
     a8a:	76 2f       	mov	r23, r22
     a8c:	05 c0       	rjmp	.+10     	; 0xa98 <__floatsisf+0x5e>
     a8e:	66 23       	and	r22, r22
     a90:	71 f0       	breq	.+28     	; 0xaae <__floatsisf+0x74>
     a92:	96 e8       	ldi	r25, 0x86	; 134
     a94:	86 2f       	mov	r24, r22
     a96:	70 e0       	ldi	r23, 0x00	; 0
     a98:	60 e0       	ldi	r22, 0x00	; 0
     a9a:	2a f0       	brmi	.+10     	; 0xaa6 <__floatsisf+0x6c>
     a9c:	9a 95       	dec	r25
     a9e:	66 0f       	add	r22, r22
     aa0:	77 1f       	adc	r23, r23
     aa2:	88 1f       	adc	r24, r24
     aa4:	da f7       	brpl	.-10     	; 0xa9c <__floatsisf+0x62>
     aa6:	88 0f       	add	r24, r24
     aa8:	96 95       	lsr	r25
     aaa:	87 95       	ror	r24
     aac:	97 f9       	bld	r25, 7
     aae:	08 95       	ret

00000ab0 <__fp_inf>:
     ab0:	97 f9       	bld	r25, 7
     ab2:	9f 67       	ori	r25, 0x7F	; 127
     ab4:	80 e8       	ldi	r24, 0x80	; 128
     ab6:	70 e0       	ldi	r23, 0x00	; 0
     ab8:	60 e0       	ldi	r22, 0x00	; 0
     aba:	08 95       	ret

00000abc <__fp_nan>:
     abc:	9f ef       	ldi	r25, 0xFF	; 255
     abe:	80 ec       	ldi	r24, 0xC0	; 192
     ac0:	08 95       	ret

00000ac2 <__fp_pscA>:
     ac2:	00 24       	eor	r0, r0
     ac4:	0a 94       	dec	r0
     ac6:	16 16       	cp	r1, r22
     ac8:	17 06       	cpc	r1, r23
     aca:	18 06       	cpc	r1, r24
     acc:	09 06       	cpc	r0, r25
     ace:	08 95       	ret

00000ad0 <__fp_pscB>:
     ad0:	00 24       	eor	r0, r0
     ad2:	0a 94       	dec	r0
     ad4:	12 16       	cp	r1, r18
     ad6:	13 06       	cpc	r1, r19
     ad8:	14 06       	cpc	r1, r20
     ada:	05 06       	cpc	r0, r21
     adc:	08 95       	ret

00000ade <__fp_round>:
     ade:	09 2e       	mov	r0, r25
     ae0:	03 94       	inc	r0
     ae2:	00 0c       	add	r0, r0
     ae4:	11 f4       	brne	.+4      	; 0xaea <__fp_round+0xc>
     ae6:	88 23       	and	r24, r24
     ae8:	52 f0       	brmi	.+20     	; 0xafe <__fp_round+0x20>
     aea:	bb 0f       	add	r27, r27
     aec:	40 f4       	brcc	.+16     	; 0xafe <__fp_round+0x20>
     aee:	bf 2b       	or	r27, r31
     af0:	11 f4       	brne	.+4      	; 0xaf6 <__fp_round+0x18>
     af2:	60 ff       	sbrs	r22, 0
     af4:	04 c0       	rjmp	.+8      	; 0xafe <__fp_round+0x20>
     af6:	6f 5f       	subi	r22, 0xFF	; 255
     af8:	7f 4f       	sbci	r23, 0xFF	; 255
     afa:	8f 4f       	sbci	r24, 0xFF	; 255
     afc:	9f 4f       	sbci	r25, 0xFF	; 255
     afe:	08 95       	ret

00000b00 <__fp_split3>:
     b00:	57 fd       	sbrc	r21, 7
     b02:	90 58       	subi	r25, 0x80	; 128
     b04:	44 0f       	add	r20, r20
     b06:	55 1f       	adc	r21, r21
     b08:	59 f0       	breq	.+22     	; 0xb20 <__fp_splitA+0x10>
     b0a:	5f 3f       	cpi	r21, 0xFF	; 255
     b0c:	71 f0       	breq	.+28     	; 0xb2a <__fp_splitA+0x1a>
     b0e:	47 95       	ror	r20

00000b10 <__fp_splitA>:
     b10:	88 0f       	add	r24, r24
     b12:	97 fb       	bst	r25, 7
     b14:	99 1f       	adc	r25, r25
     b16:	61 f0       	breq	.+24     	; 0xb30 <__fp_splitA+0x20>
     b18:	9f 3f       	cpi	r25, 0xFF	; 255
     b1a:	79 f0       	breq	.+30     	; 0xb3a <__fp_splitA+0x2a>
     b1c:	87 95       	ror	r24
     b1e:	08 95       	ret
     b20:	12 16       	cp	r1, r18
     b22:	13 06       	cpc	r1, r19
     b24:	14 06       	cpc	r1, r20
     b26:	55 1f       	adc	r21, r21
     b28:	f2 cf       	rjmp	.-28     	; 0xb0e <__fp_split3+0xe>
     b2a:	46 95       	lsr	r20
     b2c:	f1 df       	rcall	.-30     	; 0xb10 <__fp_splitA>
     b2e:	08 c0       	rjmp	.+16     	; 0xb40 <__fp_splitA+0x30>
     b30:	16 16       	cp	r1, r22
     b32:	17 06       	cpc	r1, r23
     b34:	18 06       	cpc	r1, r24
     b36:	99 1f       	adc	r25, r25
     b38:	f1 cf       	rjmp	.-30     	; 0xb1c <__fp_splitA+0xc>
     b3a:	86 95       	lsr	r24
     b3c:	71 05       	cpc	r23, r1
     b3e:	61 05       	cpc	r22, r1
     b40:	08 94       	sec
     b42:	08 95       	ret

00000b44 <__fp_zero>:
     b44:	e8 94       	clt

00000b46 <__fp_szero>:
     b46:	bb 27       	eor	r27, r27
     b48:	66 27       	eor	r22, r22
     b4a:	77 27       	eor	r23, r23
     b4c:	cb 01       	movw	r24, r22
     b4e:	97 f9       	bld	r25, 7
     b50:	08 95       	ret

00000b52 <__mulsf3>:
     b52:	0b d0       	rcall	.+22     	; 0xb6a <__mulsf3x>
     b54:	c4 cf       	rjmp	.-120    	; 0xade <__fp_round>
     b56:	b5 df       	rcall	.-150    	; 0xac2 <__fp_pscA>
     b58:	28 f0       	brcs	.+10     	; 0xb64 <__mulsf3+0x12>
     b5a:	ba df       	rcall	.-140    	; 0xad0 <__fp_pscB>
     b5c:	18 f0       	brcs	.+6      	; 0xb64 <__mulsf3+0x12>
     b5e:	95 23       	and	r25, r21
     b60:	09 f0       	breq	.+2      	; 0xb64 <__mulsf3+0x12>
     b62:	a6 cf       	rjmp	.-180    	; 0xab0 <__fp_inf>
     b64:	ab cf       	rjmp	.-170    	; 0xabc <__fp_nan>
     b66:	11 24       	eor	r1, r1
     b68:	ee cf       	rjmp	.-36     	; 0xb46 <__fp_szero>

00000b6a <__mulsf3x>:
     b6a:	ca df       	rcall	.-108    	; 0xb00 <__fp_split3>
     b6c:	a0 f3       	brcs	.-24     	; 0xb56 <__mulsf3+0x4>

00000b6e <__mulsf3_pse>:
     b6e:	95 9f       	mul	r25, r21
     b70:	d1 f3       	breq	.-12     	; 0xb66 <__mulsf3+0x14>
     b72:	95 0f       	add	r25, r21
     b74:	50 e0       	ldi	r21, 0x00	; 0
     b76:	55 1f       	adc	r21, r21
     b78:	62 9f       	mul	r22, r18
     b7a:	f0 01       	movw	r30, r0
     b7c:	72 9f       	mul	r23, r18
     b7e:	bb 27       	eor	r27, r27
     b80:	f0 0d       	add	r31, r0
     b82:	b1 1d       	adc	r27, r1
     b84:	63 9f       	mul	r22, r19
     b86:	aa 27       	eor	r26, r26
     b88:	f0 0d       	add	r31, r0
     b8a:	b1 1d       	adc	r27, r1
     b8c:	aa 1f       	adc	r26, r26
     b8e:	64 9f       	mul	r22, r20
     b90:	66 27       	eor	r22, r22
     b92:	b0 0d       	add	r27, r0
     b94:	a1 1d       	adc	r26, r1
     b96:	66 1f       	adc	r22, r22
     b98:	82 9f       	mul	r24, r18
     b9a:	22 27       	eor	r18, r18
     b9c:	b0 0d       	add	r27, r0
     b9e:	a1 1d       	adc	r26, r1
     ba0:	62 1f       	adc	r22, r18
     ba2:	73 9f       	mul	r23, r19
     ba4:	b0 0d       	add	r27, r0
     ba6:	a1 1d       	adc	r26, r1
     ba8:	62 1f       	adc	r22, r18
     baa:	83 9f       	mul	r24, r19
     bac:	a0 0d       	add	r26, r0
     bae:	61 1d       	adc	r22, r1
     bb0:	22 1f       	adc	r18, r18
     bb2:	74 9f       	mul	r23, r20
     bb4:	33 27       	eor	r19, r19
     bb6:	a0 0d       	add	r26, r0
     bb8:	61 1d       	adc	r22, r1
     bba:	23 1f       	adc	r18, r19
     bbc:	84 9f       	mul	r24, r20
     bbe:	60 0d       	add	r22, r0
     bc0:	21 1d       	adc	r18, r1
     bc2:	82 2f       	mov	r24, r18
     bc4:	76 2f       	mov	r23, r22
     bc6:	6a 2f       	mov	r22, r26
     bc8:	11 24       	eor	r1, r1
     bca:	9f 57       	subi	r25, 0x7F	; 127
     bcc:	50 40       	sbci	r21, 0x00	; 0
     bce:	8a f0       	brmi	.+34     	; 0xbf2 <__mulsf3_pse+0x84>
     bd0:	e1 f0       	breq	.+56     	; 0xc0a <__mulsf3_pse+0x9c>
     bd2:	88 23       	and	r24, r24
     bd4:	4a f0       	brmi	.+18     	; 0xbe8 <__mulsf3_pse+0x7a>
     bd6:	ee 0f       	add	r30, r30
     bd8:	ff 1f       	adc	r31, r31
     bda:	bb 1f       	adc	r27, r27
     bdc:	66 1f       	adc	r22, r22
     bde:	77 1f       	adc	r23, r23
     be0:	88 1f       	adc	r24, r24
     be2:	91 50       	subi	r25, 0x01	; 1
     be4:	50 40       	sbci	r21, 0x00	; 0
     be6:	a9 f7       	brne	.-22     	; 0xbd2 <__mulsf3_pse+0x64>
     be8:	9e 3f       	cpi	r25, 0xFE	; 254
     bea:	51 05       	cpc	r21, r1
     bec:	70 f0       	brcs	.+28     	; 0xc0a <__mulsf3_pse+0x9c>
     bee:	60 cf       	rjmp	.-320    	; 0xab0 <__fp_inf>
     bf0:	aa cf       	rjmp	.-172    	; 0xb46 <__fp_szero>
     bf2:	5f 3f       	cpi	r21, 0xFF	; 255
     bf4:	ec f3       	brlt	.-6      	; 0xbf0 <__mulsf3_pse+0x82>
     bf6:	98 3e       	cpi	r25, 0xE8	; 232
     bf8:	dc f3       	brlt	.-10     	; 0xbf0 <__mulsf3_pse+0x82>
     bfa:	86 95       	lsr	r24
     bfc:	77 95       	ror	r23
     bfe:	67 95       	ror	r22
     c00:	b7 95       	ror	r27
     c02:	f7 95       	ror	r31
     c04:	e7 95       	ror	r30
     c06:	9f 5f       	subi	r25, 0xFF	; 255
     c08:	c1 f7       	brne	.-16     	; 0xbfa <__mulsf3_pse+0x8c>
     c0a:	fe 2b       	or	r31, r30
     c0c:	88 0f       	add	r24, r24
     c0e:	91 1d       	adc	r25, r1
     c10:	96 95       	lsr	r25
     c12:	87 95       	ror	r24
     c14:	97 f9       	bld	r25, 7
     c16:	08 95       	ret

00000c18 <__udivmodsi4>:
     c18:	a1 e2       	ldi	r26, 0x21	; 33
     c1a:	1a 2e       	mov	r1, r26
     c1c:	aa 1b       	sub	r26, r26
     c1e:	bb 1b       	sub	r27, r27
     c20:	fd 01       	movw	r30, r26
     c22:	0d c0       	rjmp	.+26     	; 0xc3e <__udivmodsi4_ep>

00000c24 <__udivmodsi4_loop>:
     c24:	aa 1f       	adc	r26, r26
     c26:	bb 1f       	adc	r27, r27
     c28:	ee 1f       	adc	r30, r30
     c2a:	ff 1f       	adc	r31, r31
     c2c:	a2 17       	cp	r26, r18
     c2e:	b3 07       	cpc	r27, r19
     c30:	e4 07       	cpc	r30, r20
     c32:	f5 07       	cpc	r31, r21
     c34:	20 f0       	brcs	.+8      	; 0xc3e <__udivmodsi4_ep>
     c36:	a2 1b       	sub	r26, r18
     c38:	b3 0b       	sbc	r27, r19
     c3a:	e4 0b       	sbc	r30, r20
     c3c:	f5 0b       	sbc	r31, r21

00000c3e <__udivmodsi4_ep>:
     c3e:	66 1f       	adc	r22, r22
     c40:	77 1f       	adc	r23, r23
     c42:	88 1f       	adc	r24, r24
     c44:	99 1f       	adc	r25, r25
     c46:	1a 94       	dec	r1
     c48:	69 f7       	brne	.-38     	; 0xc24 <__udivmodsi4_loop>
     c4a:	60 95       	com	r22
     c4c:	70 95       	com	r23
     c4e:	80 95       	com	r24
     c50:	90 95       	com	r25
     c52:	9b 01       	movw	r18, r22
     c54:	ac 01       	movw	r20, r24
     c56:	bd 01       	movw	r22, r26
     c58:	cf 01       	movw	r24, r30
     c5a:	08 95       	ret

00000c5c <printf>:
     c5c:	a0 e0       	ldi	r26, 0x00	; 0
     c5e:	b0 e0       	ldi	r27, 0x00	; 0
     c60:	e4 e3       	ldi	r30, 0x34	; 52
     c62:	f6 e0       	ldi	r31, 0x06	; 6
     c64:	0c 94 ca 08 	jmp	0x1194	; 0x1194 <__prologue_saves__+0x20>
     c68:	fe 01       	movw	r30, r28
     c6a:	35 96       	adiw	r30, 0x05	; 5
     c6c:	61 91       	ld	r22, Z+
     c6e:	71 91       	ld	r23, Z+
     c70:	af 01       	movw	r20, r30
     c72:	80 91 07 02 	lds	r24, 0x0207
     c76:	90 91 08 02 	lds	r25, 0x0208
     c7a:	0e 94 42 06 	call	0xc84	; 0xc84 <vfprintf>
     c7e:	e2 e0       	ldi	r30, 0x02	; 2
     c80:	0c 94 e6 08 	jmp	0x11cc	; 0x11cc <__epilogue_restores__+0x20>

00000c84 <vfprintf>:
     c84:	ac e0       	ldi	r26, 0x0C	; 12
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	e8 e4       	ldi	r30, 0x48	; 72
     c8a:	f6 e0       	ldi	r31, 0x06	; 6
     c8c:	0c 94 ba 08 	jmp	0x1174	; 0x1174 <__prologue_saves__>
     c90:	7c 01       	movw	r14, r24
     c92:	6b 01       	movw	r12, r22
     c94:	8a 01       	movw	r16, r20
     c96:	fc 01       	movw	r30, r24
     c98:	17 82       	std	Z+7, r1	; 0x07
     c9a:	16 82       	std	Z+6, r1	; 0x06
     c9c:	83 81       	ldd	r24, Z+3	; 0x03
     c9e:	81 ff       	sbrs	r24, 1
     ca0:	bd c1       	rjmp	.+890    	; 0x101c <vfprintf+0x398>
     ca2:	ce 01       	movw	r24, r28
     ca4:	01 96       	adiw	r24, 0x01	; 1
     ca6:	4c 01       	movw	r8, r24
     ca8:	f7 01       	movw	r30, r14
     caa:	93 81       	ldd	r25, Z+3	; 0x03
     cac:	f6 01       	movw	r30, r12
     cae:	93 fd       	sbrc	r25, 3
     cb0:	85 91       	lpm	r24, Z+
     cb2:	93 ff       	sbrs	r25, 3
     cb4:	81 91       	ld	r24, Z+
     cb6:	6f 01       	movw	r12, r30
     cb8:	88 23       	and	r24, r24
     cba:	09 f4       	brne	.+2      	; 0xcbe <vfprintf+0x3a>
     cbc:	ab c1       	rjmp	.+854    	; 0x1014 <vfprintf+0x390>
     cbe:	85 32       	cpi	r24, 0x25	; 37
     cc0:	39 f4       	brne	.+14     	; 0xcd0 <vfprintf+0x4c>
     cc2:	93 fd       	sbrc	r25, 3
     cc4:	85 91       	lpm	r24, Z+
     cc6:	93 ff       	sbrs	r25, 3
     cc8:	81 91       	ld	r24, Z+
     cca:	6f 01       	movw	r12, r30
     ccc:	85 32       	cpi	r24, 0x25	; 37
     cce:	29 f4       	brne	.+10     	; 0xcda <vfprintf+0x56>
     cd0:	b7 01       	movw	r22, r14
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	0e 94 2a 08 	call	0x1054	; 0x1054 <fputc>
     cd8:	e7 cf       	rjmp	.-50     	; 0xca8 <vfprintf+0x24>
     cda:	51 2c       	mov	r5, r1
     cdc:	31 2c       	mov	r3, r1
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	20 32       	cpi	r18, 0x20	; 32
     ce2:	a0 f4       	brcc	.+40     	; 0xd0c <vfprintf+0x88>
     ce4:	8b 32       	cpi	r24, 0x2B	; 43
     ce6:	69 f0       	breq	.+26     	; 0xd02 <vfprintf+0x7e>
     ce8:	30 f4       	brcc	.+12     	; 0xcf6 <vfprintf+0x72>
     cea:	80 32       	cpi	r24, 0x20	; 32
     cec:	59 f0       	breq	.+22     	; 0xd04 <vfprintf+0x80>
     cee:	83 32       	cpi	r24, 0x23	; 35
     cf0:	69 f4       	brne	.+26     	; 0xd0c <vfprintf+0x88>
     cf2:	20 61       	ori	r18, 0x10	; 16
     cf4:	2c c0       	rjmp	.+88     	; 0xd4e <vfprintf+0xca>
     cf6:	8d 32       	cpi	r24, 0x2D	; 45
     cf8:	39 f0       	breq	.+14     	; 0xd08 <vfprintf+0x84>
     cfa:	80 33       	cpi	r24, 0x30	; 48
     cfc:	39 f4       	brne	.+14     	; 0xd0c <vfprintf+0x88>
     cfe:	21 60       	ori	r18, 0x01	; 1
     d00:	26 c0       	rjmp	.+76     	; 0xd4e <vfprintf+0xca>
     d02:	22 60       	ori	r18, 0x02	; 2
     d04:	24 60       	ori	r18, 0x04	; 4
     d06:	23 c0       	rjmp	.+70     	; 0xd4e <vfprintf+0xca>
     d08:	28 60       	ori	r18, 0x08	; 8
     d0a:	21 c0       	rjmp	.+66     	; 0xd4e <vfprintf+0xca>
     d0c:	27 fd       	sbrc	r18, 7
     d0e:	27 c0       	rjmp	.+78     	; 0xd5e <vfprintf+0xda>
     d10:	30 ed       	ldi	r19, 0xD0	; 208
     d12:	38 0f       	add	r19, r24
     d14:	3a 30       	cpi	r19, 0x0A	; 10
     d16:	78 f4       	brcc	.+30     	; 0xd36 <vfprintf+0xb2>
     d18:	26 ff       	sbrs	r18, 6
     d1a:	06 c0       	rjmp	.+12     	; 0xd28 <vfprintf+0xa4>
     d1c:	fa e0       	ldi	r31, 0x0A	; 10
     d1e:	5f 9e       	mul	r5, r31
     d20:	30 0d       	add	r19, r0
     d22:	11 24       	eor	r1, r1
     d24:	53 2e       	mov	r5, r19
     d26:	13 c0       	rjmp	.+38     	; 0xd4e <vfprintf+0xca>
     d28:	8a e0       	ldi	r24, 0x0A	; 10
     d2a:	38 9e       	mul	r3, r24
     d2c:	30 0d       	add	r19, r0
     d2e:	11 24       	eor	r1, r1
     d30:	33 2e       	mov	r3, r19
     d32:	20 62       	ori	r18, 0x20	; 32
     d34:	0c c0       	rjmp	.+24     	; 0xd4e <vfprintf+0xca>
     d36:	8e 32       	cpi	r24, 0x2E	; 46
     d38:	21 f4       	brne	.+8      	; 0xd42 <vfprintf+0xbe>
     d3a:	26 fd       	sbrc	r18, 6
     d3c:	6b c1       	rjmp	.+726    	; 0x1014 <vfprintf+0x390>
     d3e:	20 64       	ori	r18, 0x40	; 64
     d40:	06 c0       	rjmp	.+12     	; 0xd4e <vfprintf+0xca>
     d42:	8c 36       	cpi	r24, 0x6C	; 108
     d44:	11 f4       	brne	.+4      	; 0xd4a <vfprintf+0xc6>
     d46:	20 68       	ori	r18, 0x80	; 128
     d48:	02 c0       	rjmp	.+4      	; 0xd4e <vfprintf+0xca>
     d4a:	88 36       	cpi	r24, 0x68	; 104
     d4c:	41 f4       	brne	.+16     	; 0xd5e <vfprintf+0xda>
     d4e:	f6 01       	movw	r30, r12
     d50:	93 fd       	sbrc	r25, 3
     d52:	85 91       	lpm	r24, Z+
     d54:	93 ff       	sbrs	r25, 3
     d56:	81 91       	ld	r24, Z+
     d58:	6f 01       	movw	r12, r30
     d5a:	81 11       	cpse	r24, r1
     d5c:	c1 cf       	rjmp	.-126    	; 0xce0 <vfprintf+0x5c>
     d5e:	98 2f       	mov	r25, r24
     d60:	9f 7d       	andi	r25, 0xDF	; 223
     d62:	95 54       	subi	r25, 0x45	; 69
     d64:	93 30       	cpi	r25, 0x03	; 3
     d66:	28 f4       	brcc	.+10     	; 0xd72 <vfprintf+0xee>
     d68:	0c 5f       	subi	r16, 0xFC	; 252
     d6a:	1f 4f       	sbci	r17, 0xFF	; 255
     d6c:	ff e3       	ldi	r31, 0x3F	; 63
     d6e:	f9 83       	std	Y+1, r31	; 0x01
     d70:	0d c0       	rjmp	.+26     	; 0xd8c <vfprintf+0x108>
     d72:	83 36       	cpi	r24, 0x63	; 99
     d74:	31 f0       	breq	.+12     	; 0xd82 <vfprintf+0xfe>
     d76:	83 37       	cpi	r24, 0x73	; 115
     d78:	71 f0       	breq	.+28     	; 0xd96 <vfprintf+0x112>
     d7a:	83 35       	cpi	r24, 0x53	; 83
     d7c:	09 f0       	breq	.+2      	; 0xd80 <vfprintf+0xfc>
     d7e:	5b c0       	rjmp	.+182    	; 0xe36 <vfprintf+0x1b2>
     d80:	22 c0       	rjmp	.+68     	; 0xdc6 <vfprintf+0x142>
     d82:	f8 01       	movw	r30, r16
     d84:	80 81       	ld	r24, Z
     d86:	89 83       	std	Y+1, r24	; 0x01
     d88:	0e 5f       	subi	r16, 0xFE	; 254
     d8a:	1f 4f       	sbci	r17, 0xFF	; 255
     d8c:	44 24       	eor	r4, r4
     d8e:	43 94       	inc	r4
     d90:	51 2c       	mov	r5, r1
     d92:	54 01       	movw	r10, r8
     d94:	15 c0       	rjmp	.+42     	; 0xdc0 <vfprintf+0x13c>
     d96:	38 01       	movw	r6, r16
     d98:	f2 e0       	ldi	r31, 0x02	; 2
     d9a:	6f 0e       	add	r6, r31
     d9c:	71 1c       	adc	r7, r1
     d9e:	f8 01       	movw	r30, r16
     da0:	a0 80       	ld	r10, Z
     da2:	b1 80       	ldd	r11, Z+1	; 0x01
     da4:	26 ff       	sbrs	r18, 6
     da6:	03 c0       	rjmp	.+6      	; 0xdae <vfprintf+0x12a>
     da8:	65 2d       	mov	r22, r5
     daa:	70 e0       	ldi	r23, 0x00	; 0
     dac:	02 c0       	rjmp	.+4      	; 0xdb2 <vfprintf+0x12e>
     dae:	6f ef       	ldi	r22, 0xFF	; 255
     db0:	7f ef       	ldi	r23, 0xFF	; 255
     db2:	c5 01       	movw	r24, r10
     db4:	2c 87       	std	Y+12, r18	; 0x0c
     db6:	0e 94 1f 08 	call	0x103e	; 0x103e <strnlen>
     dba:	2c 01       	movw	r4, r24
     dbc:	83 01       	movw	r16, r6
     dbe:	2c 85       	ldd	r18, Y+12	; 0x0c
     dc0:	2f 77       	andi	r18, 0x7F	; 127
     dc2:	22 2e       	mov	r2, r18
     dc4:	17 c0       	rjmp	.+46     	; 0xdf4 <vfprintf+0x170>
     dc6:	38 01       	movw	r6, r16
     dc8:	f2 e0       	ldi	r31, 0x02	; 2
     dca:	6f 0e       	add	r6, r31
     dcc:	71 1c       	adc	r7, r1
     dce:	f8 01       	movw	r30, r16
     dd0:	a0 80       	ld	r10, Z
     dd2:	b1 80       	ldd	r11, Z+1	; 0x01
     dd4:	26 ff       	sbrs	r18, 6
     dd6:	03 c0       	rjmp	.+6      	; 0xdde <vfprintf+0x15a>
     dd8:	65 2d       	mov	r22, r5
     dda:	70 e0       	ldi	r23, 0x00	; 0
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <vfprintf+0x15e>
     dde:	6f ef       	ldi	r22, 0xFF	; 255
     de0:	7f ef       	ldi	r23, 0xFF	; 255
     de2:	c5 01       	movw	r24, r10
     de4:	2c 87       	std	Y+12, r18	; 0x0c
     de6:	0e 94 14 08 	call	0x1028	; 0x1028 <strnlen_P>
     dea:	2c 01       	movw	r4, r24
     dec:	2c 85       	ldd	r18, Y+12	; 0x0c
     dee:	20 68       	ori	r18, 0x80	; 128
     df0:	22 2e       	mov	r2, r18
     df2:	83 01       	movw	r16, r6
     df4:	23 fc       	sbrc	r2, 3
     df6:	1b c0       	rjmp	.+54     	; 0xe2e <vfprintf+0x1aa>
     df8:	83 2d       	mov	r24, r3
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	48 16       	cp	r4, r24
     dfe:	59 06       	cpc	r5, r25
     e00:	b0 f4       	brcc	.+44     	; 0xe2e <vfprintf+0x1aa>
     e02:	b7 01       	movw	r22, r14
     e04:	80 e2       	ldi	r24, 0x20	; 32
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	0e 94 2a 08 	call	0x1054	; 0x1054 <fputc>
     e0c:	3a 94       	dec	r3
     e0e:	f4 cf       	rjmp	.-24     	; 0xdf8 <vfprintf+0x174>
     e10:	f5 01       	movw	r30, r10
     e12:	27 fc       	sbrc	r2, 7
     e14:	85 91       	lpm	r24, Z+
     e16:	27 fe       	sbrs	r2, 7
     e18:	81 91       	ld	r24, Z+
     e1a:	5f 01       	movw	r10, r30
     e1c:	b7 01       	movw	r22, r14
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	0e 94 2a 08 	call	0x1054	; 0x1054 <fputc>
     e24:	31 10       	cpse	r3, r1
     e26:	3a 94       	dec	r3
     e28:	f1 e0       	ldi	r31, 0x01	; 1
     e2a:	4f 1a       	sub	r4, r31
     e2c:	51 08       	sbc	r5, r1
     e2e:	41 14       	cp	r4, r1
     e30:	51 04       	cpc	r5, r1
     e32:	71 f7       	brne	.-36     	; 0xe10 <vfprintf+0x18c>
     e34:	e5 c0       	rjmp	.+458    	; 0x1000 <vfprintf+0x37c>
     e36:	84 36       	cpi	r24, 0x64	; 100
     e38:	11 f0       	breq	.+4      	; 0xe3e <vfprintf+0x1ba>
     e3a:	89 36       	cpi	r24, 0x69	; 105
     e3c:	39 f5       	brne	.+78     	; 0xe8c <vfprintf+0x208>
     e3e:	f8 01       	movw	r30, r16
     e40:	27 ff       	sbrs	r18, 7
     e42:	07 c0       	rjmp	.+14     	; 0xe52 <vfprintf+0x1ce>
     e44:	60 81       	ld	r22, Z
     e46:	71 81       	ldd	r23, Z+1	; 0x01
     e48:	82 81       	ldd	r24, Z+2	; 0x02
     e4a:	93 81       	ldd	r25, Z+3	; 0x03
     e4c:	0c 5f       	subi	r16, 0xFC	; 252
     e4e:	1f 4f       	sbci	r17, 0xFF	; 255
     e50:	08 c0       	rjmp	.+16     	; 0xe62 <vfprintf+0x1de>
     e52:	60 81       	ld	r22, Z
     e54:	71 81       	ldd	r23, Z+1	; 0x01
     e56:	88 27       	eor	r24, r24
     e58:	77 fd       	sbrc	r23, 7
     e5a:	80 95       	com	r24
     e5c:	98 2f       	mov	r25, r24
     e5e:	0e 5f       	subi	r16, 0xFE	; 254
     e60:	1f 4f       	sbci	r17, 0xFF	; 255
     e62:	2f 76       	andi	r18, 0x6F	; 111
     e64:	b2 2e       	mov	r11, r18
     e66:	97 ff       	sbrs	r25, 7
     e68:	09 c0       	rjmp	.+18     	; 0xe7c <vfprintf+0x1f8>
     e6a:	90 95       	com	r25
     e6c:	80 95       	com	r24
     e6e:	70 95       	com	r23
     e70:	61 95       	neg	r22
     e72:	7f 4f       	sbci	r23, 0xFF	; 255
     e74:	8f 4f       	sbci	r24, 0xFF	; 255
     e76:	9f 4f       	sbci	r25, 0xFF	; 255
     e78:	20 68       	ori	r18, 0x80	; 128
     e7a:	b2 2e       	mov	r11, r18
     e7c:	2a e0       	ldi	r18, 0x0A	; 10
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	a4 01       	movw	r20, r8
     e82:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <__ultoa_invert>
     e86:	a8 2e       	mov	r10, r24
     e88:	a8 18       	sub	r10, r8
     e8a:	44 c0       	rjmp	.+136    	; 0xf14 <vfprintf+0x290>
     e8c:	85 37       	cpi	r24, 0x75	; 117
     e8e:	29 f4       	brne	.+10     	; 0xe9a <vfprintf+0x216>
     e90:	2f 7e       	andi	r18, 0xEF	; 239
     e92:	b2 2e       	mov	r11, r18
     e94:	2a e0       	ldi	r18, 0x0A	; 10
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	25 c0       	rjmp	.+74     	; 0xee4 <vfprintf+0x260>
     e9a:	f2 2f       	mov	r31, r18
     e9c:	f9 7f       	andi	r31, 0xF9	; 249
     e9e:	bf 2e       	mov	r11, r31
     ea0:	8f 36       	cpi	r24, 0x6F	; 111
     ea2:	c1 f0       	breq	.+48     	; 0xed4 <vfprintf+0x250>
     ea4:	18 f4       	brcc	.+6      	; 0xeac <vfprintf+0x228>
     ea6:	88 35       	cpi	r24, 0x58	; 88
     ea8:	79 f0       	breq	.+30     	; 0xec8 <vfprintf+0x244>
     eaa:	b4 c0       	rjmp	.+360    	; 0x1014 <vfprintf+0x390>
     eac:	80 37       	cpi	r24, 0x70	; 112
     eae:	19 f0       	breq	.+6      	; 0xeb6 <vfprintf+0x232>
     eb0:	88 37       	cpi	r24, 0x78	; 120
     eb2:	21 f0       	breq	.+8      	; 0xebc <vfprintf+0x238>
     eb4:	af c0       	rjmp	.+350    	; 0x1014 <vfprintf+0x390>
     eb6:	2f 2f       	mov	r18, r31
     eb8:	20 61       	ori	r18, 0x10	; 16
     eba:	b2 2e       	mov	r11, r18
     ebc:	b4 fe       	sbrs	r11, 4
     ebe:	0d c0       	rjmp	.+26     	; 0xeda <vfprintf+0x256>
     ec0:	8b 2d       	mov	r24, r11
     ec2:	84 60       	ori	r24, 0x04	; 4
     ec4:	b8 2e       	mov	r11, r24
     ec6:	09 c0       	rjmp	.+18     	; 0xeda <vfprintf+0x256>
     ec8:	24 ff       	sbrs	r18, 4
     eca:	0a c0       	rjmp	.+20     	; 0xee0 <vfprintf+0x25c>
     ecc:	9f 2f       	mov	r25, r31
     ece:	96 60       	ori	r25, 0x06	; 6
     ed0:	b9 2e       	mov	r11, r25
     ed2:	06 c0       	rjmp	.+12     	; 0xee0 <vfprintf+0x25c>
     ed4:	28 e0       	ldi	r18, 0x08	; 8
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <vfprintf+0x260>
     eda:	20 e1       	ldi	r18, 0x10	; 16
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <vfprintf+0x260>
     ee0:	20 e1       	ldi	r18, 0x10	; 16
     ee2:	32 e0       	ldi	r19, 0x02	; 2
     ee4:	f8 01       	movw	r30, r16
     ee6:	b7 fe       	sbrs	r11, 7
     ee8:	07 c0       	rjmp	.+14     	; 0xef8 <vfprintf+0x274>
     eea:	60 81       	ld	r22, Z
     eec:	71 81       	ldd	r23, Z+1	; 0x01
     eee:	82 81       	ldd	r24, Z+2	; 0x02
     ef0:	93 81       	ldd	r25, Z+3	; 0x03
     ef2:	0c 5f       	subi	r16, 0xFC	; 252
     ef4:	1f 4f       	sbci	r17, 0xFF	; 255
     ef6:	06 c0       	rjmp	.+12     	; 0xf04 <vfprintf+0x280>
     ef8:	60 81       	ld	r22, Z
     efa:	71 81       	ldd	r23, Z+1	; 0x01
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	0e 5f       	subi	r16, 0xFE	; 254
     f02:	1f 4f       	sbci	r17, 0xFF	; 255
     f04:	a4 01       	movw	r20, r8
     f06:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <__ultoa_invert>
     f0a:	a8 2e       	mov	r10, r24
     f0c:	a8 18       	sub	r10, r8
     f0e:	fb 2d       	mov	r31, r11
     f10:	ff 77       	andi	r31, 0x7F	; 127
     f12:	bf 2e       	mov	r11, r31
     f14:	b6 fe       	sbrs	r11, 6
     f16:	0b c0       	rjmp	.+22     	; 0xf2e <vfprintf+0x2aa>
     f18:	2b 2d       	mov	r18, r11
     f1a:	2e 7f       	andi	r18, 0xFE	; 254
     f1c:	a5 14       	cp	r10, r5
     f1e:	50 f4       	brcc	.+20     	; 0xf34 <vfprintf+0x2b0>
     f20:	b4 fe       	sbrs	r11, 4
     f22:	0a c0       	rjmp	.+20     	; 0xf38 <vfprintf+0x2b4>
     f24:	b2 fc       	sbrc	r11, 2
     f26:	08 c0       	rjmp	.+16     	; 0xf38 <vfprintf+0x2b4>
     f28:	2b 2d       	mov	r18, r11
     f2a:	2e 7e       	andi	r18, 0xEE	; 238
     f2c:	05 c0       	rjmp	.+10     	; 0xf38 <vfprintf+0x2b4>
     f2e:	7a 2c       	mov	r7, r10
     f30:	2b 2d       	mov	r18, r11
     f32:	03 c0       	rjmp	.+6      	; 0xf3a <vfprintf+0x2b6>
     f34:	7a 2c       	mov	r7, r10
     f36:	01 c0       	rjmp	.+2      	; 0xf3a <vfprintf+0x2b6>
     f38:	75 2c       	mov	r7, r5
     f3a:	24 ff       	sbrs	r18, 4
     f3c:	0d c0       	rjmp	.+26     	; 0xf58 <vfprintf+0x2d4>
     f3e:	fe 01       	movw	r30, r28
     f40:	ea 0d       	add	r30, r10
     f42:	f1 1d       	adc	r31, r1
     f44:	80 81       	ld	r24, Z
     f46:	80 33       	cpi	r24, 0x30	; 48
     f48:	11 f4       	brne	.+4      	; 0xf4e <vfprintf+0x2ca>
     f4a:	29 7e       	andi	r18, 0xE9	; 233
     f4c:	09 c0       	rjmp	.+18     	; 0xf60 <vfprintf+0x2dc>
     f4e:	22 ff       	sbrs	r18, 2
     f50:	06 c0       	rjmp	.+12     	; 0xf5e <vfprintf+0x2da>
     f52:	73 94       	inc	r7
     f54:	73 94       	inc	r7
     f56:	04 c0       	rjmp	.+8      	; 0xf60 <vfprintf+0x2dc>
     f58:	82 2f       	mov	r24, r18
     f5a:	86 78       	andi	r24, 0x86	; 134
     f5c:	09 f0       	breq	.+2      	; 0xf60 <vfprintf+0x2dc>
     f5e:	73 94       	inc	r7
     f60:	23 fd       	sbrc	r18, 3
     f62:	13 c0       	rjmp	.+38     	; 0xf8a <vfprintf+0x306>
     f64:	20 ff       	sbrs	r18, 0
     f66:	06 c0       	rjmp	.+12     	; 0xf74 <vfprintf+0x2f0>
     f68:	5a 2c       	mov	r5, r10
     f6a:	73 14       	cp	r7, r3
     f6c:	18 f4       	brcc	.+6      	; 0xf74 <vfprintf+0x2f0>
     f6e:	53 0c       	add	r5, r3
     f70:	57 18       	sub	r5, r7
     f72:	73 2c       	mov	r7, r3
     f74:	73 14       	cp	r7, r3
     f76:	68 f4       	brcc	.+26     	; 0xf92 <vfprintf+0x30e>
     f78:	b7 01       	movw	r22, r14
     f7a:	80 e2       	ldi	r24, 0x20	; 32
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	2c 87       	std	Y+12, r18	; 0x0c
     f80:	0e 94 2a 08 	call	0x1054	; 0x1054 <fputc>
     f84:	73 94       	inc	r7
     f86:	2c 85       	ldd	r18, Y+12	; 0x0c
     f88:	f5 cf       	rjmp	.-22     	; 0xf74 <vfprintf+0x2f0>
     f8a:	73 14       	cp	r7, r3
     f8c:	10 f4       	brcc	.+4      	; 0xf92 <vfprintf+0x30e>
     f8e:	37 18       	sub	r3, r7
     f90:	01 c0       	rjmp	.+2      	; 0xf94 <vfprintf+0x310>
     f92:	31 2c       	mov	r3, r1
     f94:	24 ff       	sbrs	r18, 4
     f96:	12 c0       	rjmp	.+36     	; 0xfbc <vfprintf+0x338>
     f98:	b7 01       	movw	r22, r14
     f9a:	80 e3       	ldi	r24, 0x30	; 48
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	2c 87       	std	Y+12, r18	; 0x0c
     fa0:	0e 94 2a 08 	call	0x1054	; 0x1054 <fputc>
     fa4:	2c 85       	ldd	r18, Y+12	; 0x0c
     fa6:	22 ff       	sbrs	r18, 2
     fa8:	17 c0       	rjmp	.+46     	; 0xfd8 <vfprintf+0x354>
     faa:	21 ff       	sbrs	r18, 1
     fac:	03 c0       	rjmp	.+6      	; 0xfb4 <vfprintf+0x330>
     fae:	88 e5       	ldi	r24, 0x58	; 88
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <vfprintf+0x334>
     fb4:	88 e7       	ldi	r24, 0x78	; 120
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	b7 01       	movw	r22, r14
     fba:	0c c0       	rjmp	.+24     	; 0xfd4 <vfprintf+0x350>
     fbc:	82 2f       	mov	r24, r18
     fbe:	86 78       	andi	r24, 0x86	; 134
     fc0:	59 f0       	breq	.+22     	; 0xfd8 <vfprintf+0x354>
     fc2:	21 fd       	sbrc	r18, 1
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <vfprintf+0x346>
     fc6:	80 e2       	ldi	r24, 0x20	; 32
     fc8:	01 c0       	rjmp	.+2      	; 0xfcc <vfprintf+0x348>
     fca:	8b e2       	ldi	r24, 0x2B	; 43
     fcc:	27 fd       	sbrc	r18, 7
     fce:	8d e2       	ldi	r24, 0x2D	; 45
     fd0:	b7 01       	movw	r22, r14
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	0e 94 2a 08 	call	0x1054	; 0x1054 <fputc>
     fd8:	a5 14       	cp	r10, r5
     fda:	38 f4       	brcc	.+14     	; 0xfea <vfprintf+0x366>
     fdc:	b7 01       	movw	r22, r14
     fde:	80 e3       	ldi	r24, 0x30	; 48
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	0e 94 2a 08 	call	0x1054	; 0x1054 <fputc>
     fe6:	5a 94       	dec	r5
     fe8:	f7 cf       	rjmp	.-18     	; 0xfd8 <vfprintf+0x354>
     fea:	aa 94       	dec	r10
     fec:	f4 01       	movw	r30, r8
     fee:	ea 0d       	add	r30, r10
     ff0:	f1 1d       	adc	r31, r1
     ff2:	80 81       	ld	r24, Z
     ff4:	b7 01       	movw	r22, r14
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	0e 94 2a 08 	call	0x1054	; 0x1054 <fputc>
     ffc:	a1 10       	cpse	r10, r1
     ffe:	f5 cf       	rjmp	.-22     	; 0xfea <vfprintf+0x366>
    1000:	33 20       	and	r3, r3
    1002:	09 f4       	brne	.+2      	; 0x1006 <vfprintf+0x382>
    1004:	51 ce       	rjmp	.-862    	; 0xca8 <vfprintf+0x24>
    1006:	b7 01       	movw	r22, r14
    1008:	80 e2       	ldi	r24, 0x20	; 32
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	0e 94 2a 08 	call	0x1054	; 0x1054 <fputc>
    1010:	3a 94       	dec	r3
    1012:	f6 cf       	rjmp	.-20     	; 0x1000 <vfprintf+0x37c>
    1014:	f7 01       	movw	r30, r14
    1016:	86 81       	ldd	r24, Z+6	; 0x06
    1018:	97 81       	ldd	r25, Z+7	; 0x07
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <vfprintf+0x39c>
    101c:	8f ef       	ldi	r24, 0xFF	; 255
    101e:	9f ef       	ldi	r25, 0xFF	; 255
    1020:	2c 96       	adiw	r28, 0x0c	; 12
    1022:	e2 e1       	ldi	r30, 0x12	; 18
    1024:	0c 94 d6 08 	jmp	0x11ac	; 0x11ac <__epilogue_restores__>

00001028 <strnlen_P>:
    1028:	fc 01       	movw	r30, r24
    102a:	05 90       	lpm	r0, Z+
    102c:	61 50       	subi	r22, 0x01	; 1
    102e:	70 40       	sbci	r23, 0x00	; 0
    1030:	01 10       	cpse	r0, r1
    1032:	d8 f7       	brcc	.-10     	; 0x102a <strnlen_P+0x2>
    1034:	80 95       	com	r24
    1036:	90 95       	com	r25
    1038:	8e 0f       	add	r24, r30
    103a:	9f 1f       	adc	r25, r31
    103c:	08 95       	ret

0000103e <strnlen>:
    103e:	fc 01       	movw	r30, r24
    1040:	61 50       	subi	r22, 0x01	; 1
    1042:	70 40       	sbci	r23, 0x00	; 0
    1044:	01 90       	ld	r0, Z+
    1046:	01 10       	cpse	r0, r1
    1048:	d8 f7       	brcc	.-10     	; 0x1040 <strnlen+0x2>
    104a:	80 95       	com	r24
    104c:	90 95       	com	r25
    104e:	8e 0f       	add	r24, r30
    1050:	9f 1f       	adc	r25, r31
    1052:	08 95       	ret

00001054 <fputc>:
    1054:	0f 93       	push	r16
    1056:	1f 93       	push	r17
    1058:	cf 93       	push	r28
    105a:	df 93       	push	r29
    105c:	18 2f       	mov	r17, r24
    105e:	09 2f       	mov	r16, r25
    1060:	eb 01       	movw	r28, r22
    1062:	8b 81       	ldd	r24, Y+3	; 0x03
    1064:	81 fd       	sbrc	r24, 1
    1066:	03 c0       	rjmp	.+6      	; 0x106e <fputc+0x1a>
    1068:	8f ef       	ldi	r24, 0xFF	; 255
    106a:	9f ef       	ldi	r25, 0xFF	; 255
    106c:	20 c0       	rjmp	.+64     	; 0x10ae <fputc+0x5a>
    106e:	82 ff       	sbrs	r24, 2
    1070:	10 c0       	rjmp	.+32     	; 0x1092 <fputc+0x3e>
    1072:	4e 81       	ldd	r20, Y+6	; 0x06
    1074:	5f 81       	ldd	r21, Y+7	; 0x07
    1076:	2c 81       	ldd	r18, Y+4	; 0x04
    1078:	3d 81       	ldd	r19, Y+5	; 0x05
    107a:	42 17       	cp	r20, r18
    107c:	53 07       	cpc	r21, r19
    107e:	7c f4       	brge	.+30     	; 0x109e <fputc+0x4a>
    1080:	e8 81       	ld	r30, Y
    1082:	f9 81       	ldd	r31, Y+1	; 0x01
    1084:	9f 01       	movw	r18, r30
    1086:	2f 5f       	subi	r18, 0xFF	; 255
    1088:	3f 4f       	sbci	r19, 0xFF	; 255
    108a:	39 83       	std	Y+1, r19	; 0x01
    108c:	28 83       	st	Y, r18
    108e:	10 83       	st	Z, r17
    1090:	06 c0       	rjmp	.+12     	; 0x109e <fputc+0x4a>
    1092:	e8 85       	ldd	r30, Y+8	; 0x08
    1094:	f9 85       	ldd	r31, Y+9	; 0x09
    1096:	81 2f       	mov	r24, r17
    1098:	09 95       	icall
    109a:	89 2b       	or	r24, r25
    109c:	29 f7       	brne	.-54     	; 0x1068 <fputc+0x14>
    109e:	2e 81       	ldd	r18, Y+6	; 0x06
    10a0:	3f 81       	ldd	r19, Y+7	; 0x07
    10a2:	2f 5f       	subi	r18, 0xFF	; 255
    10a4:	3f 4f       	sbci	r19, 0xFF	; 255
    10a6:	3f 83       	std	Y+7, r19	; 0x07
    10a8:	2e 83       	std	Y+6, r18	; 0x06
    10aa:	81 2f       	mov	r24, r17
    10ac:	90 2f       	mov	r25, r16
    10ae:	df 91       	pop	r29
    10b0:	cf 91       	pop	r28
    10b2:	1f 91       	pop	r17
    10b4:	0f 91       	pop	r16
    10b6:	08 95       	ret

000010b8 <__ultoa_invert>:
    10b8:	fa 01       	movw	r30, r20
    10ba:	aa 27       	eor	r26, r26
    10bc:	28 30       	cpi	r18, 0x08	; 8
    10be:	51 f1       	breq	.+84     	; 0x1114 <__ultoa_invert+0x5c>
    10c0:	20 31       	cpi	r18, 0x10	; 16
    10c2:	81 f1       	breq	.+96     	; 0x1124 <__ultoa_invert+0x6c>
    10c4:	e8 94       	clt
    10c6:	6f 93       	push	r22
    10c8:	6e 7f       	andi	r22, 0xFE	; 254
    10ca:	6e 5f       	subi	r22, 0xFE	; 254
    10cc:	7f 4f       	sbci	r23, 0xFF	; 255
    10ce:	8f 4f       	sbci	r24, 0xFF	; 255
    10d0:	9f 4f       	sbci	r25, 0xFF	; 255
    10d2:	af 4f       	sbci	r26, 0xFF	; 255
    10d4:	b1 e0       	ldi	r27, 0x01	; 1
    10d6:	3e d0       	rcall	.+124    	; 0x1154 <__ultoa_invert+0x9c>
    10d8:	b4 e0       	ldi	r27, 0x04	; 4
    10da:	3c d0       	rcall	.+120    	; 0x1154 <__ultoa_invert+0x9c>
    10dc:	67 0f       	add	r22, r23
    10de:	78 1f       	adc	r23, r24
    10e0:	89 1f       	adc	r24, r25
    10e2:	9a 1f       	adc	r25, r26
    10e4:	a1 1d       	adc	r26, r1
    10e6:	68 0f       	add	r22, r24
    10e8:	79 1f       	adc	r23, r25
    10ea:	8a 1f       	adc	r24, r26
    10ec:	91 1d       	adc	r25, r1
    10ee:	a1 1d       	adc	r26, r1
    10f0:	6a 0f       	add	r22, r26
    10f2:	71 1d       	adc	r23, r1
    10f4:	81 1d       	adc	r24, r1
    10f6:	91 1d       	adc	r25, r1
    10f8:	a1 1d       	adc	r26, r1
    10fa:	20 d0       	rcall	.+64     	; 0x113c <__ultoa_invert+0x84>
    10fc:	09 f4       	brne	.+2      	; 0x1100 <__ultoa_invert+0x48>
    10fe:	68 94       	set
    1100:	3f 91       	pop	r19
    1102:	2a e0       	ldi	r18, 0x0A	; 10
    1104:	26 9f       	mul	r18, r22
    1106:	11 24       	eor	r1, r1
    1108:	30 19       	sub	r19, r0
    110a:	30 5d       	subi	r19, 0xD0	; 208
    110c:	31 93       	st	Z+, r19
    110e:	de f6       	brtc	.-74     	; 0x10c6 <__ultoa_invert+0xe>
    1110:	cf 01       	movw	r24, r30
    1112:	08 95       	ret
    1114:	46 2f       	mov	r20, r22
    1116:	47 70       	andi	r20, 0x07	; 7
    1118:	40 5d       	subi	r20, 0xD0	; 208
    111a:	41 93       	st	Z+, r20
    111c:	b3 e0       	ldi	r27, 0x03	; 3
    111e:	0f d0       	rcall	.+30     	; 0x113e <__ultoa_invert+0x86>
    1120:	c9 f7       	brne	.-14     	; 0x1114 <__ultoa_invert+0x5c>
    1122:	f6 cf       	rjmp	.-20     	; 0x1110 <__ultoa_invert+0x58>
    1124:	46 2f       	mov	r20, r22
    1126:	4f 70       	andi	r20, 0x0F	; 15
    1128:	40 5d       	subi	r20, 0xD0	; 208
    112a:	4a 33       	cpi	r20, 0x3A	; 58
    112c:	18 f0       	brcs	.+6      	; 0x1134 <__ultoa_invert+0x7c>
    112e:	49 5d       	subi	r20, 0xD9	; 217
    1130:	31 fd       	sbrc	r19, 1
    1132:	40 52       	subi	r20, 0x20	; 32
    1134:	41 93       	st	Z+, r20
    1136:	02 d0       	rcall	.+4      	; 0x113c <__ultoa_invert+0x84>
    1138:	a9 f7       	brne	.-22     	; 0x1124 <__ultoa_invert+0x6c>
    113a:	ea cf       	rjmp	.-44     	; 0x1110 <__ultoa_invert+0x58>
    113c:	b4 e0       	ldi	r27, 0x04	; 4
    113e:	a6 95       	lsr	r26
    1140:	97 95       	ror	r25
    1142:	87 95       	ror	r24
    1144:	77 95       	ror	r23
    1146:	67 95       	ror	r22
    1148:	ba 95       	dec	r27
    114a:	c9 f7       	brne	.-14     	; 0x113e <__ultoa_invert+0x86>
    114c:	00 97       	sbiw	r24, 0x00	; 0
    114e:	61 05       	cpc	r22, r1
    1150:	71 05       	cpc	r23, r1
    1152:	08 95       	ret
    1154:	9b 01       	movw	r18, r22
    1156:	ac 01       	movw	r20, r24
    1158:	0a 2e       	mov	r0, r26
    115a:	06 94       	lsr	r0
    115c:	57 95       	ror	r21
    115e:	47 95       	ror	r20
    1160:	37 95       	ror	r19
    1162:	27 95       	ror	r18
    1164:	ba 95       	dec	r27
    1166:	c9 f7       	brne	.-14     	; 0x115a <__ultoa_invert+0xa2>
    1168:	62 0f       	add	r22, r18
    116a:	73 1f       	adc	r23, r19
    116c:	84 1f       	adc	r24, r20
    116e:	95 1f       	adc	r25, r21
    1170:	a0 1d       	adc	r26, r0
    1172:	08 95       	ret

00001174 <__prologue_saves__>:
    1174:	2f 92       	push	r2
    1176:	3f 92       	push	r3
    1178:	4f 92       	push	r4
    117a:	5f 92       	push	r5
    117c:	6f 92       	push	r6
    117e:	7f 92       	push	r7
    1180:	8f 92       	push	r8
    1182:	9f 92       	push	r9
    1184:	af 92       	push	r10
    1186:	bf 92       	push	r11
    1188:	cf 92       	push	r12
    118a:	df 92       	push	r13
    118c:	ef 92       	push	r14
    118e:	ff 92       	push	r15
    1190:	0f 93       	push	r16
    1192:	1f 93       	push	r17
    1194:	cf 93       	push	r28
    1196:	df 93       	push	r29
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62
    119c:	ca 1b       	sub	r28, r26
    119e:	db 0b       	sbc	r29, r27
    11a0:	0f b6       	in	r0, 0x3f	; 63
    11a2:	f8 94       	cli
    11a4:	de bf       	out	0x3e, r29	; 62
    11a6:	0f be       	out	0x3f, r0	; 63
    11a8:	cd bf       	out	0x3d, r28	; 61
    11aa:	09 94       	ijmp

000011ac <__epilogue_restores__>:
    11ac:	2a 88       	ldd	r2, Y+18	; 0x12
    11ae:	39 88       	ldd	r3, Y+17	; 0x11
    11b0:	48 88       	ldd	r4, Y+16	; 0x10
    11b2:	5f 84       	ldd	r5, Y+15	; 0x0f
    11b4:	6e 84       	ldd	r6, Y+14	; 0x0e
    11b6:	7d 84       	ldd	r7, Y+13	; 0x0d
    11b8:	8c 84       	ldd	r8, Y+12	; 0x0c
    11ba:	9b 84       	ldd	r9, Y+11	; 0x0b
    11bc:	aa 84       	ldd	r10, Y+10	; 0x0a
    11be:	b9 84       	ldd	r11, Y+9	; 0x09
    11c0:	c8 84       	ldd	r12, Y+8	; 0x08
    11c2:	df 80       	ldd	r13, Y+7	; 0x07
    11c4:	ee 80       	ldd	r14, Y+6	; 0x06
    11c6:	fd 80       	ldd	r15, Y+5	; 0x05
    11c8:	0c 81       	ldd	r16, Y+4	; 0x04
    11ca:	1b 81       	ldd	r17, Y+3	; 0x03
    11cc:	aa 81       	ldd	r26, Y+2	; 0x02
    11ce:	b9 81       	ldd	r27, Y+1	; 0x01
    11d0:	ce 0f       	add	r28, r30
    11d2:	d1 1d       	adc	r29, r1
    11d4:	0f b6       	in	r0, 0x3f	; 63
    11d6:	f8 94       	cli
    11d8:	de bf       	out	0x3e, r29	; 62
    11da:	0f be       	out	0x3f, r0	; 63
    11dc:	cd bf       	out	0x3d, r28	; 61
    11de:	ed 01       	movw	r28, r26
    11e0:	08 95       	ret

000011e2 <_exit>:
    11e2:	f8 94       	cli

000011e4 <__stop_program>:
    11e4:	ff cf       	rjmp	.-2      	; 0x11e4 <__stop_program>
