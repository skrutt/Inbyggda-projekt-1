
robot_firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  0000169e  00001732  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000169e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ea  00800120  00800120  00001752  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001752  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000160  00000000  00000000  000017ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000146c  00000000  00000000  0000190e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008b5  00000000  00000000  00002d7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007d1  00000000  00000000  0000362f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000384  00000000  00000000  00003e00  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000603  00000000  00000000  00004184  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f80  00000000  00000000  00004787  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000140  00000000  00000000  00005707  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
       4:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
       8:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
       c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      10:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      14:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      18:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      1c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      20:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      24:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      28:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      2c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      30:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      34:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      38:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      3c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      40:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      44:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      48:	0c 94 67 04 	jmp	0x8ce	; 0x8ce <__vector_18>
      4c:	0c 94 29 04 	jmp	0x852	; 0x852 <__vector_19>
      50:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      54:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      58:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      5c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      60:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      64:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <__vector_18+0x16>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__ctors_end>:
      ea:	11 24       	eor	r1, r1
      ec:	1f be       	out	0x3f, r1	; 63
      ee:	cf ef       	ldi	r28, 0xFF	; 255
      f0:	d8 e0       	ldi	r29, 0x08	; 8
      f2:	de bf       	out	0x3e, r29	; 62
      f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_copy_data>:
      f6:	11 e0       	ldi	r17, 0x01	; 1
      f8:	a0 e0       	ldi	r26, 0x00	; 0
      fa:	b1 e0       	ldi	r27, 0x01	; 1
      fc:	ee e9       	ldi	r30, 0x9E	; 158
      fe:	f6 e1       	ldi	r31, 0x16	; 22
     100:	02 c0       	rjmp	.+4      	; 0x106 <__do_copy_data+0x10>
     102:	05 90       	lpm	r0, Z+
     104:	0d 92       	st	X+, r0
     106:	a0 32       	cpi	r26, 0x20	; 32
     108:	b1 07       	cpc	r27, r17
     10a:	d9 f7       	brne	.-10     	; 0x102 <__do_copy_data+0xc>

0000010c <__do_clear_bss>:
     10c:	22 e0       	ldi	r18, 0x02	; 2
     10e:	a0 e2       	ldi	r26, 0x20	; 32
     110:	b1 e0       	ldi	r27, 0x01	; 1
     112:	01 c0       	rjmp	.+2      	; 0x116 <.do_clear_bss_start>

00000114 <.do_clear_bss_loop>:
     114:	1d 92       	st	X+, r1

00000116 <.do_clear_bss_start>:
     116:	aa 30       	cpi	r26, 0x0A	; 10
     118:	b2 07       	cpc	r27, r18
     11a:	e1 f7       	brne	.-8      	; 0x114 <.do_clear_bss_loop>
     11c:	0e 94 a9 01 	call	0x352	; 0x352 <main>
     120:	0c 94 4d 0b 	jmp	0x169a	; 0x169a <_exit>

00000124 <__bad_interrupt>:
     124:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000128 <motor_pwm_init>:
	
	motor_set_direction(motor, 1);
}

void motor_pwm_init() {
	DDRD |= (1 << PORTD6) | (1 << PORTD5);
     128:	8a b1       	in	r24, 0x0a	; 10
     12a:	80 66       	ori	r24, 0x60	; 96
     12c:	8a b9       	out	0x0a, r24	; 10

	TCCR0A |= (1 << WGM00) | (1 << COM0A1) | (1 << COM0B1);		// PWM, Phase Correct
     12e:	84 b5       	in	r24, 0x24	; 36
     130:	81 6a       	ori	r24, 0xA1	; 161
     132:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS02);										// 256 prescaler (ska väl kanske ändras)
     134:	85 b5       	in	r24, 0x25	; 37
     136:	84 60       	ori	r24, 0x04	; 4
     138:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;													// Reset TCNT0
     13a:	16 bc       	out	0x26, r1	; 38
	
	OCR0A = 0;
     13c:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0;
     13e:	18 bc       	out	0x28, r1	; 40
     140:	08 95       	ret

00000142 <motor_set_throttle>:
}

void motor_set_throttle(Motor *motor, uint8_t th, float scale) 
{
     142:	6f 92       	push	r6
     144:	7f 92       	push	r7
     146:	8f 92       	push	r8
     148:	9f 92       	push	r9
     14a:	af 92       	push	r10
     14c:	bf 92       	push	r11
     14e:	cf 92       	push	r12
     150:	df 92       	push	r13
     152:	ef 92       	push	r14
     154:	ff 92       	push	r15
     156:	0f 93       	push	r16
     158:	1f 93       	push	r17
     15a:	cf 93       	push	r28
     15c:	df 93       	push	r29
     15e:	ec 01       	movw	r28, r24
     160:	76 2e       	mov	r7, r22
     162:	69 01       	movw	r12, r18
     164:	7a 01       	movw	r14, r20
	const float max_in = 127;
	float max_ut = 255 - motor->throttle_offset;
     166:	68 80       	ld	r6, Y
     168:	06 2d       	mov	r16, r6
     16a:	11 27       	eor	r17, r17
     16c:	07 fd       	sbrc	r16, 7
     16e:	10 95       	com	r17
	float	perc = th / max_in;
     170:	70 e0       	ldi	r23, 0x00	; 0
	uint8_t finalThrottle = (perc * max_ut * scale + 0.5) + motor->throttle_offset;
	
	
	
	
	if(th + motor->throttle_offset > 255) {
     172:	c8 01       	movw	r24, r16
     174:	86 0f       	add	r24, r22
     176:	97 1f       	adc	r25, r23
     178:	8f 3f       	cpi	r24, 0xFF	; 255
     17a:	91 05       	cpc	r25, r1
     17c:	09 f0       	breq	.+2      	; 0x180 <motor_set_throttle+0x3e>
     17e:	ec f5       	brge	.+122    	; 0x1fa <motor_set_throttle+0xb8>
		finalThrottle = 255;
	}
	else if(th + motor->throttle_offset < 0) {
     180:	99 23       	and	r25, r25
     182:	ec f1       	brlt	.+122    	; 0x1fe <motor_set_throttle+0xbc>

void motor_set_throttle(Motor *motor, uint8_t th, float scale) 
{
	const float max_in = 127;
	float max_ut = 255 - motor->throttle_offset;
	float	perc = th / max_in;
     184:	88 27       	eor	r24, r24
     186:	77 fd       	sbrc	r23, 7
     188:	80 95       	com	r24
     18a:	98 2f       	mov	r25, r24
     18c:	0e 94 14 06 	call	0xc28	; 0xc28 <__floatsisf>
     190:	20 e0       	ldi	r18, 0x00	; 0
     192:	30 e0       	ldi	r19, 0x00	; 0
     194:	4e ef       	ldi	r20, 0xFE	; 254
     196:	52 e4       	ldi	r21, 0x42	; 66
     198:	0e 94 7e 05 	call	0xafc	; 0xafc <__divsf3>
     19c:	4b 01       	movw	r8, r22
     19e:	5c 01       	movw	r10, r24
}

void motor_set_throttle(Motor *motor, uint8_t th, float scale) 
{
	const float max_in = 127;
	float max_ut = 255 - motor->throttle_offset;
     1a0:	6f ef       	ldi	r22, 0xFF	; 255
     1a2:	70 e0       	ldi	r23, 0x00	; 0
     1a4:	60 1b       	sub	r22, r16
     1a6:	71 0b       	sbc	r23, r17
     1a8:	88 27       	eor	r24, r24
     1aa:	77 fd       	sbrc	r23, 7
     1ac:	80 95       	com	r24
     1ae:	98 2f       	mov	r25, r24
     1b0:	0e 94 14 06 	call	0xc28	; 0xc28 <__floatsisf>
     1b4:	9b 01       	movw	r18, r22
     1b6:	ac 01       	movw	r20, r24
	float	perc = th / max_in;
	uint8_t finalThrottle = (perc * max_ut * scale + 0.5) + motor->throttle_offset;
     1b8:	c5 01       	movw	r24, r10
     1ba:	b4 01       	movw	r22, r8
     1bc:	0e 94 a0 06 	call	0xd40	; 0xd40 <__mulsf3>
     1c0:	a7 01       	movw	r20, r14
     1c2:	96 01       	movw	r18, r12
     1c4:	0e 94 a0 06 	call	0xd40	; 0xd40 <__mulsf3>
     1c8:	20 e0       	ldi	r18, 0x00	; 0
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	40 e0       	ldi	r20, 0x00	; 0
     1ce:	5f e3       	ldi	r21, 0x3F	; 63
     1d0:	0e 94 1a 05 	call	0xa34	; 0xa34 <__addsf3>
     1d4:	6b 01       	movw	r12, r22
     1d6:	7c 01       	movw	r14, r24
     1d8:	66 2d       	mov	r22, r6
     1da:	77 27       	eor	r23, r23
     1dc:	67 fd       	sbrc	r22, 7
     1de:	70 95       	com	r23
     1e0:	87 2f       	mov	r24, r23
     1e2:	97 2f       	mov	r25, r23
     1e4:	0e 94 14 06 	call	0xc28	; 0xc28 <__floatsisf>
     1e8:	9b 01       	movw	r18, r22
     1ea:	ac 01       	movw	r20, r24
     1ec:	c7 01       	movw	r24, r14
     1ee:	b6 01       	movw	r22, r12
     1f0:	0e 94 1a 05 	call	0xa34	; 0xa34 <__addsf3>
     1f4:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__fixunssfsi>
     1f8:	03 c0       	rjmp	.+6      	; 0x200 <motor_set_throttle+0xbe>
	
	
	
	
	if(th + motor->throttle_offset > 255) {
		finalThrottle = 255;
     1fa:	6f ef       	ldi	r22, 0xFF	; 255
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <motor_set_throttle+0xbe>
	}
	else if(th + motor->throttle_offset < 0) {
		finalThrottle = 0;
     1fe:	60 e0       	ldi	r22, 0x00	; 0
	}
	//Set to stop!
	if (th == 0)
     200:	71 10       	cpse	r7, r1
     202:	01 c0       	rjmp	.+2      	; 0x206 <motor_set_throttle+0xc4>
	{
		finalThrottle = 0;
     204:	60 e0       	ldi	r22, 0x00	; 0
	}
	
	// Reverse PWM output if going in reverse.
	if(motor->direction == 0) {
     206:	8b 81       	ldd	r24, Y+3	; 0x03
     208:	81 11       	cpse	r24, r1
     20a:	01 c0       	rjmp	.+2      	; 0x20e <motor_set_throttle+0xcc>
		finalThrottle = 255 - finalThrottle;
     20c:	60 95       	com	r22
	}
	
	*(motor->OCR) = finalThrottle;
     20e:	e9 81       	ldd	r30, Y+1	; 0x01
     210:	fa 81       	ldd	r31, Y+2	; 0x02
     212:	60 83       	st	Z, r22
}
     214:	df 91       	pop	r29
     216:	cf 91       	pop	r28
     218:	1f 91       	pop	r17
     21a:	0f 91       	pop	r16
     21c:	ff 90       	pop	r15
     21e:	ef 90       	pop	r14
     220:	df 90       	pop	r13
     222:	cf 90       	pop	r12
     224:	bf 90       	pop	r11
     226:	af 90       	pop	r10
     228:	9f 90       	pop	r9
     22a:	8f 90       	pop	r8
     22c:	7f 90       	pop	r7
     22e:	6f 90       	pop	r6
     230:	08 95       	ret

00000232 <motor_set_direction>:

void motor_set_direction(Motor *motor, uint8_t dir) {
     232:	fc 01       	movw	r30, r24
	if(dir == 1) {
     234:	61 30       	cpi	r22, 0x01	; 1
     236:	91 f4       	brne	.+36     	; 0x25c <motor_set_direction+0x2a>
		motor->direction = dir;
     238:	81 e0       	ldi	r24, 0x01	; 1
     23a:	83 83       	std	Z+3, r24	; 0x03
		*(motor->dirPort) &= ~(1 << motor->dirPin);
     23c:	a4 81       	ldd	r26, Z+4	; 0x04
     23e:	b5 81       	ldd	r27, Z+5	; 0x05
     240:	4c 91       	ld	r20, X
     242:	21 e0       	ldi	r18, 0x01	; 1
     244:	30 e0       	ldi	r19, 0x00	; 0
     246:	c9 01       	movw	r24, r18
     248:	06 80       	ldd	r0, Z+6	; 0x06
     24a:	02 c0       	rjmp	.+4      	; 0x250 <motor_set_direction+0x1e>
     24c:	88 0f       	add	r24, r24
     24e:	99 1f       	adc	r25, r25
     250:	0a 94       	dec	r0
     252:	e2 f7       	brpl	.-8      	; 0x24c <motor_set_direction+0x1a>
     254:	80 95       	com	r24
     256:	84 23       	and	r24, r20
     258:	8c 93       	st	X, r24
     25a:	08 95       	ret
	}
	else if(dir == 0) {
     25c:	61 11       	cpse	r22, r1
     25e:	0f c0       	rjmp	.+30     	; 0x27e <motor_set_direction+0x4c>
		motor->direction = dir;
     260:	13 82       	std	Z+3, r1	; 0x03
		*(motor->dirPort) |= (1 << motor->dirPin);
     262:	a4 81       	ldd	r26, Z+4	; 0x04
     264:	b5 81       	ldd	r27, Z+5	; 0x05
     266:	4c 91       	ld	r20, X
     268:	21 e0       	ldi	r18, 0x01	; 1
     26a:	30 e0       	ldi	r19, 0x00	; 0
     26c:	c9 01       	movw	r24, r18
     26e:	06 80       	ldd	r0, Z+6	; 0x06
     270:	02 c0       	rjmp	.+4      	; 0x276 <motor_set_direction+0x44>
     272:	88 0f       	add	r24, r24
     274:	99 1f       	adc	r25, r25
     276:	0a 94       	dec	r0
     278:	e2 f7       	brpl	.-8      	; 0x272 <motor_set_direction+0x40>
     27a:	84 2b       	or	r24, r20
     27c:	8c 93       	st	X, r24
     27e:	08 95       	ret

00000280 <motor_init>:
#include "motor.h"

void motor_init(Motor *motor, uint8_t th_offset, volatile uint8_t *OCR, volatile uint8_t *DDR, volatile uint8_t *dirPort, uint8_t dirPin) {
     280:	ef 92       	push	r14
     282:	ff 92       	push	r15
     284:	0f 93       	push	r16
     286:	1f 93       	push	r17
	motor->throttle_offset = th_offset;
     288:	fc 01       	movw	r30, r24
     28a:	60 83       	st	Z, r22
	motor->OCR = OCR;
     28c:	52 83       	std	Z+2, r21	; 0x02
     28e:	41 83       	std	Z+1, r20	; 0x01
	motor->dirPort = dirPort;
     290:	15 83       	std	Z+5, r17	; 0x05
     292:	04 83       	std	Z+4, r16	; 0x04
	motor->dirPin = dirPin;
     294:	e6 82       	std	Z+6, r14	; 0x06
	*DDR |= (1 << dirPin);
     296:	f9 01       	movw	r30, r18
     298:	60 81       	ld	r22, Z
     29a:	41 e0       	ldi	r20, 0x01	; 1
     29c:	50 e0       	ldi	r21, 0x00	; 0
     29e:	fa 01       	movw	r30, r20
     2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <motor_init+0x26>
     2a2:	ee 0f       	add	r30, r30
     2a4:	ff 1f       	adc	r31, r31
     2a6:	ea 94       	dec	r14
     2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <motor_init+0x22>
     2aa:	7f 01       	movw	r14, r30
     2ac:	e6 2a       	or	r14, r22
     2ae:	f9 01       	movw	r30, r18
     2b0:	e0 82       	st	Z, r14
	
	motor_set_direction(motor, 1);
     2b2:	61 e0       	ldi	r22, 0x01	; 1
     2b4:	0e 94 19 01 	call	0x232	; 0x232 <motor_set_direction>
}
     2b8:	1f 91       	pop	r17
     2ba:	0f 91       	pop	r16
     2bc:	ff 90       	pop	r15
     2be:	ef 90       	pop	r14
     2c0:	08 95       	ret

000002c2 <enable_transmit>:
#define TRANSMIT_PORT_DDR	DDRC

//Set transmit high
void enable_transmit()
{
	TRANSMIT_PORT_DDR |= TRANSMIT_PIN;
     2c2:	3c 9a       	sbi	0x07, 4	; 7
	TRANSMIT_PORT	|= TRANSMIT_PIN;
     2c4:	44 9a       	sbi	0x08, 4	; 8
     2c6:	08 95       	ret

000002c8 <disable_transmit>:
}
//Set transmit low
void disable_transmit()
{
	TRANSMIT_PORT_DDR |= TRANSMIT_PIN;
     2c8:	3c 9a       	sbi	0x07, 4	; 7
	TRANSMIT_PORT	&= ~TRANSMIT_PIN;
     2ca:	88 b1       	in	r24, 0x08	; 8
     2cc:	80 7e       	andi	r24, 0xE0	; 224
     2ce:	88 b9       	out	0x08, r24	; 8
     2d0:	08 95       	ret

000002d2 <uart_putchar>:

FILE mystdout;

int uart_putchar(char c, FILE *stream) 
{ 
	send_c(c);
     2d2:	0e 94 c0 04 	call	0x980	; 0x980 <send_c>
	return 0;
}
     2d6:	80 e0       	ldi	r24, 0x00	; 0
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	08 95       	ret

000002dc <irSensor>:
	TRANSMIT_PORT	&= ~TRANSMIT_PIN;
}

uint8_t irSensor(uint16_t adc)
{
	if(adc < 115) {
     2dc:	83 37       	cpi	r24, 0x73	; 115
     2de:	91 05       	cpc	r25, r1
     2e0:	f8 f0       	brcs	.+62     	; 0x320 <irSensor+0x44>
		return 99;
	}
	else if(adc > 857) {
     2e2:	8a 35       	cpi	r24, 0x5A	; 90
     2e4:	23 e0       	ldi	r18, 0x03	; 3
     2e6:	92 07       	cpc	r25, r18
     2e8:	e8 f4       	brcc	.+58     	; 0x324 <irSensor+0x48>
		return 0;	
	}
	
	//translate into voltage
	double volt = 0.0035*adc;
     2ea:	bc 01       	movw	r22, r24
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	0e 94 12 06 	call	0xc24	; 0xc24 <__floatunsisf>
     2f4:	22 e4       	ldi	r18, 0x42	; 66
     2f6:	30 e6       	ldi	r19, 0x60	; 96
     2f8:	45 e6       	ldi	r20, 0x65	; 101
     2fa:	5b e3       	ldi	r21, 0x3B	; 59
     2fc:	0e 94 a0 06 	call	0xd40	; 0xd40 <__mulsf3>
	//converts to cm
	uint8_t cm = 26.922*pow(volt, -1.245);
     300:	29 e2       	ldi	r18, 0x29	; 41
     302:	3c e5       	ldi	r19, 0x5C	; 92
     304:	4f e9       	ldi	r20, 0x9F	; 159
     306:	5f eb       	ldi	r21, 0xBF	; 191
     308:	0e 94 03 07 	call	0xe06	; 0xe06 <pow>
     30c:	22 e4       	ldi	r18, 0x42	; 66
     30e:	30 e6       	ldi	r19, 0x60	; 96
     310:	47 ed       	ldi	r20, 0xD7	; 215
     312:	51 e4       	ldi	r21, 0x41	; 65
     314:	0e 94 a0 06 	call	0xd40	; 0xd40 <__mulsf3>
     318:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__fixunssfsi>
	
	return cm;
     31c:	86 2f       	mov	r24, r22
     31e:	08 95       	ret
}

uint8_t irSensor(uint16_t adc)
{
	if(adc < 115) {
		return 99;
     320:	83 e6       	ldi	r24, 0x63	; 99
     322:	08 95       	ret
	}
	else if(adc > 857) {
		return 0;	
     324:	80 e0       	ldi	r24, 0x00	; 0
	double volt = 0.0035*adc;
	//converts to cm
	uint8_t cm = 26.922*pow(volt, -1.245);
	
	return cm;
}
     326:	08 95       	ret

00000328 <adc_read>:

uint16_t adc_read(uint8_t adcx) {
	//sets ADMUX to the pin that will be read
	ADMUX	&=	0xf0;
     328:	ec e7       	ldi	r30, 0x7C	; 124
     32a:	f0 e0       	ldi	r31, 0x00	; 0
     32c:	90 81       	ld	r25, Z
     32e:	90 7f       	andi	r25, 0xF0	; 240
     330:	90 83       	st	Z, r25
	ADMUX	|=	adcx;
     332:	90 81       	ld	r25, Z
     334:	89 2b       	or	r24, r25
     336:	80 83       	st	Z, r24

	//start conversion
	ADCSRA |= _BV(ADSC);
     338:	ea e7       	ldi	r30, 0x7A	; 122
     33a:	f0 e0       	ldi	r31, 0x00	; 0
     33c:	80 81       	ld	r24, Z
     33e:	80 64       	ori	r24, 0x40	; 64
     340:	80 83       	st	Z, r24


	//Waiting loop for conversion
	while ( (ADCSRA & _BV(ADSC)) );
     342:	80 81       	ld	r24, Z
     344:	86 fd       	sbrc	r24, 6
     346:	fd cf       	rjmp	.-6      	; 0x342 <adc_read+0x1a>
	return ADCW;
     348:	80 91 78 00 	lds	r24, 0x0078
     34c:	90 91 79 00 	lds	r25, 0x0079
		ADCSRA |= (1<<ADSC);                //Start new conversion
		while(ADCSRA & (1<<ADSC));          //Wait until the conversion is done
		ADCSRA |= (1<<ADSC);                //Start new conversion
		while(ADCSRA & (1<<ADSC));          //Wait until the conversion is done
		*/
}
     350:	08 95       	ret

00000352 <main>:
void funkar(void)
{
	return;
}
int main()
{
     352:	cf 93       	push	r28
     354:	df 93       	push	r29
     356:	cd b7       	in	r28, 0x3d	; 61
     358:	de b7       	in	r29, 0x3e	; 62
     35a:	63 97       	sbiw	r28, 0x13	; 19
     35c:	0f b6       	in	r0, 0x3f	; 63
     35e:	f8 94       	cli
     360:	de bf       	out	0x3e, r29	; 62
     362:	0f be       	out	0x3f, r0	; 63
     364:	cd bf       	out	0x3d, r28	; 61
	DDRD = 2;					// output
     366:	82 e0       	ldi	r24, 0x02	; 2
     368:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xff;				// input
     36a:	8f ef       	ldi	r24, 0xFF	; 255
     36c:	84 b9       	out	0x04, r24	; 4
	SETBIT(PORTB,PB0);			// enable pull-up
     36e:	28 9a       	sbi	0x05, 0	; 5
	SETBIT(PORTB,PB1);			// enable pull-up
     370:	29 9a       	sbi	0x05, 1	; 5
	//ADCSRA |= _BV(ADEN);		//Enable adc	
	
	//Init ADC:
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);  	// ADC prescaler to 128 (gives 125kHz with 8MHz cpu).
     372:	ea e7       	ldi	r30, 0x7A	; 122
     374:	f0 e0       	ldi	r31, 0x00	; 0
     376:	80 81       	ld	r24, Z
     378:	86 60       	ori	r24, 0x06	; 6
     37a:	80 83       	st	Z, r24
	ADMUX |= (1 << REFS0); 						// Use AVCC as reference.
     37c:	ac e7       	ldi	r26, 0x7C	; 124
     37e:	b0 e0       	ldi	r27, 0x00	; 0
     380:	8c 91       	ld	r24, X
     382:	80 64       	ori	r24, 0x40	; 64
     384:	8c 93       	st	X, r24
		
	ADCSRA |= (1 << ADEN); 						// Enable ADC
     386:	80 81       	ld	r24, Z
     388:	80 68       	ori	r24, 0x80	; 128
     38a:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);  					// Start conversion
     38c:	80 81       	ld	r24, Z
     38e:	80 64       	ori	r24, 0x40	; 64
     390:	80 83       	st	Z, r24
	
	// Enable IR sensor
	uint8_t irEnabled = 1;
	DDRB|= (1 << 6);
     392:	26 9a       	sbi	0x04, 6	; 4
	PORTB |= (1 << 6);
     394:	2e 9a       	sbi	0x05, 6	; 5
	uint8_t obstacleDistance = 255;

	Motor leftMotor;
	Motor rightMotor;
	//left OCA & PD7
	motor_init(&leftMotor, 10, &OCR0A, &DDRD, &PORTD, 7);
     396:	0f 2e       	mov	r0, r31
     398:	f7 e0       	ldi	r31, 0x07	; 7
     39a:	ef 2e       	mov	r14, r31
     39c:	f0 2d       	mov	r31, r0
     39e:	0b e2       	ldi	r16, 0x2B	; 43
     3a0:	10 e0       	ldi	r17, 0x00	; 0
     3a2:	2a e2       	ldi	r18, 0x2A	; 42
     3a4:	30 e0       	ldi	r19, 0x00	; 0
     3a6:	47 e4       	ldi	r20, 0x47	; 71
     3a8:	50 e0       	ldi	r21, 0x00	; 0
     3aa:	6a e0       	ldi	r22, 0x0A	; 10
     3ac:	ce 01       	movw	r24, r28
     3ae:	01 96       	adiw	r24, 0x01	; 1
     3b0:	0e 94 40 01 	call	0x280	; 0x280 <motor_init>
	//right OCB & PB7
	motor_init(&rightMotor, 10, &OCR0B, &DDRB, &PORTB, 7);
     3b4:	05 e2       	ldi	r16, 0x25	; 37
     3b6:	10 e0       	ldi	r17, 0x00	; 0
     3b8:	24 e2       	ldi	r18, 0x24	; 36
     3ba:	30 e0       	ldi	r19, 0x00	; 0
     3bc:	48 e4       	ldi	r20, 0x48	; 72
     3be:	50 e0       	ldi	r21, 0x00	; 0
     3c0:	6a e0       	ldi	r22, 0x0A	; 10
     3c2:	ce 01       	movw	r24, r28
     3c4:	08 96       	adiw	r24, 0x08	; 8
     3c6:	0e 94 40 01 	call	0x280	; 0x280 <motor_init>

	//Set up motor pwm
	motor_pwm_init(); 
     3ca:	0e 94 94 00 	call	0x128	; 0x128 <motor_pwm_init>
	
	//Set up superpaketet
	set_link_mode_functions(enable_transmit, disable_transmit);
     3ce:	64 e6       	ldi	r22, 0x64	; 100
     3d0:	71 e0       	ldi	r23, 0x01	; 1
     3d2:	81 e6       	ldi	r24, 0x61	; 97
     3d4:	91 e0       	ldi	r25, 0x01	; 1
     3d6:	0e 94 51 03 	call	0x6a2	; 0x6a2 <set_link_mode_functions>
	
	//We are listening here
	disable_transmit();
     3da:	0e 94 64 01 	call	0x2c8	; 0x2c8 <disable_transmit>

	sei();
     3de:	78 94       	sei
	InitUART(9600);	
     3e0:	80 e8       	ldi	r24, 0x80	; 128
     3e2:	95 e2       	ldi	r25, 0x25	; 37
     3e4:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <InitUART>
	
	//Enable status led (shows if in sleep mode or not)
	DDRD |= (1 << 2);
     3e8:	52 9a       	sbi	0x0a, 2	; 10
	PORTD |= (1 << 2);
     3ea:	5a 9a       	sbi	0x0b, 2	; 11
	
	fdev_setup_stream(&mystdout, uart_putchar, NULL, _FDEV_SETUP_WRITE);
     3ec:	89 e6       	ldi	r24, 0x69	; 105
     3ee:	91 e0       	ldi	r25, 0x01	; 1
     3f0:	90 93 33 01 	sts	0x0133, r25
     3f4:	80 93 32 01 	sts	0x0132, r24
     3f8:	10 92 35 01 	sts	0x0135, r1
     3fc:	10 92 34 01 	sts	0x0134, r1
     400:	82 e0       	ldi	r24, 0x02	; 2
     402:	80 93 2d 01 	sts	0x012D, r24
     406:	10 92 37 01 	sts	0x0137, r1
     40a:	10 92 36 01 	sts	0x0136, r1
	stdout = &mystdout;			
     40e:	8a e2       	ldi	r24, 0x2A	; 42
     410:	91 e0       	ldi	r25, 0x01	; 1
     412:	90 93 07 02 	sts	0x0207, r25
     416:	80 93 06 02 	sts	0x0206, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     41a:	8f e0       	ldi	r24, 0x0F	; 15
     41c:	97 e2       	ldi	r25, 0x27	; 39
     41e:	01 97       	sbiw	r24, 0x01	; 1
     420:	f1 f7       	brne	.-4      	; 0x41e <main+0xcc>
     422:	00 c0       	rjmp	.+0      	; 0x424 <main+0xd2>
     424:	00 00       	nop
	_delay_ms(5);
	
	send_string(" Wait", 5);
     426:	65 e0       	ldi	r22, 0x05	; 5
     428:	88 e0       	ldi	r24, 0x08	; 8
     42a:	91 e0       	ldi	r25, 0x01	; 1
     42c:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <send_string>
	
	int thLeft = 127,  thRight = 127;
     430:	0f e7       	ldi	r16, 0x7F	; 127
     432:	10 e0       	ldi	r17, 0x00	; 0
     434:	0f 2e       	mov	r0, r31
     436:	ff e7       	ldi	r31, 0x7F	; 127
     438:	cf 2e       	mov	r12, r31
     43a:	d1 2c       	mov	r13, r1
     43c:	f0 2d       	mov	r31, r0
		
	ADCSRA |= (1 << ADEN); 						// Enable ADC
	ADCSRA |= (1 << ADSC);  					// Start conversion
	
	// Enable IR sensor
	uint8_t irEnabled = 1;
     43e:	88 24       	eor	r8, r8
     440:	83 94       	inc	r8
					thRight = inc.payload[1];
					//printf("Paket! %d & %d\n\r", inc.payload[0], inc.payload[1]);
					break;
				case 2:		//Throttle scaling
					th_scale = *(uint16_t*)inc.payload / 10000.0;
					printf("Paket! %d & %d\n\r", inc.payload[0], inc.payload[1]);
     442:	0f 2e       	mov	r0, r31
     444:	fe e0       	ldi	r31, 0x0E	; 14
     446:	af 2e       	mov	r10, r31
     448:	f1 e0       	ldi	r31, 0x01	; 1
     44a:	bf 2e       	mov	r11, r31
     44c:	f0 2d       	mov	r31, r0
				
				// Put distance from irSensor into inc.payload here
				inc.payload[0] = obstacleDistance;

				//_delay_ms();
				send_package(inc);
     44e:	0f 2e       	mov	r0, r31
     450:	f7 e0       	ldi	r31, 0x07	; 7
     452:	7f 2e       	mov	r7, r31
     454:	f0 2d       	mov	r31, r0
				motor_set_throttle(&leftMotor, thLeft - 127, th_scale);
			}
			
			if(thRight < 127) {
				motor_set_direction(&rightMotor, 0);
				motor_set_throttle(&rightMotor, 127 - thRight, th_scale);
     456:	0f 2e       	mov	r0, r31
     458:	ff e7       	ldi	r31, 0x7F	; 127
     45a:	9f 2e       	mov	r9, r31
     45c:	f0 2d       	mov	r31, r0
			power_adc_disable();
		}
		else {
			irEnabled = 1;
			PORTB |= (1 << 6); // Enable IR sensor	
			power_adc_enable();
     45e:	0f 2e       	mov	r0, r31
     460:	f4 e6       	ldi	r31, 0x64	; 100
     462:	ef 2e       	mov	r14, r31
     464:	f1 2c       	mov	r15, r1
     466:	f0 2d       	mov	r31, r0
     468:	ef e6       	ldi	r30, 0x6F	; 111
     46a:	f7 e1       	ldi	r31, 0x17	; 23
     46c:	31 97       	sbiw	r30, 0x01	; 1
     46e:	f1 f7       	brne	.-4      	; 0x46c <main+0x11a>
     470:	00 c0       	rjmp	.+0      	; 0x472 <main+0x120>
     472:	00 00       	nop
	
	while(1)
	{
				
 		_delay_ms(3);
		obstacleDistance = irSensor(adc_read(ADC_PIN));
     474:	85 e0       	ldi	r24, 0x05	; 5
     476:	0e 94 94 01 	call	0x328	; 0x328 <adc_read>
     47a:	0e 94 6e 01 	call	0x2dc	; 0x2dc <irSensor>
     47e:	68 2e       	mov	r6, r24
		
		super_paketet inc = check_for_package();
     480:	0e 94 c2 03 	call	0x784	; 0x784 <check_for_package>
     484:	2f 87       	std	Y+15, r18	; 0x0f
     486:	38 8b       	std	Y+16, r19	; 0x10
     488:	49 8b       	std	Y+17, r20	; 0x11
     48a:	5a 8b       	std	Y+18, r21	; 0x12
     48c:	6b 8b       	std	Y+19, r22	; 0x13
     48e:	83 2f       	mov	r24, r19
		if (inc.adress != 0)
     490:	22 23       	and	r18, r18
     492:	09 f4       	brne	.+2      	; 0x496 <main+0x144>
     494:	49 c0       	rjmp	.+146    	; 0x528 <main+0x1d6>
		{
			//Check if package want a response
			if ((inc.type & 0x0f) == 7 && irEnabled)
     496:	3f 70       	andi	r19, 0x0F	; 15
     498:	37 30       	cpi	r19, 0x07	; 7
     49a:	c1 f4       	brne	.+48     	; 0x4cc <main+0x17a>
     49c:	88 20       	and	r8, r8
     49e:	b1 f0       	breq	.+44     	; 0x4cc <main+0x17a>
			{
				//Send response
				enable_transmit();
     4a0:	0e 94 61 01 	call	0x2c2	; 0x2c2 <enable_transmit>
					count = 0;
				}
				*/
				
				// Put distance from irSensor into inc.payload here
				inc.payload[0] = obstacleDistance;
     4a4:	69 8a       	std	Y+17, r6	; 0x11

				//_delay_ms();
				send_package(inc);
     4a6:	78 8a       	std	Y+16, r7	; 0x10
     4a8:	4f 85       	ldd	r20, Y+15	; 0x0f
     4aa:	57 2d       	mov	r21, r7
     4ac:	66 2d       	mov	r22, r6
     4ae:	7a 89       	ldd	r23, Y+18	; 0x12
     4b0:	8b 89       	ldd	r24, Y+19	; 0x13
     4b2:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <send_package>
				//wait for send
				flush_usart();
     4b6:	0e 94 06 05 	call	0xa0c	; 0xa0c <flush_usart>
     4ba:	8f ec       	ldi	r24, 0xCF	; 207
     4bc:	97 e0       	ldi	r25, 0x07	; 7
     4be:	01 97       	sbiw	r24, 0x01	; 1
     4c0:	f1 f7       	brne	.-4      	; 0x4be <main+0x16c>
     4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <main+0x172>
     4c4:	00 00       	nop
				_delay_ms(1);
				

				//_delay_ms(10);
				disable_transmit();
     4c6:	0e 94 64 01 	call	0x2c8	; 0x2c8 <disable_transmit>
     4ca:	2e c0       	rjmp	.+92     	; 0x528 <main+0x1d6>
			}
			switch(inc.type)
     4cc:	81 30       	cpi	r24, 0x01	; 1
     4ce:	19 f0       	breq	.+6      	; 0x4d6 <main+0x184>
     4d0:	82 30       	cpi	r24, 0x02	; 2
     4d2:	31 f0       	breq	.+12     	; 0x4e0 <main+0x18e>
     4d4:	29 c0       	rjmp	.+82     	; 0x528 <main+0x1d6>
			{
				// Speed/direction 
				case 1:
					thLeft = inc.payload[0];
     4d6:	c9 88       	ldd	r12, Y+17	; 0x11
     4d8:	d1 2c       	mov	r13, r1
					thRight = inc.payload[1];
     4da:	0a 89       	ldd	r16, Y+18	; 0x12
     4dc:	10 e0       	ldi	r17, 0x00	; 0
					//printf("Paket! %d & %d\n\r", inc.payload[0], inc.payload[1]);
					break;
     4de:	24 c0       	rjmp	.+72     	; 0x528 <main+0x1d6>
				case 2:		//Throttle scaling
					th_scale = *(uint16_t*)inc.payload / 10000.0;
     4e0:	69 89       	ldd	r22, Y+17	; 0x11
     4e2:	7a 89       	ldd	r23, Y+18	; 0x12
     4e4:	80 e0       	ldi	r24, 0x00	; 0
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	0e 94 12 06 	call	0xc24	; 0xc24 <__floatunsisf>
     4ec:	20 e0       	ldi	r18, 0x00	; 0
     4ee:	30 e4       	ldi	r19, 0x40	; 64
     4f0:	4c e1       	ldi	r20, 0x1C	; 28
     4f2:	56 e4       	ldi	r21, 0x46	; 70
     4f4:	0e 94 7e 05 	call	0xafc	; 0xafc <__divsf3>
     4f8:	60 93 00 01 	sts	0x0100, r22
     4fc:	70 93 01 01 	sts	0x0101, r23
     500:	80 93 02 01 	sts	0x0102, r24
     504:	90 93 03 01 	sts	0x0103, r25
					printf("Paket! %d & %d\n\r", inc.payload[0], inc.payload[1]);
     508:	8a 89       	ldd	r24, Y+18	; 0x12
     50a:	1f 92       	push	r1
     50c:	8f 93       	push	r24
     50e:	89 89       	ldd	r24, Y+17	; 0x11
     510:	1f 92       	push	r1
     512:	8f 93       	push	r24
     514:	bf 92       	push	r11
     516:	af 92       	push	r10
     518:	0e 94 8a 08 	call	0x1114	; 0x1114 <printf>
					break;		
     51c:	0f 90       	pop	r0
     51e:	0f 90       	pop	r0
     520:	0f 90       	pop	r0
     522:	0f 90       	pop	r0
     524:	0f 90       	pop	r0
     526:	0f 90       	pop	r0
					break;
			}
		}
		
		// If standing still, disable IR sensor
		if(thRight == 127 && thLeft == 127 && obstacleDistance > 25) {
     528:	0f 37       	cpi	r16, 0x7F	; 127
     52a:	11 05       	cpc	r17, r1
     52c:	91 f4       	brne	.+36     	; 0x552 <main+0x200>
     52e:	9f e7       	ldi	r25, 0x7F	; 127
     530:	c9 16       	cp	r12, r25
     532:	d1 04       	cpc	r13, r1
     534:	71 f4       	brne	.+28     	; 0x552 <main+0x200>
     536:	e9 e1       	ldi	r30, 0x19	; 25
     538:	e6 15       	cp	r30, r6
     53a:	08 f0       	brcs	.+2      	; 0x53e <main+0x1ec>
     53c:	9a c0       	rjmp	.+308    	; 0x672 <main+0x320>
			irEnabled = 0;
			PORTB &= ~(1 << 6);
     53e:	2e 98       	cbi	0x05, 6	; 5
			power_adc_disable();
     540:	f7 01       	movw	r30, r14
     542:	80 81       	ld	r24, Z
     544:	81 60       	ori	r24, 0x01	; 1
     546:	80 83       	st	Z, r24
			power_adc_enable();
		}


		
		if(obstacleDistance < 20) {
     548:	f3 e1       	ldi	r31, 0x13	; 19
     54a:	f6 15       	cp	r31, r6
     54c:	68 f4       	brcc	.+26     	; 0x568 <main+0x216>
			}
		}
		
		// If standing still, disable IR sensor
		if(thRight == 127 && thLeft == 127 && obstacleDistance > 25) {
			irEnabled = 0;
     54e:	81 2c       	mov	r8, r1
     550:	50 c0       	rjmp	.+160    	; 0x5f2 <main+0x2a0>
			PORTB &= ~(1 << 6);
			power_adc_disable();
		}
		else {
			irEnabled = 1;
			PORTB |= (1 << 6); // Enable IR sensor	
     552:	2e 9a       	sbi	0x05, 6	; 5
			power_adc_enable();
     554:	f7 01       	movw	r30, r14
     556:	80 81       	ld	r24, Z
     558:	8e 7f       	andi	r24, 0xFE	; 254
     55a:	80 83       	st	Z, r24
		}


		
		if(obstacleDistance < 20) {
     55c:	f3 e1       	ldi	r31, 0x13	; 19
     55e:	f6 15       	cp	r31, r6
     560:	60 f1       	brcs	.+88     	; 0x5ba <main+0x268>
			irEnabled = 0;
			PORTB &= ~(1 << 6);
			power_adc_disable();
		}
		else {
			irEnabled = 1;
     562:	88 24       	eor	r8, r8
     564:	83 94       	inc	r8
     566:	04 c0       	rjmp	.+8      	; 0x570 <main+0x21e>
			}
		}
		
		// If standing still, disable IR sensor
		if(thRight == 127 && thLeft == 127 && obstacleDistance > 25) {
			irEnabled = 0;
     568:	81 2c       	mov	r8, r1
     56a:	02 c0       	rjmp	.+4      	; 0x570 <main+0x21e>
			PORTB &= ~(1 << 6);
			power_adc_disable();
		}
		else {
			irEnabled = 1;
     56c:	88 24       	eor	r8, r8
     56e:	83 94       	inc	r8
		}


		
		if(obstacleDistance < 20) {
			motor_set_direction(&rightMotor, 1);
     570:	61 e0       	ldi	r22, 0x01	; 1
     572:	ce 01       	movw	r24, r28
     574:	08 96       	adiw	r24, 0x08	; 8
     576:	0e 94 19 01 	call	0x232	; 0x232 <motor_set_direction>
			motor_set_throttle(&rightMotor, 127, th_scale);
     57a:	20 91 00 01 	lds	r18, 0x0100
     57e:	30 91 01 01 	lds	r19, 0x0101
     582:	40 91 02 01 	lds	r20, 0x0102
     586:	50 91 03 01 	lds	r21, 0x0103
     58a:	69 2d       	mov	r22, r9
     58c:	ce 01       	movw	r24, r28
     58e:	08 96       	adiw	r24, 0x08	; 8
     590:	0e 94 a1 00 	call	0x142	; 0x142 <motor_set_throttle>
			motor_set_direction(&leftMotor, 1);
     594:	61 e0       	ldi	r22, 0x01	; 1
     596:	ce 01       	movw	r24, r28
     598:	01 96       	adiw	r24, 0x01	; 1
     59a:	0e 94 19 01 	call	0x232	; 0x232 <motor_set_direction>
			motor_set_throttle(&leftMotor, 127, th_scale);
     59e:	20 91 00 01 	lds	r18, 0x0100
     5a2:	30 91 01 01 	lds	r19, 0x0101
     5a6:	40 91 02 01 	lds	r20, 0x0102
     5aa:	50 91 03 01 	lds	r21, 0x0103
     5ae:	69 2d       	mov	r22, r9
     5b0:	ce 01       	movw	r24, r28
     5b2:	01 96       	adiw	r24, 0x01	; 1
     5b4:	0e 94 a1 00 	call	0x142	; 0x142 <motor_set_throttle>
     5b8:	59 c0       	rjmp	.+178    	; 0x66c <main+0x31a>
		}
		else {
			if(thLeft < 127) {
     5ba:	8f e7       	ldi	r24, 0x7F	; 127
     5bc:	c8 16       	cp	r12, r24
     5be:	d1 04       	cpc	r13, r1
     5c0:	b4 f4       	brge	.+44     	; 0x5ee <main+0x29c>
				motor_set_direction(&leftMotor, 0);
     5c2:	60 e0       	ldi	r22, 0x00	; 0
     5c4:	ce 01       	movw	r24, r28
     5c6:	01 96       	adiw	r24, 0x01	; 1
     5c8:	0e 94 19 01 	call	0x232	; 0x232 <motor_set_direction>
				motor_set_throttle(&leftMotor, 127 - thLeft, th_scale);
     5cc:	20 91 00 01 	lds	r18, 0x0100
     5d0:	30 91 01 01 	lds	r19, 0x0101
     5d4:	40 91 02 01 	lds	r20, 0x0102
     5d8:	50 91 03 01 	lds	r21, 0x0103
     5dc:	69 2d       	mov	r22, r9
     5de:	6c 19       	sub	r22, r12
     5e0:	ce 01       	movw	r24, r28
     5e2:	01 96       	adiw	r24, 0x01	; 1
     5e4:	0e 94 a1 00 	call	0x142	; 0x142 <motor_set_throttle>
			irEnabled = 0;
			PORTB &= ~(1 << 6);
			power_adc_disable();
		}
		else {
			irEnabled = 1;
     5e8:	88 24       	eor	r8, r8
     5ea:	83 94       	inc	r8
     5ec:	15 c0       	rjmp	.+42     	; 0x618 <main+0x2c6>
     5ee:	88 24       	eor	r8, r8
     5f0:	83 94       	inc	r8
			if(thLeft < 127) {
				motor_set_direction(&leftMotor, 0);
				motor_set_throttle(&leftMotor, 127 - thLeft, th_scale);
			}
			else {
				motor_set_direction(&leftMotor, 1);
     5f2:	61 e0       	ldi	r22, 0x01	; 1
     5f4:	ce 01       	movw	r24, r28
     5f6:	01 96       	adiw	r24, 0x01	; 1
     5f8:	0e 94 19 01 	call	0x232	; 0x232 <motor_set_direction>
				motor_set_throttle(&leftMotor, thLeft - 127, th_scale);
     5fc:	20 91 00 01 	lds	r18, 0x0100
     600:	30 91 01 01 	lds	r19, 0x0101
     604:	40 91 02 01 	lds	r20, 0x0102
     608:	50 91 03 01 	lds	r21, 0x0103
     60c:	61 e8       	ldi	r22, 0x81	; 129
     60e:	6c 0d       	add	r22, r12
     610:	ce 01       	movw	r24, r28
     612:	01 96       	adiw	r24, 0x01	; 1
     614:	0e 94 a1 00 	call	0x142	; 0x142 <motor_set_throttle>
			}
			
			if(thRight < 127) {
     618:	0f 37       	cpi	r16, 0x7F	; 127
     61a:	11 05       	cpc	r17, r1
     61c:	a4 f4       	brge	.+40     	; 0x646 <main+0x2f4>
				motor_set_direction(&rightMotor, 0);
     61e:	60 e0       	ldi	r22, 0x00	; 0
     620:	ce 01       	movw	r24, r28
     622:	08 96       	adiw	r24, 0x08	; 8
     624:	0e 94 19 01 	call	0x232	; 0x232 <motor_set_direction>
				motor_set_throttle(&rightMotor, 127 - thRight, th_scale);
     628:	20 91 00 01 	lds	r18, 0x0100
     62c:	30 91 01 01 	lds	r19, 0x0101
     630:	40 91 02 01 	lds	r20, 0x0102
     634:	50 91 03 01 	lds	r21, 0x0103
     638:	69 2d       	mov	r22, r9
     63a:	60 1b       	sub	r22, r16
     63c:	ce 01       	movw	r24, r28
     63e:	08 96       	adiw	r24, 0x08	; 8
     640:	0e 94 a1 00 	call	0x142	; 0x142 <motor_set_throttle>
     644:	13 c0       	rjmp	.+38     	; 0x66c <main+0x31a>
			}
			else{
				motor_set_direction(&rightMotor, 1);
     646:	61 e0       	ldi	r22, 0x01	; 1
     648:	ce 01       	movw	r24, r28
     64a:	08 96       	adiw	r24, 0x08	; 8
     64c:	0e 94 19 01 	call	0x232	; 0x232 <motor_set_direction>
				motor_set_throttle(&rightMotor, thRight - 127, th_scale);
     650:	20 91 00 01 	lds	r18, 0x0100
     654:	30 91 01 01 	lds	r19, 0x0101
     658:	40 91 02 01 	lds	r20, 0x0102
     65c:	50 91 03 01 	lds	r21, 0x0103
     660:	61 e8       	ldi	r22, 0x81	; 129
     662:	60 0f       	add	r22, r16
     664:	ce 01       	movw	r24, r28
     666:	08 96       	adiw	r24, 0x08	; 8
     668:	0e 94 a1 00 	call	0x142	; 0x142 <motor_set_throttle>
			}
		}
		
		
		// Go to idle mode to save some power
		putToSleep();
     66c:	0e 94 45 03 	call	0x68a	; 0x68a <putToSleep>
	}
     670:	fb ce       	rjmp	.-522    	; 0x468 <main+0x116>
			PORTB &= ~(1 << 6);
			power_adc_disable();
		}
		else {
			irEnabled = 1;
			PORTB |= (1 << 6); // Enable IR sensor	
     672:	2e 9a       	sbi	0x05, 6	; 5
			power_adc_enable();
     674:	f7 01       	movw	r30, r14
     676:	80 81       	ld	r24, Z
     678:	8e 7f       	andi	r24, 0xFE	; 254
     67a:	80 83       	st	Z, r24
		}


		
		if(obstacleDistance < 20) {
     67c:	f3 e1       	ldi	r31, 0x13	; 19
     67e:	f6 15       	cp	r31, r6
     680:	08 f0       	brcs	.+2      	; 0x684 <main+0x332>
     682:	74 cf       	rjmp	.-280    	; 0x56c <main+0x21a>
			irEnabled = 0;
			PORTB &= ~(1 << 6);
			power_adc_disable();
		}
		else {
			irEnabled = 1;
     684:	88 24       	eor	r8, r8
     686:	83 94       	inc	r8
     688:	b4 cf       	rjmp	.-152    	; 0x5f2 <main+0x2a0>

0000068a <putToSleep>:
#include "sleepMode.h"
#include <avr/interrupt.h>
#include <avr/power.h>

void putToSleep() {
	set_sleep_mode(SLEEP_MODE_IDLE);
     68a:	83 b7       	in	r24, 0x33	; 51
     68c:	81 7f       	andi	r24, 0xF1	; 241
     68e:	83 bf       	out	0x33, r24	; 51

	sleep_enable();
     690:	83 b7       	in	r24, 0x33	; 51
     692:	81 60       	ori	r24, 0x01	; 1
     694:	83 bf       	out	0x33, r24	; 51
	sei();
     696:	78 94       	sei
	sleep_cpu();
     698:	88 95       	sleep
	sleep_disable();
     69a:	83 b7       	in	r24, 0x33	; 51
     69c:	8e 7f       	andi	r24, 0xFE	; 254
     69e:	83 bf       	out	0x33, r24	; 51
     6a0:	08 95       	ret

000006a2 <set_link_mode_functions>:
void (*disable_transmit_func)();

//Init function for controlling radio module
void set_link_mode_functions(void (*enable_transmit), void (*disable_transmit))
{
	enable_transmit_func = enable_transmit;
     6a2:	90 93 39 01 	sts	0x0139, r25
     6a6:	80 93 38 01 	sts	0x0138, r24
	disable_transmit_func = disable_transmit;
     6aa:	70 93 3b 01 	sts	0x013B, r23
     6ae:	60 93 3a 01 	sts	0x013A, r22
     6b2:	08 95       	ret

000006b4 <InitUART>:
}


void InitUART( unsigned int baud )
{
	int baudfactor = (F_CPU/16/baud-1);
     6b4:	9c 01       	movw	r18, r24
     6b6:	40 e0       	ldi	r20, 0x00	; 0
     6b8:	50 e0       	ldi	r21, 0x00	; 0
     6ba:	60 e2       	ldi	r22, 0x20	; 32
     6bc:	71 ea       	ldi	r23, 0xA1	; 161
     6be:	87 e0       	ldi	r24, 0x07	; 7
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__udivmodsi4>
     6c6:	21 50       	subi	r18, 0x01	; 1
     6c8:	31 09       	sbc	r19, r1
	UBRR0H = (unsigned char)(baudfactor>>8);	//set the baud rate
     6ca:	30 93 c5 00 	sts	0x00C5, r19
	UBRR0L = (unsigned char)baudfactor;
     6ce:	20 93 c4 00 	sts	0x00C4, r18
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);			//enable UART receiver and transmitter
     6d2:	e1 ec       	ldi	r30, 0xC1	; 193
     6d4:	f0 e0       	ldi	r31, 0x00	; 0
     6d6:	88 e1       	ldi	r24, 0x18	; 24
     6d8:	80 83       	st	Z, r24
	/* Set frame format: 8data */
	UCSR0C = (3<<UCSZ00);
     6da:	86 e0       	ldi	r24, 0x06	; 6
     6dc:	80 93 c2 00 	sts	0x00C2, r24
	//Activate interrupts
	UCSR0B |= (1 << UDRIE0) + (1 << RXCIE0);
     6e0:	80 81       	ld	r24, Z
     6e2:	80 6a       	ori	r24, 0xA0	; 160
     6e4:	80 83       	st	Z, r24
     6e6:	08 95       	ret

000006e8 <do_crc>:

//make crc checksum
uint8_t do_crc(uint8_t in_data[], uint8_t length)
{
	uint8_t ret = 0;
	for (int i = 0; i < length; i++)
     6e8:	70 e0       	ldi	r23, 0x00	; 0
     6ea:	16 16       	cp	r1, r22
     6ec:	17 06       	cpc	r1, r23
     6ee:	6c f4       	brge	.+26     	; 0x70a <do_crc+0x22>
     6f0:	e8 2f       	mov	r30, r24
     6f2:	f9 2f       	mov	r31, r25
     6f4:	20 e0       	ldi	r18, 0x00	; 0
     6f6:	30 e0       	ldi	r19, 0x00	; 0


//make crc checksum
uint8_t do_crc(uint8_t in_data[], uint8_t length)
{
	uint8_t ret = 0;
     6f8:	80 e0       	ldi	r24, 0x00	; 0
	for (int i = 0; i < length; i++)
	{
		//xor
		ret ^= in_data[i];
     6fa:	91 91       	ld	r25, Z+
     6fc:	89 27       	eor	r24, r25

//make crc checksum
uint8_t do_crc(uint8_t in_data[], uint8_t length)
{
	uint8_t ret = 0;
	for (int i = 0; i < length; i++)
     6fe:	2f 5f       	subi	r18, 0xFF	; 255
     700:	3f 4f       	sbci	r19, 0xFF	; 255
     702:	26 17       	cp	r18, r22
     704:	37 07       	cpc	r19, r23
     706:	cc f3       	brlt	.-14     	; 0x6fa <do_crc+0x12>
     708:	08 95       	ret


//make crc checksum
uint8_t do_crc(uint8_t in_data[], uint8_t length)
{
	uint8_t ret = 0;
     70a:	80 e0       	ldi	r24, 0x00	; 0
	{
		//xor
		ret ^= in_data[i];
	}
	return ret;
}
     70c:	08 95       	ret

0000070e <process_data_for_package>:

//Call from isr
super_paketet process_data_for_package(char incomming_byte)
{
     70e:	1f 93       	push	r17
     710:	cf 93       	push	r28
     712:	df 93       	push	r29
     714:	00 d0       	rcall	.+0      	; 0x716 <process_data_for_package+0x8>
     716:	00 d0       	rcall	.+0      	; 0x718 <process_data_for_package+0xa>
     718:	1f 92       	push	r1
     71a:	cd b7       	in	r28, 0x3d	; 61
     71c:	de b7       	in	r29, 0x3e	; 62
     71e:	18 2f       	mov	r17, r24
	//static uint8_t		counter = 0;
	super_paketet *package = (super_paketet *)buffer;
	super_paketet *new_package = (super_paketet *)(buffer + 1);
	
	//move into last place in buffer
	buffer[PACKAGE_SIZE] = incomming_byte;
     720:	80 93 25 01 	sts	0x0125, r24
	//counter++;
	
	//Copy new content
	*package = *new_package;
     724:	95 e0       	ldi	r25, 0x05	; 5
     726:	e1 e2       	ldi	r30, 0x21	; 33
     728:	f1 e0       	ldi	r31, 0x01	; 1
     72a:	a0 e2       	ldi	r26, 0x20	; 32
     72c:	b1 e0       	ldi	r27, 0x01	; 1
     72e:	01 90       	ld	r0, Z+
     730:	0d 92       	st	X+, r0
     732:	9a 95       	dec	r25
     734:	e1 f7       	brne	.-8      	; 0x72e <process_data_for_package+0x20>
	//check for package
	
	
	if (package->adress == ADRESS)
     736:	80 91 20 01 	lds	r24, 0x0120
     73a:	86 36       	cpi	r24, 0x66	; 102
     73c:	89 f4       	brne	.+34     	; 0x760 <process_data_for_package+0x52>
	{
		//Woo paket!
		//Crc osv
		if (package->crc == do_crc((uint8_t*)package, PACKAGE_SIZE - 1))
     73e:	64 e0       	ldi	r22, 0x04	; 4
     740:	80 e2       	ldi	r24, 0x20	; 32
     742:	91 e0       	ldi	r25, 0x01	; 1
     744:	0e 94 74 03 	call	0x6e8	; 0x6e8 <do_crc>
     748:	18 13       	cpse	r17, r24
     74a:	0a c0       	rjmp	.+20     	; 0x760 <process_data_for_package+0x52>
		{
			return *package;
     74c:	85 e0       	ldi	r24, 0x05	; 5
     74e:	e0 e2       	ldi	r30, 0x20	; 32
     750:	f1 e0       	ldi	r31, 0x01	; 1
     752:	de 01       	movw	r26, r28
     754:	11 96       	adiw	r26, 0x01	; 1
     756:	01 90       	ld	r0, Z+
     758:	0d 92       	st	X+, r0
     75a:	8a 95       	dec	r24
     75c:	e1 f7       	brne	.-8      	; 0x756 <process_data_for_package+0x48>
     75e:	01 c0       	rjmp	.+2      	; 0x762 <process_data_for_package+0x54>
		}
	}
	super_paketet fail_return;
	fail_return.adress = 0;
	
	return fail_return;
     760:	19 82       	std	Y+1, r1	; 0x01
     762:	29 81       	ldd	r18, Y+1	; 0x01
     764:	3a 81       	ldd	r19, Y+2	; 0x02
     766:	4b 81       	ldd	r20, Y+3	; 0x03
     768:	5c 81       	ldd	r21, Y+4	; 0x04
     76a:	6d 81       	ldd	r22, Y+5	; 0x05
}
     76c:	70 e0       	ldi	r23, 0x00	; 0
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	0f 90       	pop	r0
     774:	0f 90       	pop	r0
     776:	0f 90       	pop	r0
     778:	0f 90       	pop	r0
     77a:	0f 90       	pop	r0
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	08 95       	ret

00000784 <check_for_package>:

//Fetch new packages if there is one
super_paketet check_for_package()
{
     784:	cf 93       	push	r28
     786:	df 93       	push	r29
     788:	cd b7       	in	r28, 0x3d	; 61
     78a:	de b7       	in	r29, 0x3e	; 62
     78c:	2b 97       	sbiw	r28, 0x0b	; 11
     78e:	0f b6       	in	r0, 0x3f	; 63
     790:	f8 94       	cli
     792:	de bf       	out	0x3e, r29	; 62
     794:	0f be       	out	0x3f, r0	; 63
     796:	cd bf       	out	0x3d, r28	; 61
	char incomming_byte;
	//Check if we have data
	while (ReceiveByte(&incomming_byte))
     798:	14 c0       	rjmp	.+40     	; 0x7c2 <check_for_package+0x3e>
	{
		super_paketet incomming_package;
		//Send new data for processing
		incomming_package = process_data_for_package(incomming_byte);
     79a:	8e 81       	ldd	r24, Y+6	; 0x06
     79c:	0e 94 87 03 	call	0x70e	; 0x70e <process_data_for_package>
     7a0:	2f 83       	std	Y+7, r18	; 0x07
     7a2:	38 87       	std	Y+8, r19	; 0x08
     7a4:	49 87       	std	Y+9, r20	; 0x09
     7a6:	5a 87       	std	Y+10, r21	; 0x0a
     7a8:	6b 87       	std	Y+11, r22	; 0x0b
		//Check if we got a package
		if (incomming_package.adress != 0)
     7aa:	22 23       	and	r18, r18
     7ac:	51 f0       	breq	.+20     	; 0x7c2 <check_for_package+0x3e>
		{
			return incomming_package;
     7ae:	85 e0       	ldi	r24, 0x05	; 5
     7b0:	fe 01       	movw	r30, r28
     7b2:	37 96       	adiw	r30, 0x07	; 7
     7b4:	de 01       	movw	r26, r28
     7b6:	11 96       	adiw	r26, 0x01	; 1
     7b8:	01 90       	ld	r0, Z+
     7ba:	0d 92       	st	X+, r0
     7bc:	8a 95       	dec	r24
     7be:	e1 f7       	brne	.-8      	; 0x7b8 <check_for_package+0x34>
     7c0:	07 c0       	rjmp	.+14     	; 0x7d0 <check_for_package+0x4c>
//Fetch new packages if there is one
super_paketet check_for_package()
{
	char incomming_byte;
	//Check if we have data
	while (ReceiveByte(&incomming_byte))
     7c2:	ce 01       	movw	r24, r28
     7c4:	06 96       	adiw	r24, 0x06	; 6
     7c6:	0e 94 9f 04 	call	0x93e	; 0x93e <ReceiveByte>
     7ca:	81 11       	cpse	r24, r1
     7cc:	e6 cf       	rjmp	.-52     	; 0x79a <check_for_package+0x16>
		}
	}
	super_paketet fail_return;
	fail_return.adress = 0;
	
	return fail_return;
     7ce:	19 82       	std	Y+1, r1	; 0x01
     7d0:	29 81       	ldd	r18, Y+1	; 0x01
     7d2:	3a 81       	ldd	r19, Y+2	; 0x02
     7d4:	4b 81       	ldd	r20, Y+3	; 0x03
     7d6:	5c 81       	ldd	r21, Y+4	; 0x04
     7d8:	6d 81       	ldd	r22, Y+5	; 0x05
}
     7da:	70 e0       	ldi	r23, 0x00	; 0
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	2b 96       	adiw	r28, 0x0b	; 11
     7e2:	0f b6       	in	r0, 0x3f	; 63
     7e4:	f8 94       	cli
     7e6:	de bf       	out	0x3e, r29	; 62
     7e8:	0f be       	out	0x3f, r0	; 63
     7ea:	cd bf       	out	0x3d, r28	; 61
     7ec:	df 91       	pop	r29
     7ee:	cf 91       	pop	r28
     7f0:	08 95       	ret

000007f2 <send_package>:
//pad package and send over usart
void send_package(super_paketet outgoing_package)
{
     7f2:	cf 93       	push	r28
     7f4:	df 93       	push	r29
     7f6:	cd b7       	in	r28, 0x3d	; 61
     7f8:	de b7       	in	r29, 0x3e	; 62
     7fa:	2c 97       	sbiw	r28, 0x0c	; 12
     7fc:	0f b6       	in	r0, 0x3f	; 63
     7fe:	f8 94       	cli
     800:	de bf       	out	0x3e, r29	; 62
     802:	0f be       	out	0x3f, r0	; 63
     804:	cd bf       	out	0x3d, r28	; 61
     806:	48 87       	std	Y+8, r20	; 0x08
     808:	59 87       	std	Y+9, r21	; 0x09
     80a:	6a 87       	std	Y+10, r22	; 0x0a
     80c:	7b 87       	std	Y+11, r23	; 0x0b
     80e:	8c 87       	std	Y+12, r24	; 0x0c
	outgoing_package.crc = do_crc((uint8_t*)&outgoing_package, PACKAGE_SIZE-1);
     810:	64 e0       	ldi	r22, 0x04	; 4
     812:	ce 01       	movw	r24, r28
     814:	08 96       	adiw	r24, 0x08	; 8
     816:	0e 94 74 03 	call	0x6e8	; 0x6e8 <do_crc>
     81a:	8c 87       	std	Y+12, r24	; 0x0c
	const int outgoing_data_length = sizeof(super_paketet) + 2;
	
	char outgoing_data[outgoing_data_length]; // package + preamble
	
	*(uint16_t*)outgoing_data = PREAMBLE;
     81c:	8f ef       	ldi	r24, 0xFF	; 255
     81e:	95 e5       	ldi	r25, 0x55	; 85
     820:	9a 83       	std	Y+2, r25	; 0x02
     822:	89 83       	std	Y+1, r24	; 0x01
	*(super_paketet*)(outgoing_data + 2) = outgoing_package;
     824:	85 e0       	ldi	r24, 0x05	; 5
     826:	fe 01       	movw	r30, r28
     828:	38 96       	adiw	r30, 0x08	; 8
     82a:	de 01       	movw	r26, r28
     82c:	13 96       	adiw	r26, 0x03	; 3
     82e:	01 90       	ld	r0, Z+
     830:	0d 92       	st	X+, r0
     832:	8a 95       	dec	r24
     834:	e1 f7       	brne	.-8      	; 0x82e <send_package+0x3c>
	
	send_string(outgoing_data, outgoing_data_length);
     836:	67 e0       	ldi	r22, 0x07	; 7
     838:	ce 01       	movw	r24, r28
     83a:	01 96       	adiw	r24, 0x01	; 1
     83c:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <send_string>
}
     840:	2c 96       	adiw	r28, 0x0c	; 12
     842:	0f b6       	in	r0, 0x3f	; 63
     844:	f8 94       	cli
     846:	de bf       	out	0x3e, r29	; 62
     848:	0f be       	out	0x3f, r0	; 63
     84a:	cd bf       	out	0x3d, r28	; 61
     84c:	df 91       	pop	r29
     84e:	cf 91       	pop	r28
     850:	08 95       	ret

00000852 <__vector_19>:
#define release_lock()	sei()

//Usart transmit interrupt
//This interrupt is always called when UDR is empty
ISR(USART_UDRE_vect)
{
     852:	1f 92       	push	r1
     854:	0f 92       	push	r0
     856:	0f b6       	in	r0, 0x3f	; 63
     858:	0f 92       	push	r0
     85a:	11 24       	eor	r1, r1
     85c:	2f 93       	push	r18
     85e:	8f 93       	push	r24
     860:	9f 93       	push	r25
     862:	ef 93       	push	r30
     864:	ff 93       	push	r31
	// check for empty transmit buffer	and if we have data
	if ( 0 != outgoing_data_counter)
     866:	80 91 29 01 	lds	r24, 0x0129
     86a:	88 23       	and	r24, r24
     86c:	09 f1       	breq	.+66     	; 0x8b0 <__vector_19+0x5e>
	{
		outgoing_data_counter--;
     86e:	80 91 29 01 	lds	r24, 0x0129
     872:	81 50       	subi	r24, 0x01	; 1
     874:	80 93 29 01 	sts	0x0129, r24
		UDR0 = *outgoing_data_head; 		// start transmition
     878:	e0 91 06 01 	lds	r30, 0x0106
     87c:	f0 91 07 01 	lds	r31, 0x0107
     880:	80 81       	ld	r24, Z
     882:	80 93 c6 00 	sts	0x00C6, r24
		outgoing_data_head++;
     886:	80 91 06 01 	lds	r24, 0x0106
     88a:	90 91 07 01 	lds	r25, 0x0107
     88e:	01 96       	adiw	r24, 0x01	; 1
		if (outgoing_data_head >= (outgoing_data + USART_TX_BUFFER_SIZE))
     890:	22 e0       	ldi	r18, 0x02	; 2
     892:	84 30       	cpi	r24, 0x04	; 4
     894:	92 07       	cpc	r25, r18
     896:	28 f4       	brcc	.+10     	; 0x8a2 <__vector_19+0x50>
	// check for empty transmit buffer	and if we have data
	if ( 0 != outgoing_data_counter)
	{
		outgoing_data_counter--;
		UDR0 = *outgoing_data_head; 		// start transmition
		outgoing_data_head++;
     898:	90 93 07 01 	sts	0x0107, r25
     89c:	80 93 06 01 	sts	0x0106, r24
     8a0:	0c c0       	rjmp	.+24     	; 0x8ba <__vector_19+0x68>
		if (outgoing_data_head >= (outgoing_data + USART_TX_BUFFER_SIZE))
		{
			outgoing_data_head = outgoing_data;	//reset ring buffer
     8a2:	80 ea       	ldi	r24, 0xA0	; 160
     8a4:	91 e0       	ldi	r25, 0x01	; 1
     8a6:	90 93 07 01 	sts	0x0107, r25
     8aa:	80 93 06 01 	sts	0x0106, r24
     8ae:	05 c0       	rjmp	.+10     	; 0x8ba <__vector_19+0x68>
		}
	}else{
		//Inactivate interrupt
		UCSR0B &= ~(1 << UDRIE0);
     8b0:	e1 ec       	ldi	r30, 0xC1	; 193
     8b2:	f0 e0       	ldi	r31, 0x00	; 0
     8b4:	80 81       	ld	r24, Z
     8b6:	8f 7d       	andi	r24, 0xDF	; 223
     8b8:	80 83       	st	Z, r24
		
	}
}
     8ba:	ff 91       	pop	r31
     8bc:	ef 91       	pop	r30
     8be:	9f 91       	pop	r25
     8c0:	8f 91       	pop	r24
     8c2:	2f 91       	pop	r18
     8c4:	0f 90       	pop	r0
     8c6:	0f be       	out	0x3f, r0	; 63
     8c8:	0f 90       	pop	r0
     8ca:	1f 90       	pop	r1
     8cc:	18 95       	reti

000008ce <__vector_18>:
//Usart receive interrupt
ISR(USART_RX_vect)
{
     8ce:	1f 92       	push	r1
     8d0:	0f 92       	push	r0
     8d2:	0f b6       	in	r0, 0x3f	; 63
     8d4:	0f 92       	push	r0
     8d6:	11 24       	eor	r1, r1
     8d8:	2f 93       	push	r18
     8da:	8f 93       	push	r24
     8dc:	9f 93       	push	r25
     8de:	ef 93       	push	r30
     8e0:	ff 93       	push	r31
	//place char into buffer
	*incomming_data_head = UDR0;	//Read from UDR gets RX byte
     8e2:	e0 91 04 01 	lds	r30, 0x0104
     8e6:	f0 91 05 01 	lds	r31, 0x0105
     8ea:	80 91 c6 00 	lds	r24, 0x00C6
     8ee:	80 83       	st	Z, r24
	
	//increase head
	incomming_data_head++;
     8f0:	80 91 04 01 	lds	r24, 0x0104
     8f4:	90 91 05 01 	lds	r25, 0x0105
     8f8:	01 96       	adiw	r24, 0x01	; 1
	
	
	//Check for overflow head
	if (incomming_data_head >= (incomming_data + USART_RX_BUFFER_SIZE))
     8fa:	21 e0       	ldi	r18, 0x01	; 1
     8fc:	80 3a       	cpi	r24, 0xA0	; 160
     8fe:	92 07       	cpc	r25, r18
     900:	28 f4       	brcc	.+10     	; 0x90c <__stack+0xd>
{
	//place char into buffer
	*incomming_data_head = UDR0;	//Read from UDR gets RX byte
	
	//increase head
	incomming_data_head++;
     902:	90 93 05 01 	sts	0x0105, r25
     906:	80 93 04 01 	sts	0x0104, r24
     90a:	06 c0       	rjmp	.+12     	; 0x918 <__stack+0x19>
	
	//Check for overflow head
	if (incomming_data_head >= (incomming_data + USART_RX_BUFFER_SIZE))
	{
		//End of ring, go around
		incomming_data_head = incomming_data;
     90c:	8c e3       	ldi	r24, 0x3C	; 60
     90e:	91 e0       	ldi	r25, 0x01	; 1
     910:	90 93 05 01 	sts	0x0105, r25
     914:	80 93 04 01 	sts	0x0104, r24
	}
	//Check for overflow counter
	if(incomming_data_counter < USART_RX_BUFFER_SIZE)
     918:	80 91 28 01 	lds	r24, 0x0128
     91c:	84 36       	cpi	r24, 0x64	; 100
     91e:	28 f4       	brcc	.+10     	; 0x92a <__stack+0x2b>
	{
		incomming_data_counter++;
     920:	80 91 28 01 	lds	r24, 0x0128
     924:	8f 5f       	subi	r24, 0xFF	; 255
     926:	80 93 28 01 	sts	0x0128, r24
	}
}
     92a:	ff 91       	pop	r31
     92c:	ef 91       	pop	r30
     92e:	9f 91       	pop	r25
     930:	8f 91       	pop	r24
     932:	2f 91       	pop	r18
     934:	0f 90       	pop	r0
     936:	0f be       	out	0x3f, r0	; 63
     938:	0f 90       	pop	r0
     93a:	1f 90       	pop	r1
     93c:	18 95       	reti

0000093e <ReceiveByte>:

/* Read and write functions */
char ReceiveByte(char * result)
{
	get_lock();
     93e:	f8 94       	cli
	//If we have data
	if (incomming_data_counter > 0)
     940:	20 91 28 01 	lds	r18, 0x0128
     944:	22 23       	and	r18, r18
     946:	c9 f0       	breq	.+50     	; 0x97a <ReceiveByte+0x3c>
	{
		//Assign pointer to data 
		//Read buffer in reverse because we add positive
		volatile char * temp = incomming_data_head - incomming_data_counter;
     948:	20 91 28 01 	lds	r18, 0x0128
     94c:	e0 91 04 01 	lds	r30, 0x0104
     950:	f0 91 05 01 	lds	r31, 0x0105
     954:	e2 1b       	sub	r30, r18
     956:	f1 09       	sbc	r31, r1
		
		//Check pointer for overflow
		if (temp < incomming_data )
     958:	21 e0       	ldi	r18, 0x01	; 1
     95a:	ec 33       	cpi	r30, 0x3C	; 60
     95c:	f2 07       	cpc	r31, r18
     95e:	10 f4       	brcc	.+4      	; 0x964 <ReceiveByte+0x26>
		{
			temp += USART_RX_BUFFER_SIZE;	//Wrap around
     960:	ec 59       	subi	r30, 0x9C	; 156
     962:	ff 4f       	sbci	r31, 0xFF	; 255
		}
		//Decrease counter
		incomming_data_counter--;
     964:	20 91 28 01 	lds	r18, 0x0128
     968:	21 50       	subi	r18, 0x01	; 1
     96a:	20 93 28 01 	sts	0x0128, r18

		//return that data
		*result = *temp;
     96e:	20 81       	ld	r18, Z
     970:	fc 01       	movw	r30, r24
     972:	20 83       	st	Z, r18
		release_lock();
     974:	78 94       	sei
		
		return 1;
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	08 95       	ret
	} 
	else
	{
		//Else fail
		release_lock();
     97a:	78 94       	sei
		return 0;								// return the data
     97c:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     97e:	08 95       	ret

00000980 <send_c>:
	return temp;
}

void send_c(char c)
{
	get_lock();
     980:	f8 94       	cli
	//Check if there is space in the buffer
	if (outgoing_data_counter < USART_TX_BUFFER_SIZE)
     982:	90 91 29 01 	lds	r25, 0x0129
     986:	94 36       	cpi	r25, 0x64	; 100
     988:	c8 f4       	brcc	.+50     	; 0x9bc <send_c+0x3c>
	{
		volatile char * temp = (outgoing_data_head + outgoing_data_counter);
     98a:	90 91 29 01 	lds	r25, 0x0129
     98e:	e0 91 06 01 	lds	r30, 0x0106
     992:	f0 91 07 01 	lds	r31, 0x0107
     996:	e9 0f       	add	r30, r25
     998:	f1 1d       	adc	r31, r1
	
		//Check for overflow
		if (temp >= (outgoing_data + USART_TX_BUFFER_SIZE))
     99a:	92 e0       	ldi	r25, 0x02	; 2
     99c:	e4 30       	cpi	r30, 0x04	; 4
     99e:	f9 07       	cpc	r31, r25
     9a0:	10 f0       	brcs	.+4      	; 0x9a6 <send_c+0x26>
		{
			temp -= USART_TX_BUFFER_SIZE;
     9a2:	e4 56       	subi	r30, 0x64	; 100
     9a4:	f1 09       	sbc	r31, r1
		}

		*temp = c;		//add to queue
     9a6:	80 83       	st	Z, r24
		outgoing_data_counter++;
     9a8:	80 91 29 01 	lds	r24, 0x0129
     9ac:	8f 5f       	subi	r24, 0xFF	; 255
     9ae:	80 93 29 01 	sts	0x0129, r24
		//Activate TX interrupt
		UCSR0B |= (1 << UDRIE0);
     9b2:	e1 ec       	ldi	r30, 0xC1	; 193
     9b4:	f0 e0       	ldi	r31, 0x00	; 0
     9b6:	80 81       	ld	r24, Z
     9b8:	80 62       	ori	r24, 0x20	; 32
     9ba:	80 83       	st	Z, r24
	}
	release_lock();
     9bc:	78 94       	sei
     9be:	08 95       	ret

000009c0 <send_string>:
}

int8_t send_string(char data[], uint8_t length)
{
     9c0:	0f 93       	push	r16
     9c2:	1f 93       	push	r17
     9c4:	cf 93       	push	r28
     9c6:	df 93       	push	r29
     9c8:	06 2f       	mov	r16, r22
	if (data == 0)	//Check for valid pointer
     9ca:	00 97       	sbiw	r24, 0x00	; 0
     9cc:	99 f0       	breq	.+38     	; 0x9f4 <send_string+0x34>
	{
		return -1;
	}
	//Check for space in buffer
	if ((length + outgoing_data_counter )>= USART_TX_BUFFER_SIZE)
     9ce:	20 91 29 01 	lds	r18, 0x0129
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	26 0f       	add	r18, r22
     9d6:	31 1d       	adc	r19, r1
     9d8:	24 36       	cpi	r18, 0x64	; 100
     9da:	31 05       	cpc	r19, r1
     9dc:	6c f4       	brge	.+26     	; 0x9f8 <send_string+0x38>
	{
		return -2;
	}
	//All good, add to buffer
	for (uint8_t i = 0; i < length; i++ )
     9de:	66 23       	and	r22, r22
     9e0:	69 f0       	breq	.+26     	; 0x9fc <send_string+0x3c>
     9e2:	ec 01       	movw	r28, r24
     9e4:	10 e0       	ldi	r17, 0x00	; 0
	{
		send_c(data[i]);
     9e6:	89 91       	ld	r24, Y+
     9e8:	0e 94 c0 04 	call	0x980	; 0x980 <send_c>
	if ((length + outgoing_data_counter )>= USART_TX_BUFFER_SIZE)
	{
		return -2;
	}
	//All good, add to buffer
	for (uint8_t i = 0; i < length; i++ )
     9ec:	1f 5f       	subi	r17, 0xFF	; 255
     9ee:	10 13       	cpse	r17, r16
     9f0:	fa cf       	rjmp	.-12     	; 0x9e6 <send_string+0x26>
     9f2:	06 c0       	rjmp	.+12     	; 0xa00 <send_string+0x40>

int8_t send_string(char data[], uint8_t length)
{
	if (data == 0)	//Check for valid pointer
	{
		return -1;
     9f4:	8f ef       	ldi	r24, 0xFF	; 255
     9f6:	05 c0       	rjmp	.+10     	; 0xa02 <send_string+0x42>
	}
	//Check for space in buffer
	if ((length + outgoing_data_counter )>= USART_TX_BUFFER_SIZE)
	{
		return -2;
     9f8:	8e ef       	ldi	r24, 0xFE	; 254
     9fa:	03 c0       	rjmp	.+6      	; 0xa02 <send_string+0x42>
	for (uint8_t i = 0; i < length; i++ )
	{
		send_c(data[i]);
	}
	
	return 0;
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	01 c0       	rjmp	.+2      	; 0xa02 <send_string+0x42>
     a00:	80 e0       	ldi	r24, 0x00	; 0
} 
     a02:	df 91       	pop	r29
     a04:	cf 91       	pop	r28
     a06:	1f 91       	pop	r17
     a08:	0f 91       	pop	r16
     a0a:	08 95       	ret

00000a0c <flush_usart>:
void flush_usart()
{
	volatile static int dummy = 0;
	//Wait for empty buffer
	while(//Activate TX interrupt
	UCSR0B & (1 << UDRIE0) )
     a0c:	80 91 c1 00 	lds	r24, 0x00C1

void flush_usart()
{
	volatile static int dummy = 0;
	//Wait for empty buffer
	while(//Activate TX interrupt
     a10:	85 ff       	sbrs	r24, 5
     a12:	0e c0       	rjmp	.+28     	; 0xa30 <flush_usart+0x24>
	UCSR0B & (1 << UDRIE0) )
     a14:	e1 ec       	ldi	r30, 0xC1	; 193
     a16:	f0 e0       	ldi	r31, 0x00	; 0
	{
		dummy++;
     a18:	80 91 26 01 	lds	r24, 0x0126
     a1c:	90 91 27 01 	lds	r25, 0x0127
     a20:	01 96       	adiw	r24, 0x01	; 1
     a22:	90 93 27 01 	sts	0x0127, r25
     a26:	80 93 26 01 	sts	0x0126, r24
void flush_usart()
{
	volatile static int dummy = 0;
	//Wait for empty buffer
	while(//Activate TX interrupt
	UCSR0B & (1 << UDRIE0) )
     a2a:	80 81       	ld	r24, Z

void flush_usart()
{
	volatile static int dummy = 0;
	//Wait for empty buffer
	while(//Activate TX interrupt
     a2c:	85 fd       	sbrc	r24, 5
     a2e:	f4 cf       	rjmp	.-24     	; 0xa18 <flush_usart+0xc>
     a30:	08 95       	ret

00000a32 <__subsf3>:
     a32:	50 58       	subi	r21, 0x80	; 128

00000a34 <__addsf3>:
     a34:	bb 27       	eor	r27, r27
     a36:	aa 27       	eor	r26, r26
     a38:	0e d0       	rcall	.+28     	; 0xa56 <__addsf3x>
     a3a:	48 c1       	rjmp	.+656    	; 0xccc <__fp_round>
     a3c:	39 d1       	rcall	.+626    	; 0xcb0 <__fp_pscA>
     a3e:	30 f0       	brcs	.+12     	; 0xa4c <__addsf3+0x18>
     a40:	3e d1       	rcall	.+636    	; 0xcbe <__fp_pscB>
     a42:	20 f0       	brcs	.+8      	; 0xa4c <__addsf3+0x18>
     a44:	31 f4       	brne	.+12     	; 0xa52 <__addsf3+0x1e>
     a46:	9f 3f       	cpi	r25, 0xFF	; 255
     a48:	11 f4       	brne	.+4      	; 0xa4e <__addsf3+0x1a>
     a4a:	1e f4       	brtc	.+6      	; 0xa52 <__addsf3+0x1e>
     a4c:	2e c1       	rjmp	.+604    	; 0xcaa <__fp_nan>
     a4e:	0e f4       	brtc	.+2      	; 0xa52 <__addsf3+0x1e>
     a50:	e0 95       	com	r30
     a52:	e7 fb       	bst	r30, 7
     a54:	24 c1       	rjmp	.+584    	; 0xc9e <__fp_inf>

00000a56 <__addsf3x>:
     a56:	e9 2f       	mov	r30, r25
     a58:	4a d1       	rcall	.+660    	; 0xcee <__fp_split3>
     a5a:	80 f3       	brcs	.-32     	; 0xa3c <__addsf3+0x8>
     a5c:	ba 17       	cp	r27, r26
     a5e:	62 07       	cpc	r22, r18
     a60:	73 07       	cpc	r23, r19
     a62:	84 07       	cpc	r24, r20
     a64:	95 07       	cpc	r25, r21
     a66:	18 f0       	brcs	.+6      	; 0xa6e <__addsf3x+0x18>
     a68:	71 f4       	brne	.+28     	; 0xa86 <__addsf3x+0x30>
     a6a:	9e f5       	brtc	.+102    	; 0xad2 <__addsf3x+0x7c>
     a6c:	62 c1       	rjmp	.+708    	; 0xd32 <__fp_zero>
     a6e:	0e f4       	brtc	.+2      	; 0xa72 <__addsf3x+0x1c>
     a70:	e0 95       	com	r30
     a72:	0b 2e       	mov	r0, r27
     a74:	ba 2f       	mov	r27, r26
     a76:	a0 2d       	mov	r26, r0
     a78:	0b 01       	movw	r0, r22
     a7a:	b9 01       	movw	r22, r18
     a7c:	90 01       	movw	r18, r0
     a7e:	0c 01       	movw	r0, r24
     a80:	ca 01       	movw	r24, r20
     a82:	a0 01       	movw	r20, r0
     a84:	11 24       	eor	r1, r1
     a86:	ff 27       	eor	r31, r31
     a88:	59 1b       	sub	r21, r25
     a8a:	99 f0       	breq	.+38     	; 0xab2 <__addsf3x+0x5c>
     a8c:	59 3f       	cpi	r21, 0xF9	; 249
     a8e:	50 f4       	brcc	.+20     	; 0xaa4 <__addsf3x+0x4e>
     a90:	50 3e       	cpi	r21, 0xE0	; 224
     a92:	68 f1       	brcs	.+90     	; 0xaee <__addsf3x+0x98>
     a94:	1a 16       	cp	r1, r26
     a96:	f0 40       	sbci	r31, 0x00	; 0
     a98:	a2 2f       	mov	r26, r18
     a9a:	23 2f       	mov	r18, r19
     a9c:	34 2f       	mov	r19, r20
     a9e:	44 27       	eor	r20, r20
     aa0:	58 5f       	subi	r21, 0xF8	; 248
     aa2:	f3 cf       	rjmp	.-26     	; 0xa8a <__addsf3x+0x34>
     aa4:	46 95       	lsr	r20
     aa6:	37 95       	ror	r19
     aa8:	27 95       	ror	r18
     aaa:	a7 95       	ror	r26
     aac:	f0 40       	sbci	r31, 0x00	; 0
     aae:	53 95       	inc	r21
     ab0:	c9 f7       	brne	.-14     	; 0xaa4 <__addsf3x+0x4e>
     ab2:	7e f4       	brtc	.+30     	; 0xad2 <__addsf3x+0x7c>
     ab4:	1f 16       	cp	r1, r31
     ab6:	ba 0b       	sbc	r27, r26
     ab8:	62 0b       	sbc	r22, r18
     aba:	73 0b       	sbc	r23, r19
     abc:	84 0b       	sbc	r24, r20
     abe:	ba f0       	brmi	.+46     	; 0xaee <__addsf3x+0x98>
     ac0:	91 50       	subi	r25, 0x01	; 1
     ac2:	a1 f0       	breq	.+40     	; 0xaec <__addsf3x+0x96>
     ac4:	ff 0f       	add	r31, r31
     ac6:	bb 1f       	adc	r27, r27
     ac8:	66 1f       	adc	r22, r22
     aca:	77 1f       	adc	r23, r23
     acc:	88 1f       	adc	r24, r24
     ace:	c2 f7       	brpl	.-16     	; 0xac0 <__addsf3x+0x6a>
     ad0:	0e c0       	rjmp	.+28     	; 0xaee <__addsf3x+0x98>
     ad2:	ba 0f       	add	r27, r26
     ad4:	62 1f       	adc	r22, r18
     ad6:	73 1f       	adc	r23, r19
     ad8:	84 1f       	adc	r24, r20
     ada:	48 f4       	brcc	.+18     	; 0xaee <__addsf3x+0x98>
     adc:	87 95       	ror	r24
     ade:	77 95       	ror	r23
     ae0:	67 95       	ror	r22
     ae2:	b7 95       	ror	r27
     ae4:	f7 95       	ror	r31
     ae6:	9e 3f       	cpi	r25, 0xFE	; 254
     ae8:	08 f0       	brcs	.+2      	; 0xaec <__addsf3x+0x96>
     aea:	b3 cf       	rjmp	.-154    	; 0xa52 <__addsf3+0x1e>
     aec:	93 95       	inc	r25
     aee:	88 0f       	add	r24, r24
     af0:	08 f0       	brcs	.+2      	; 0xaf4 <__addsf3x+0x9e>
     af2:	99 27       	eor	r25, r25
     af4:	ee 0f       	add	r30, r30
     af6:	97 95       	ror	r25
     af8:	87 95       	ror	r24
     afa:	08 95       	ret

00000afc <__divsf3>:
     afc:	0c d0       	rcall	.+24     	; 0xb16 <__divsf3x>
     afe:	e6 c0       	rjmp	.+460    	; 0xccc <__fp_round>
     b00:	de d0       	rcall	.+444    	; 0xcbe <__fp_pscB>
     b02:	40 f0       	brcs	.+16     	; 0xb14 <__divsf3+0x18>
     b04:	d5 d0       	rcall	.+426    	; 0xcb0 <__fp_pscA>
     b06:	30 f0       	brcs	.+12     	; 0xb14 <__divsf3+0x18>
     b08:	21 f4       	brne	.+8      	; 0xb12 <__divsf3+0x16>
     b0a:	5f 3f       	cpi	r21, 0xFF	; 255
     b0c:	19 f0       	breq	.+6      	; 0xb14 <__divsf3+0x18>
     b0e:	c7 c0       	rjmp	.+398    	; 0xc9e <__fp_inf>
     b10:	51 11       	cpse	r21, r1
     b12:	10 c1       	rjmp	.+544    	; 0xd34 <__fp_szero>
     b14:	ca c0       	rjmp	.+404    	; 0xcaa <__fp_nan>

00000b16 <__divsf3x>:
     b16:	eb d0       	rcall	.+470    	; 0xcee <__fp_split3>
     b18:	98 f3       	brcs	.-26     	; 0xb00 <__divsf3+0x4>

00000b1a <__divsf3_pse>:
     b1a:	99 23       	and	r25, r25
     b1c:	c9 f3       	breq	.-14     	; 0xb10 <__divsf3+0x14>
     b1e:	55 23       	and	r21, r21
     b20:	b1 f3       	breq	.-20     	; 0xb0e <__divsf3+0x12>
     b22:	95 1b       	sub	r25, r21
     b24:	55 0b       	sbc	r21, r21
     b26:	bb 27       	eor	r27, r27
     b28:	aa 27       	eor	r26, r26
     b2a:	62 17       	cp	r22, r18
     b2c:	73 07       	cpc	r23, r19
     b2e:	84 07       	cpc	r24, r20
     b30:	38 f0       	brcs	.+14     	; 0xb40 <__divsf3_pse+0x26>
     b32:	9f 5f       	subi	r25, 0xFF	; 255
     b34:	5f 4f       	sbci	r21, 0xFF	; 255
     b36:	22 0f       	add	r18, r18
     b38:	33 1f       	adc	r19, r19
     b3a:	44 1f       	adc	r20, r20
     b3c:	aa 1f       	adc	r26, r26
     b3e:	a9 f3       	breq	.-22     	; 0xb2a <__divsf3_pse+0x10>
     b40:	33 d0       	rcall	.+102    	; 0xba8 <__divsf3_pse+0x8e>
     b42:	0e 2e       	mov	r0, r30
     b44:	3a f0       	brmi	.+14     	; 0xb54 <__divsf3_pse+0x3a>
     b46:	e0 e8       	ldi	r30, 0x80	; 128
     b48:	30 d0       	rcall	.+96     	; 0xbaa <__divsf3_pse+0x90>
     b4a:	91 50       	subi	r25, 0x01	; 1
     b4c:	50 40       	sbci	r21, 0x00	; 0
     b4e:	e6 95       	lsr	r30
     b50:	00 1c       	adc	r0, r0
     b52:	ca f7       	brpl	.-14     	; 0xb46 <__divsf3_pse+0x2c>
     b54:	29 d0       	rcall	.+82     	; 0xba8 <__divsf3_pse+0x8e>
     b56:	fe 2f       	mov	r31, r30
     b58:	27 d0       	rcall	.+78     	; 0xba8 <__divsf3_pse+0x8e>
     b5a:	66 0f       	add	r22, r22
     b5c:	77 1f       	adc	r23, r23
     b5e:	88 1f       	adc	r24, r24
     b60:	bb 1f       	adc	r27, r27
     b62:	26 17       	cp	r18, r22
     b64:	37 07       	cpc	r19, r23
     b66:	48 07       	cpc	r20, r24
     b68:	ab 07       	cpc	r26, r27
     b6a:	b0 e8       	ldi	r27, 0x80	; 128
     b6c:	09 f0       	breq	.+2      	; 0xb70 <__divsf3_pse+0x56>
     b6e:	bb 0b       	sbc	r27, r27
     b70:	80 2d       	mov	r24, r0
     b72:	bf 01       	movw	r22, r30
     b74:	ff 27       	eor	r31, r31
     b76:	93 58       	subi	r25, 0x83	; 131
     b78:	5f 4f       	sbci	r21, 0xFF	; 255
     b7a:	2a f0       	brmi	.+10     	; 0xb86 <__divsf3_pse+0x6c>
     b7c:	9e 3f       	cpi	r25, 0xFE	; 254
     b7e:	51 05       	cpc	r21, r1
     b80:	68 f0       	brcs	.+26     	; 0xb9c <__divsf3_pse+0x82>
     b82:	8d c0       	rjmp	.+282    	; 0xc9e <__fp_inf>
     b84:	d7 c0       	rjmp	.+430    	; 0xd34 <__fp_szero>
     b86:	5f 3f       	cpi	r21, 0xFF	; 255
     b88:	ec f3       	brlt	.-6      	; 0xb84 <__divsf3_pse+0x6a>
     b8a:	98 3e       	cpi	r25, 0xE8	; 232
     b8c:	dc f3       	brlt	.-10     	; 0xb84 <__divsf3_pse+0x6a>
     b8e:	86 95       	lsr	r24
     b90:	77 95       	ror	r23
     b92:	67 95       	ror	r22
     b94:	b7 95       	ror	r27
     b96:	f7 95       	ror	r31
     b98:	9f 5f       	subi	r25, 0xFF	; 255
     b9a:	c9 f7       	brne	.-14     	; 0xb8e <__divsf3_pse+0x74>
     b9c:	88 0f       	add	r24, r24
     b9e:	91 1d       	adc	r25, r1
     ba0:	96 95       	lsr	r25
     ba2:	87 95       	ror	r24
     ba4:	97 f9       	bld	r25, 7
     ba6:	08 95       	ret
     ba8:	e1 e0       	ldi	r30, 0x01	; 1
     baa:	66 0f       	add	r22, r22
     bac:	77 1f       	adc	r23, r23
     bae:	88 1f       	adc	r24, r24
     bb0:	bb 1f       	adc	r27, r27
     bb2:	62 17       	cp	r22, r18
     bb4:	73 07       	cpc	r23, r19
     bb6:	84 07       	cpc	r24, r20
     bb8:	ba 07       	cpc	r27, r26
     bba:	20 f0       	brcs	.+8      	; 0xbc4 <__divsf3_pse+0xaa>
     bbc:	62 1b       	sub	r22, r18
     bbe:	73 0b       	sbc	r23, r19
     bc0:	84 0b       	sbc	r24, r20
     bc2:	ba 0b       	sbc	r27, r26
     bc4:	ee 1f       	adc	r30, r30
     bc6:	88 f7       	brcc	.-30     	; 0xbaa <__divsf3_pse+0x90>
     bc8:	e0 95       	com	r30
     bca:	08 95       	ret

00000bcc <__fixunssfsi>:
     bcc:	98 d0       	rcall	.+304    	; 0xcfe <__fp_splitA>
     bce:	88 f0       	brcs	.+34     	; 0xbf2 <__fixunssfsi+0x26>
     bd0:	9f 57       	subi	r25, 0x7F	; 127
     bd2:	90 f0       	brcs	.+36     	; 0xbf8 <__fixunssfsi+0x2c>
     bd4:	b9 2f       	mov	r27, r25
     bd6:	99 27       	eor	r25, r25
     bd8:	b7 51       	subi	r27, 0x17	; 23
     bda:	a0 f0       	brcs	.+40     	; 0xc04 <__fixunssfsi+0x38>
     bdc:	d1 f0       	breq	.+52     	; 0xc12 <__fixunssfsi+0x46>
     bde:	66 0f       	add	r22, r22
     be0:	77 1f       	adc	r23, r23
     be2:	88 1f       	adc	r24, r24
     be4:	99 1f       	adc	r25, r25
     be6:	1a f0       	brmi	.+6      	; 0xbee <__fixunssfsi+0x22>
     be8:	ba 95       	dec	r27
     bea:	c9 f7       	brne	.-14     	; 0xbde <__fixunssfsi+0x12>
     bec:	12 c0       	rjmp	.+36     	; 0xc12 <__fixunssfsi+0x46>
     bee:	b1 30       	cpi	r27, 0x01	; 1
     bf0:	81 f0       	breq	.+32     	; 0xc12 <__fixunssfsi+0x46>
     bf2:	9f d0       	rcall	.+318    	; 0xd32 <__fp_zero>
     bf4:	b1 e0       	ldi	r27, 0x01	; 1
     bf6:	08 95       	ret
     bf8:	9c c0       	rjmp	.+312    	; 0xd32 <__fp_zero>
     bfa:	67 2f       	mov	r22, r23
     bfc:	78 2f       	mov	r23, r24
     bfe:	88 27       	eor	r24, r24
     c00:	b8 5f       	subi	r27, 0xF8	; 248
     c02:	39 f0       	breq	.+14     	; 0xc12 <__fixunssfsi+0x46>
     c04:	b9 3f       	cpi	r27, 0xF9	; 249
     c06:	cc f3       	brlt	.-14     	; 0xbfa <__fixunssfsi+0x2e>
     c08:	86 95       	lsr	r24
     c0a:	77 95       	ror	r23
     c0c:	67 95       	ror	r22
     c0e:	b3 95       	inc	r27
     c10:	d9 f7       	brne	.-10     	; 0xc08 <__fixunssfsi+0x3c>
     c12:	3e f4       	brtc	.+14     	; 0xc22 <__fixunssfsi+0x56>
     c14:	90 95       	com	r25
     c16:	80 95       	com	r24
     c18:	70 95       	com	r23
     c1a:	61 95       	neg	r22
     c1c:	7f 4f       	sbci	r23, 0xFF	; 255
     c1e:	8f 4f       	sbci	r24, 0xFF	; 255
     c20:	9f 4f       	sbci	r25, 0xFF	; 255
     c22:	08 95       	ret

00000c24 <__floatunsisf>:
     c24:	e8 94       	clt
     c26:	09 c0       	rjmp	.+18     	; 0xc3a <__floatsisf+0x12>

00000c28 <__floatsisf>:
     c28:	97 fb       	bst	r25, 7
     c2a:	3e f4       	brtc	.+14     	; 0xc3a <__floatsisf+0x12>
     c2c:	90 95       	com	r25
     c2e:	80 95       	com	r24
     c30:	70 95       	com	r23
     c32:	61 95       	neg	r22
     c34:	7f 4f       	sbci	r23, 0xFF	; 255
     c36:	8f 4f       	sbci	r24, 0xFF	; 255
     c38:	9f 4f       	sbci	r25, 0xFF	; 255
     c3a:	99 23       	and	r25, r25
     c3c:	a9 f0       	breq	.+42     	; 0xc68 <__floatsisf+0x40>
     c3e:	f9 2f       	mov	r31, r25
     c40:	96 e9       	ldi	r25, 0x96	; 150
     c42:	bb 27       	eor	r27, r27
     c44:	93 95       	inc	r25
     c46:	f6 95       	lsr	r31
     c48:	87 95       	ror	r24
     c4a:	77 95       	ror	r23
     c4c:	67 95       	ror	r22
     c4e:	b7 95       	ror	r27
     c50:	f1 11       	cpse	r31, r1
     c52:	f8 cf       	rjmp	.-16     	; 0xc44 <__floatsisf+0x1c>
     c54:	fa f4       	brpl	.+62     	; 0xc94 <__floatsisf+0x6c>
     c56:	bb 0f       	add	r27, r27
     c58:	11 f4       	brne	.+4      	; 0xc5e <__floatsisf+0x36>
     c5a:	60 ff       	sbrs	r22, 0
     c5c:	1b c0       	rjmp	.+54     	; 0xc94 <__floatsisf+0x6c>
     c5e:	6f 5f       	subi	r22, 0xFF	; 255
     c60:	7f 4f       	sbci	r23, 0xFF	; 255
     c62:	8f 4f       	sbci	r24, 0xFF	; 255
     c64:	9f 4f       	sbci	r25, 0xFF	; 255
     c66:	16 c0       	rjmp	.+44     	; 0xc94 <__floatsisf+0x6c>
     c68:	88 23       	and	r24, r24
     c6a:	11 f0       	breq	.+4      	; 0xc70 <__floatsisf+0x48>
     c6c:	96 e9       	ldi	r25, 0x96	; 150
     c6e:	11 c0       	rjmp	.+34     	; 0xc92 <__floatsisf+0x6a>
     c70:	77 23       	and	r23, r23
     c72:	21 f0       	breq	.+8      	; 0xc7c <__floatsisf+0x54>
     c74:	9e e8       	ldi	r25, 0x8E	; 142
     c76:	87 2f       	mov	r24, r23
     c78:	76 2f       	mov	r23, r22
     c7a:	05 c0       	rjmp	.+10     	; 0xc86 <__floatsisf+0x5e>
     c7c:	66 23       	and	r22, r22
     c7e:	71 f0       	breq	.+28     	; 0xc9c <__floatsisf+0x74>
     c80:	96 e8       	ldi	r25, 0x86	; 134
     c82:	86 2f       	mov	r24, r22
     c84:	70 e0       	ldi	r23, 0x00	; 0
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	2a f0       	brmi	.+10     	; 0xc94 <__floatsisf+0x6c>
     c8a:	9a 95       	dec	r25
     c8c:	66 0f       	add	r22, r22
     c8e:	77 1f       	adc	r23, r23
     c90:	88 1f       	adc	r24, r24
     c92:	da f7       	brpl	.-10     	; 0xc8a <__floatsisf+0x62>
     c94:	88 0f       	add	r24, r24
     c96:	96 95       	lsr	r25
     c98:	87 95       	ror	r24
     c9a:	97 f9       	bld	r25, 7
     c9c:	08 95       	ret

00000c9e <__fp_inf>:
     c9e:	97 f9       	bld	r25, 7
     ca0:	9f 67       	ori	r25, 0x7F	; 127
     ca2:	80 e8       	ldi	r24, 0x80	; 128
     ca4:	70 e0       	ldi	r23, 0x00	; 0
     ca6:	60 e0       	ldi	r22, 0x00	; 0
     ca8:	08 95       	ret

00000caa <__fp_nan>:
     caa:	9f ef       	ldi	r25, 0xFF	; 255
     cac:	80 ec       	ldi	r24, 0xC0	; 192
     cae:	08 95       	ret

00000cb0 <__fp_pscA>:
     cb0:	00 24       	eor	r0, r0
     cb2:	0a 94       	dec	r0
     cb4:	16 16       	cp	r1, r22
     cb6:	17 06       	cpc	r1, r23
     cb8:	18 06       	cpc	r1, r24
     cba:	09 06       	cpc	r0, r25
     cbc:	08 95       	ret

00000cbe <__fp_pscB>:
     cbe:	00 24       	eor	r0, r0
     cc0:	0a 94       	dec	r0
     cc2:	12 16       	cp	r1, r18
     cc4:	13 06       	cpc	r1, r19
     cc6:	14 06       	cpc	r1, r20
     cc8:	05 06       	cpc	r0, r21
     cca:	08 95       	ret

00000ccc <__fp_round>:
     ccc:	09 2e       	mov	r0, r25
     cce:	03 94       	inc	r0
     cd0:	00 0c       	add	r0, r0
     cd2:	11 f4       	brne	.+4      	; 0xcd8 <__fp_round+0xc>
     cd4:	88 23       	and	r24, r24
     cd6:	52 f0       	brmi	.+20     	; 0xcec <__fp_round+0x20>
     cd8:	bb 0f       	add	r27, r27
     cda:	40 f4       	brcc	.+16     	; 0xcec <__fp_round+0x20>
     cdc:	bf 2b       	or	r27, r31
     cde:	11 f4       	brne	.+4      	; 0xce4 <__fp_round+0x18>
     ce0:	60 ff       	sbrs	r22, 0
     ce2:	04 c0       	rjmp	.+8      	; 0xcec <__fp_round+0x20>
     ce4:	6f 5f       	subi	r22, 0xFF	; 255
     ce6:	7f 4f       	sbci	r23, 0xFF	; 255
     ce8:	8f 4f       	sbci	r24, 0xFF	; 255
     cea:	9f 4f       	sbci	r25, 0xFF	; 255
     cec:	08 95       	ret

00000cee <__fp_split3>:
     cee:	57 fd       	sbrc	r21, 7
     cf0:	90 58       	subi	r25, 0x80	; 128
     cf2:	44 0f       	add	r20, r20
     cf4:	55 1f       	adc	r21, r21
     cf6:	59 f0       	breq	.+22     	; 0xd0e <__fp_splitA+0x10>
     cf8:	5f 3f       	cpi	r21, 0xFF	; 255
     cfa:	71 f0       	breq	.+28     	; 0xd18 <__fp_splitA+0x1a>
     cfc:	47 95       	ror	r20

00000cfe <__fp_splitA>:
     cfe:	88 0f       	add	r24, r24
     d00:	97 fb       	bst	r25, 7
     d02:	99 1f       	adc	r25, r25
     d04:	61 f0       	breq	.+24     	; 0xd1e <__fp_splitA+0x20>
     d06:	9f 3f       	cpi	r25, 0xFF	; 255
     d08:	79 f0       	breq	.+30     	; 0xd28 <__fp_splitA+0x2a>
     d0a:	87 95       	ror	r24
     d0c:	08 95       	ret
     d0e:	12 16       	cp	r1, r18
     d10:	13 06       	cpc	r1, r19
     d12:	14 06       	cpc	r1, r20
     d14:	55 1f       	adc	r21, r21
     d16:	f2 cf       	rjmp	.-28     	; 0xcfc <__fp_split3+0xe>
     d18:	46 95       	lsr	r20
     d1a:	f1 df       	rcall	.-30     	; 0xcfe <__fp_splitA>
     d1c:	08 c0       	rjmp	.+16     	; 0xd2e <__fp_splitA+0x30>
     d1e:	16 16       	cp	r1, r22
     d20:	17 06       	cpc	r1, r23
     d22:	18 06       	cpc	r1, r24
     d24:	99 1f       	adc	r25, r25
     d26:	f1 cf       	rjmp	.-30     	; 0xd0a <__fp_splitA+0xc>
     d28:	86 95       	lsr	r24
     d2a:	71 05       	cpc	r23, r1
     d2c:	61 05       	cpc	r22, r1
     d2e:	08 94       	sec
     d30:	08 95       	ret

00000d32 <__fp_zero>:
     d32:	e8 94       	clt

00000d34 <__fp_szero>:
     d34:	bb 27       	eor	r27, r27
     d36:	66 27       	eor	r22, r22
     d38:	77 27       	eor	r23, r23
     d3a:	cb 01       	movw	r24, r22
     d3c:	97 f9       	bld	r25, 7
     d3e:	08 95       	ret

00000d40 <__mulsf3>:
     d40:	0b d0       	rcall	.+22     	; 0xd58 <__mulsf3x>
     d42:	c4 cf       	rjmp	.-120    	; 0xccc <__fp_round>
     d44:	b5 df       	rcall	.-150    	; 0xcb0 <__fp_pscA>
     d46:	28 f0       	brcs	.+10     	; 0xd52 <__mulsf3+0x12>
     d48:	ba df       	rcall	.-140    	; 0xcbe <__fp_pscB>
     d4a:	18 f0       	brcs	.+6      	; 0xd52 <__mulsf3+0x12>
     d4c:	95 23       	and	r25, r21
     d4e:	09 f0       	breq	.+2      	; 0xd52 <__mulsf3+0x12>
     d50:	a6 cf       	rjmp	.-180    	; 0xc9e <__fp_inf>
     d52:	ab cf       	rjmp	.-170    	; 0xcaa <__fp_nan>
     d54:	11 24       	eor	r1, r1
     d56:	ee cf       	rjmp	.-36     	; 0xd34 <__fp_szero>

00000d58 <__mulsf3x>:
     d58:	ca df       	rcall	.-108    	; 0xcee <__fp_split3>
     d5a:	a0 f3       	brcs	.-24     	; 0xd44 <__mulsf3+0x4>

00000d5c <__mulsf3_pse>:
     d5c:	95 9f       	mul	r25, r21
     d5e:	d1 f3       	breq	.-12     	; 0xd54 <__mulsf3+0x14>
     d60:	95 0f       	add	r25, r21
     d62:	50 e0       	ldi	r21, 0x00	; 0
     d64:	55 1f       	adc	r21, r21
     d66:	62 9f       	mul	r22, r18
     d68:	f0 01       	movw	r30, r0
     d6a:	72 9f       	mul	r23, r18
     d6c:	bb 27       	eor	r27, r27
     d6e:	f0 0d       	add	r31, r0
     d70:	b1 1d       	adc	r27, r1
     d72:	63 9f       	mul	r22, r19
     d74:	aa 27       	eor	r26, r26
     d76:	f0 0d       	add	r31, r0
     d78:	b1 1d       	adc	r27, r1
     d7a:	aa 1f       	adc	r26, r26
     d7c:	64 9f       	mul	r22, r20
     d7e:	66 27       	eor	r22, r22
     d80:	b0 0d       	add	r27, r0
     d82:	a1 1d       	adc	r26, r1
     d84:	66 1f       	adc	r22, r22
     d86:	82 9f       	mul	r24, r18
     d88:	22 27       	eor	r18, r18
     d8a:	b0 0d       	add	r27, r0
     d8c:	a1 1d       	adc	r26, r1
     d8e:	62 1f       	adc	r22, r18
     d90:	73 9f       	mul	r23, r19
     d92:	b0 0d       	add	r27, r0
     d94:	a1 1d       	adc	r26, r1
     d96:	62 1f       	adc	r22, r18
     d98:	83 9f       	mul	r24, r19
     d9a:	a0 0d       	add	r26, r0
     d9c:	61 1d       	adc	r22, r1
     d9e:	22 1f       	adc	r18, r18
     da0:	74 9f       	mul	r23, r20
     da2:	33 27       	eor	r19, r19
     da4:	a0 0d       	add	r26, r0
     da6:	61 1d       	adc	r22, r1
     da8:	23 1f       	adc	r18, r19
     daa:	84 9f       	mul	r24, r20
     dac:	60 0d       	add	r22, r0
     dae:	21 1d       	adc	r18, r1
     db0:	82 2f       	mov	r24, r18
     db2:	76 2f       	mov	r23, r22
     db4:	6a 2f       	mov	r22, r26
     db6:	11 24       	eor	r1, r1
     db8:	9f 57       	subi	r25, 0x7F	; 127
     dba:	50 40       	sbci	r21, 0x00	; 0
     dbc:	8a f0       	brmi	.+34     	; 0xde0 <__mulsf3_pse+0x84>
     dbe:	e1 f0       	breq	.+56     	; 0xdf8 <__mulsf3_pse+0x9c>
     dc0:	88 23       	and	r24, r24
     dc2:	4a f0       	brmi	.+18     	; 0xdd6 <__mulsf3_pse+0x7a>
     dc4:	ee 0f       	add	r30, r30
     dc6:	ff 1f       	adc	r31, r31
     dc8:	bb 1f       	adc	r27, r27
     dca:	66 1f       	adc	r22, r22
     dcc:	77 1f       	adc	r23, r23
     dce:	88 1f       	adc	r24, r24
     dd0:	91 50       	subi	r25, 0x01	; 1
     dd2:	50 40       	sbci	r21, 0x00	; 0
     dd4:	a9 f7       	brne	.-22     	; 0xdc0 <__mulsf3_pse+0x64>
     dd6:	9e 3f       	cpi	r25, 0xFE	; 254
     dd8:	51 05       	cpc	r21, r1
     dda:	70 f0       	brcs	.+28     	; 0xdf8 <__mulsf3_pse+0x9c>
     ddc:	60 cf       	rjmp	.-320    	; 0xc9e <__fp_inf>
     dde:	aa cf       	rjmp	.-172    	; 0xd34 <__fp_szero>
     de0:	5f 3f       	cpi	r21, 0xFF	; 255
     de2:	ec f3       	brlt	.-6      	; 0xdde <__mulsf3_pse+0x82>
     de4:	98 3e       	cpi	r25, 0xE8	; 232
     de6:	dc f3       	brlt	.-10     	; 0xdde <__mulsf3_pse+0x82>
     de8:	86 95       	lsr	r24
     dea:	77 95       	ror	r23
     dec:	67 95       	ror	r22
     dee:	b7 95       	ror	r27
     df0:	f7 95       	ror	r31
     df2:	e7 95       	ror	r30
     df4:	9f 5f       	subi	r25, 0xFF	; 255
     df6:	c1 f7       	brne	.-16     	; 0xde8 <__mulsf3_pse+0x8c>
     df8:	fe 2b       	or	r31, r30
     dfa:	88 0f       	add	r24, r24
     dfc:	91 1d       	adc	r25, r1
     dfe:	96 95       	lsr	r25
     e00:	87 95       	ror	r24
     e02:	97 f9       	bld	r25, 7
     e04:	08 95       	ret

00000e06 <pow>:
     e06:	fa 01       	movw	r30, r20
     e08:	ee 0f       	add	r30, r30
     e0a:	ff 1f       	adc	r31, r31
     e0c:	30 96       	adiw	r30, 0x00	; 0
     e0e:	21 05       	cpc	r18, r1
     e10:	31 05       	cpc	r19, r1
     e12:	99 f1       	breq	.+102    	; 0xe7a <pow+0x74>
     e14:	61 15       	cp	r22, r1
     e16:	71 05       	cpc	r23, r1
     e18:	61 f4       	brne	.+24     	; 0xe32 <pow+0x2c>
     e1a:	80 38       	cpi	r24, 0x80	; 128
     e1c:	bf e3       	ldi	r27, 0x3F	; 63
     e1e:	9b 07       	cpc	r25, r27
     e20:	49 f1       	breq	.+82     	; 0xe74 <pow+0x6e>
     e22:	68 94       	set
     e24:	90 38       	cpi	r25, 0x80	; 128
     e26:	81 05       	cpc	r24, r1
     e28:	61 f0       	breq	.+24     	; 0xe42 <pow+0x3c>
     e2a:	80 38       	cpi	r24, 0x80	; 128
     e2c:	bf ef       	ldi	r27, 0xFF	; 255
     e2e:	9b 07       	cpc	r25, r27
     e30:	41 f0       	breq	.+16     	; 0xe42 <pow+0x3c>
     e32:	99 23       	and	r25, r25
     e34:	42 f5       	brpl	.+80     	; 0xe86 <pow+0x80>
     e36:	ff 3f       	cpi	r31, 0xFF	; 255
     e38:	e1 05       	cpc	r30, r1
     e3a:	31 05       	cpc	r19, r1
     e3c:	21 05       	cpc	r18, r1
     e3e:	11 f1       	breq	.+68     	; 0xe84 <pow+0x7e>
     e40:	e8 94       	clt
     e42:	08 94       	sec
     e44:	e7 95       	ror	r30
     e46:	d9 01       	movw	r26, r18
     e48:	aa 23       	and	r26, r26
     e4a:	29 f4       	brne	.+10     	; 0xe56 <pow+0x50>
     e4c:	ab 2f       	mov	r26, r27
     e4e:	be 2f       	mov	r27, r30
     e50:	f8 5f       	subi	r31, 0xF8	; 248
     e52:	d0 f3       	brcs	.-12     	; 0xe48 <pow+0x42>
     e54:	10 c0       	rjmp	.+32     	; 0xe76 <pow+0x70>
     e56:	ff 5f       	subi	r31, 0xFF	; 255
     e58:	70 f4       	brcc	.+28     	; 0xe76 <pow+0x70>
     e5a:	a6 95       	lsr	r26
     e5c:	e0 f7       	brcc	.-8      	; 0xe56 <pow+0x50>
     e5e:	f7 39       	cpi	r31, 0x97	; 151
     e60:	50 f0       	brcs	.+20     	; 0xe76 <pow+0x70>
     e62:	19 f0       	breq	.+6      	; 0xe6a <pow+0x64>
     e64:	ff 3a       	cpi	r31, 0xAF	; 175
     e66:	38 f4       	brcc	.+14     	; 0xe76 <pow+0x70>
     e68:	9f 77       	andi	r25, 0x7F	; 127
     e6a:	9f 93       	push	r25
     e6c:	0c d0       	rcall	.+24     	; 0xe86 <pow+0x80>
     e6e:	0f 90       	pop	r0
     e70:	07 fc       	sbrc	r0, 7
     e72:	90 58       	subi	r25, 0x80	; 128
     e74:	08 95       	ret
     e76:	3e f0       	brts	.+14     	; 0xe86 <pow+0x80>
     e78:	18 cf       	rjmp	.-464    	; 0xcaa <__fp_nan>
     e7a:	60 e0       	ldi	r22, 0x00	; 0
     e7c:	70 e0       	ldi	r23, 0x00	; 0
     e7e:	80 e8       	ldi	r24, 0x80	; 128
     e80:	9f e3       	ldi	r25, 0x3F	; 63
     e82:	08 95       	ret
     e84:	4f e7       	ldi	r20, 0x7F	; 127
     e86:	9f 77       	andi	r25, 0x7F	; 127
     e88:	5f 93       	push	r21
     e8a:	4f 93       	push	r20
     e8c:	3f 93       	push	r19
     e8e:	2f 93       	push	r18
     e90:	9e d0       	rcall	.+316    	; 0xfce <log>
     e92:	2f 91       	pop	r18
     e94:	3f 91       	pop	r19
     e96:	4f 91       	pop	r20
     e98:	5f 91       	pop	r21
     e9a:	52 df       	rcall	.-348    	; 0xd40 <__mulsf3>
     e9c:	05 c0       	rjmp	.+10     	; 0xea8 <exp>
     e9e:	19 f4       	brne	.+6      	; 0xea6 <pow+0xa0>
     ea0:	0e f0       	brts	.+2      	; 0xea4 <pow+0x9e>
     ea2:	fd ce       	rjmp	.-518    	; 0xc9e <__fp_inf>
     ea4:	46 cf       	rjmp	.-372    	; 0xd32 <__fp_zero>
     ea6:	01 cf       	rjmp	.-510    	; 0xcaa <__fp_nan>

00000ea8 <exp>:
     ea8:	2a df       	rcall	.-428    	; 0xcfe <__fp_splitA>
     eaa:	c8 f3       	brcs	.-14     	; 0xe9e <pow+0x98>
     eac:	96 38       	cpi	r25, 0x86	; 134
     eae:	c0 f7       	brcc	.-16     	; 0xea0 <pow+0x9a>
     eb0:	07 f8       	bld	r0, 7
     eb2:	0f 92       	push	r0
     eb4:	e8 94       	clt
     eb6:	2b e3       	ldi	r18, 0x3B	; 59
     eb8:	3a ea       	ldi	r19, 0xAA	; 170
     eba:	48 eb       	ldi	r20, 0xB8	; 184
     ebc:	5f e7       	ldi	r21, 0x7F	; 127
     ebe:	4e df       	rcall	.-356    	; 0xd5c <__mulsf3_pse>
     ec0:	0f 92       	push	r0
     ec2:	0f 92       	push	r0
     ec4:	0f 92       	push	r0
     ec6:	4d b7       	in	r20, 0x3d	; 61
     ec8:	5e b7       	in	r21, 0x3e	; 62
     eca:	0f 92       	push	r0
     ecc:	c0 d0       	rcall	.+384    	; 0x104e <modf>
     ece:	e8 e6       	ldi	r30, 0x68	; 104
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	16 d0       	rcall	.+44     	; 0xf00 <__fp_powser>
     ed4:	4f 91       	pop	r20
     ed6:	5f 91       	pop	r21
     ed8:	ef 91       	pop	r30
     eda:	ff 91       	pop	r31
     edc:	e5 95       	asr	r30
     ede:	ee 1f       	adc	r30, r30
     ee0:	ff 1f       	adc	r31, r31
     ee2:	49 f0       	breq	.+18     	; 0xef6 <exp+0x4e>
     ee4:	fe 57       	subi	r31, 0x7E	; 126
     ee6:	e0 68       	ori	r30, 0x80	; 128
     ee8:	44 27       	eor	r20, r20
     eea:	ee 0f       	add	r30, r30
     eec:	44 1f       	adc	r20, r20
     eee:	fa 95       	dec	r31
     ef0:	e1 f7       	brne	.-8      	; 0xeea <exp+0x42>
     ef2:	41 95       	neg	r20
     ef4:	55 0b       	sbc	r21, r21
     ef6:	32 d0       	rcall	.+100    	; 0xf5c <ldexp>
     ef8:	0f 90       	pop	r0
     efa:	07 fe       	sbrs	r0, 7
     efc:	26 c0       	rjmp	.+76     	; 0xf4a <inverse>
     efe:	08 95       	ret

00000f00 <__fp_powser>:
     f00:	df 93       	push	r29
     f02:	cf 93       	push	r28
     f04:	1f 93       	push	r17
     f06:	0f 93       	push	r16
     f08:	ff 92       	push	r15
     f0a:	ef 92       	push	r14
     f0c:	df 92       	push	r13
     f0e:	7b 01       	movw	r14, r22
     f10:	8c 01       	movw	r16, r24
     f12:	68 94       	set
     f14:	05 c0       	rjmp	.+10     	; 0xf20 <__fp_powser+0x20>
     f16:	da 2e       	mov	r13, r26
     f18:	ef 01       	movw	r28, r30
     f1a:	1e df       	rcall	.-452    	; 0xd58 <__mulsf3x>
     f1c:	fe 01       	movw	r30, r28
     f1e:	e8 94       	clt
     f20:	a5 91       	lpm	r26, Z+
     f22:	25 91       	lpm	r18, Z+
     f24:	35 91       	lpm	r19, Z+
     f26:	45 91       	lpm	r20, Z+
     f28:	55 91       	lpm	r21, Z+
     f2a:	ae f3       	brts	.-22     	; 0xf16 <__fp_powser+0x16>
     f2c:	ef 01       	movw	r28, r30
     f2e:	93 dd       	rcall	.-1242   	; 0xa56 <__addsf3x>
     f30:	fe 01       	movw	r30, r28
     f32:	97 01       	movw	r18, r14
     f34:	a8 01       	movw	r20, r16
     f36:	da 94       	dec	r13
     f38:	79 f7       	brne	.-34     	; 0xf18 <__fp_powser+0x18>
     f3a:	df 90       	pop	r13
     f3c:	ef 90       	pop	r14
     f3e:	ff 90       	pop	r15
     f40:	0f 91       	pop	r16
     f42:	1f 91       	pop	r17
     f44:	cf 91       	pop	r28
     f46:	df 91       	pop	r29
     f48:	08 95       	ret

00000f4a <inverse>:
     f4a:	9b 01       	movw	r18, r22
     f4c:	ac 01       	movw	r20, r24
     f4e:	60 e0       	ldi	r22, 0x00	; 0
     f50:	70 e0       	ldi	r23, 0x00	; 0
     f52:	80 e8       	ldi	r24, 0x80	; 128
     f54:	9f e3       	ldi	r25, 0x3F	; 63
     f56:	d2 cd       	rjmp	.-1116   	; 0xafc <__divsf3>
     f58:	a2 ce       	rjmp	.-700    	; 0xc9e <__fp_inf>
     f5a:	ac c0       	rjmp	.+344    	; 0x10b4 <__fp_mpack>

00000f5c <ldexp>:
     f5c:	d0 de       	rcall	.-608    	; 0xcfe <__fp_splitA>
     f5e:	e8 f3       	brcs	.-6      	; 0xf5a <inverse+0x10>
     f60:	99 23       	and	r25, r25
     f62:	d9 f3       	breq	.-10     	; 0xf5a <inverse+0x10>
     f64:	94 0f       	add	r25, r20
     f66:	51 1d       	adc	r21, r1
     f68:	bb f3       	brvs	.-18     	; 0xf58 <inverse+0xe>
     f6a:	91 50       	subi	r25, 0x01	; 1
     f6c:	50 40       	sbci	r21, 0x00	; 0
     f6e:	94 f0       	brlt	.+36     	; 0xf94 <ldexp+0x38>
     f70:	59 f0       	breq	.+22     	; 0xf88 <ldexp+0x2c>
     f72:	88 23       	and	r24, r24
     f74:	32 f0       	brmi	.+12     	; 0xf82 <ldexp+0x26>
     f76:	66 0f       	add	r22, r22
     f78:	77 1f       	adc	r23, r23
     f7a:	88 1f       	adc	r24, r24
     f7c:	91 50       	subi	r25, 0x01	; 1
     f7e:	50 40       	sbci	r21, 0x00	; 0
     f80:	c1 f7       	brne	.-16     	; 0xf72 <ldexp+0x16>
     f82:	9e 3f       	cpi	r25, 0xFE	; 254
     f84:	51 05       	cpc	r21, r1
     f86:	44 f7       	brge	.-48     	; 0xf58 <inverse+0xe>
     f88:	88 0f       	add	r24, r24
     f8a:	91 1d       	adc	r25, r1
     f8c:	96 95       	lsr	r25
     f8e:	87 95       	ror	r24
     f90:	97 f9       	bld	r25, 7
     f92:	08 95       	ret
     f94:	5f 3f       	cpi	r21, 0xFF	; 255
     f96:	ac f0       	brlt	.+42     	; 0xfc2 <ldexp+0x66>
     f98:	98 3e       	cpi	r25, 0xE8	; 232
     f9a:	9c f0       	brlt	.+38     	; 0xfc2 <ldexp+0x66>
     f9c:	bb 27       	eor	r27, r27
     f9e:	86 95       	lsr	r24
     fa0:	77 95       	ror	r23
     fa2:	67 95       	ror	r22
     fa4:	b7 95       	ror	r27
     fa6:	08 f4       	brcc	.+2      	; 0xfaa <ldexp+0x4e>
     fa8:	b1 60       	ori	r27, 0x01	; 1
     faa:	93 95       	inc	r25
     fac:	c1 f7       	brne	.-16     	; 0xf9e <ldexp+0x42>
     fae:	bb 0f       	add	r27, r27
     fb0:	58 f7       	brcc	.-42     	; 0xf88 <ldexp+0x2c>
     fb2:	11 f4       	brne	.+4      	; 0xfb8 <ldexp+0x5c>
     fb4:	60 ff       	sbrs	r22, 0
     fb6:	e8 cf       	rjmp	.-48     	; 0xf88 <ldexp+0x2c>
     fb8:	6f 5f       	subi	r22, 0xFF	; 255
     fba:	7f 4f       	sbci	r23, 0xFF	; 255
     fbc:	8f 4f       	sbci	r24, 0xFF	; 255
     fbe:	9f 4f       	sbci	r25, 0xFF	; 255
     fc0:	e3 cf       	rjmp	.-58     	; 0xf88 <ldexp+0x2c>
     fc2:	b8 ce       	rjmp	.-656    	; 0xd34 <__fp_szero>
     fc4:	0e f0       	brts	.+2      	; 0xfc8 <ldexp+0x6c>
     fc6:	76 c0       	rjmp	.+236    	; 0x10b4 <__fp_mpack>
     fc8:	70 ce       	rjmp	.-800    	; 0xcaa <__fp_nan>
     fca:	68 94       	set
     fcc:	68 ce       	rjmp	.-816    	; 0xc9e <__fp_inf>

00000fce <log>:
     fce:	97 de       	rcall	.-722    	; 0xcfe <__fp_splitA>
     fd0:	c8 f3       	brcs	.-14     	; 0xfc4 <ldexp+0x68>
     fd2:	99 23       	and	r25, r25
     fd4:	d1 f3       	breq	.-12     	; 0xfca <ldexp+0x6e>
     fd6:	c6 f3       	brts	.-16     	; 0xfc8 <ldexp+0x6c>
     fd8:	df 93       	push	r29
     fda:	cf 93       	push	r28
     fdc:	1f 93       	push	r17
     fde:	0f 93       	push	r16
     fe0:	ff 92       	push	r15
     fe2:	c9 2f       	mov	r28, r25
     fe4:	dd 27       	eor	r29, r29
     fe6:	88 23       	and	r24, r24
     fe8:	2a f0       	brmi	.+10     	; 0xff4 <log+0x26>
     fea:	21 97       	sbiw	r28, 0x01	; 1
     fec:	66 0f       	add	r22, r22
     fee:	77 1f       	adc	r23, r23
     ff0:	88 1f       	adc	r24, r24
     ff2:	da f7       	brpl	.-10     	; 0xfea <log+0x1c>
     ff4:	20 e0       	ldi	r18, 0x00	; 0
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	40 e8       	ldi	r20, 0x80	; 128
     ffa:	5f eb       	ldi	r21, 0xBF	; 191
     ffc:	9f e3       	ldi	r25, 0x3F	; 63
     ffe:	88 39       	cpi	r24, 0x98	; 152
    1000:	20 f0       	brcs	.+8      	; 0x100a <log+0x3c>
    1002:	80 3e       	cpi	r24, 0xE0	; 224
    1004:	30 f0       	brcs	.+12     	; 0x1012 <log+0x44>
    1006:	21 96       	adiw	r28, 0x01	; 1
    1008:	8f 77       	andi	r24, 0x7F	; 127
    100a:	14 dd       	rcall	.-1496   	; 0xa34 <__addsf3>
    100c:	e0 e9       	ldi	r30, 0x90	; 144
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	03 c0       	rjmp	.+6      	; 0x1018 <log+0x4a>
    1012:	10 dd       	rcall	.-1504   	; 0xa34 <__addsf3>
    1014:	ed eb       	ldi	r30, 0xBD	; 189
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	73 df       	rcall	.-282    	; 0xf00 <__fp_powser>
    101a:	8b 01       	movw	r16, r22
    101c:	be 01       	movw	r22, r28
    101e:	ec 01       	movw	r28, r24
    1020:	fb 2e       	mov	r15, r27
    1022:	6f 57       	subi	r22, 0x7F	; 127
    1024:	71 09       	sbc	r23, r1
    1026:	75 95       	asr	r23
    1028:	77 1f       	adc	r23, r23
    102a:	88 0b       	sbc	r24, r24
    102c:	99 0b       	sbc	r25, r25
    102e:	fc dd       	rcall	.-1032   	; 0xc28 <__floatsisf>
    1030:	28 e1       	ldi	r18, 0x18	; 24
    1032:	32 e7       	ldi	r19, 0x72	; 114
    1034:	41 e3       	ldi	r20, 0x31	; 49
    1036:	5f e3       	ldi	r21, 0x3F	; 63
    1038:	8f de       	rcall	.-738    	; 0xd58 <__mulsf3x>
    103a:	af 2d       	mov	r26, r15
    103c:	98 01       	movw	r18, r16
    103e:	ae 01       	movw	r20, r28
    1040:	ff 90       	pop	r15
    1042:	0f 91       	pop	r16
    1044:	1f 91       	pop	r17
    1046:	cf 91       	pop	r28
    1048:	df 91       	pop	r29
    104a:	05 dd       	rcall	.-1526   	; 0xa56 <__addsf3x>
    104c:	3f ce       	rjmp	.-898    	; 0xccc <__fp_round>

0000104e <modf>:
    104e:	fa 01       	movw	r30, r20
    1050:	dc 01       	movw	r26, r24
    1052:	aa 0f       	add	r26, r26
    1054:	bb 1f       	adc	r27, r27
    1056:	9b 01       	movw	r18, r22
    1058:	ac 01       	movw	r20, r24
    105a:	bf 57       	subi	r27, 0x7F	; 127
    105c:	28 f4       	brcc	.+10     	; 0x1068 <modf+0x1a>
    105e:	22 27       	eor	r18, r18
    1060:	33 27       	eor	r19, r19
    1062:	44 27       	eor	r20, r20
    1064:	50 78       	andi	r21, 0x80	; 128
    1066:	1f c0       	rjmp	.+62     	; 0x10a6 <modf+0x58>
    1068:	b7 51       	subi	r27, 0x17	; 23
    106a:	88 f4       	brcc	.+34     	; 0x108e <modf+0x40>
    106c:	ab 2f       	mov	r26, r27
    106e:	00 24       	eor	r0, r0
    1070:	46 95       	lsr	r20
    1072:	37 95       	ror	r19
    1074:	27 95       	ror	r18
    1076:	01 1c       	adc	r0, r1
    1078:	a3 95       	inc	r26
    107a:	d2 f3       	brmi	.-12     	; 0x1070 <modf+0x22>
    107c:	00 20       	and	r0, r0
    107e:	69 f0       	breq	.+26     	; 0x109a <modf+0x4c>
    1080:	22 0f       	add	r18, r18
    1082:	33 1f       	adc	r19, r19
    1084:	44 1f       	adc	r20, r20
    1086:	b3 95       	inc	r27
    1088:	da f3       	brmi	.-10     	; 0x1080 <modf+0x32>
    108a:	0d d0       	rcall	.+26     	; 0x10a6 <modf+0x58>
    108c:	d2 cc       	rjmp	.-1628   	; 0xa32 <__subsf3>
    108e:	61 30       	cpi	r22, 0x01	; 1
    1090:	71 05       	cpc	r23, r1
    1092:	a0 e8       	ldi	r26, 0x80	; 128
    1094:	8a 07       	cpc	r24, r26
    1096:	b9 46       	sbci	r27, 0x69	; 105
    1098:	30 f4       	brcc	.+12     	; 0x10a6 <modf+0x58>
    109a:	9b 01       	movw	r18, r22
    109c:	ac 01       	movw	r20, r24
    109e:	66 27       	eor	r22, r22
    10a0:	77 27       	eor	r23, r23
    10a2:	88 27       	eor	r24, r24
    10a4:	90 78       	andi	r25, 0x80	; 128
    10a6:	30 96       	adiw	r30, 0x00	; 0
    10a8:	21 f0       	breq	.+8      	; 0x10b2 <modf+0x64>
    10aa:	20 83       	st	Z, r18
    10ac:	31 83       	std	Z+1, r19	; 0x01
    10ae:	42 83       	std	Z+2, r20	; 0x02
    10b0:	53 83       	std	Z+3, r21	; 0x03
    10b2:	08 95       	ret

000010b4 <__fp_mpack>:
    10b4:	9f 3f       	cpi	r25, 0xFF	; 255
    10b6:	31 f0       	breq	.+12     	; 0x10c4 <__fp_mpack_finite+0xc>

000010b8 <__fp_mpack_finite>:
    10b8:	91 50       	subi	r25, 0x01	; 1
    10ba:	20 f4       	brcc	.+8      	; 0x10c4 <__fp_mpack_finite+0xc>
    10bc:	87 95       	ror	r24
    10be:	77 95       	ror	r23
    10c0:	67 95       	ror	r22
    10c2:	b7 95       	ror	r27
    10c4:	88 0f       	add	r24, r24
    10c6:	91 1d       	adc	r25, r1
    10c8:	96 95       	lsr	r25
    10ca:	87 95       	ror	r24
    10cc:	97 f9       	bld	r25, 7
    10ce:	08 95       	ret

000010d0 <__udivmodsi4>:
    10d0:	a1 e2       	ldi	r26, 0x21	; 33
    10d2:	1a 2e       	mov	r1, r26
    10d4:	aa 1b       	sub	r26, r26
    10d6:	bb 1b       	sub	r27, r27
    10d8:	fd 01       	movw	r30, r26
    10da:	0d c0       	rjmp	.+26     	; 0x10f6 <__udivmodsi4_ep>

000010dc <__udivmodsi4_loop>:
    10dc:	aa 1f       	adc	r26, r26
    10de:	bb 1f       	adc	r27, r27
    10e0:	ee 1f       	adc	r30, r30
    10e2:	ff 1f       	adc	r31, r31
    10e4:	a2 17       	cp	r26, r18
    10e6:	b3 07       	cpc	r27, r19
    10e8:	e4 07       	cpc	r30, r20
    10ea:	f5 07       	cpc	r31, r21
    10ec:	20 f0       	brcs	.+8      	; 0x10f6 <__udivmodsi4_ep>
    10ee:	a2 1b       	sub	r26, r18
    10f0:	b3 0b       	sbc	r27, r19
    10f2:	e4 0b       	sbc	r30, r20
    10f4:	f5 0b       	sbc	r31, r21

000010f6 <__udivmodsi4_ep>:
    10f6:	66 1f       	adc	r22, r22
    10f8:	77 1f       	adc	r23, r23
    10fa:	88 1f       	adc	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	1a 94       	dec	r1
    1100:	69 f7       	brne	.-38     	; 0x10dc <__udivmodsi4_loop>
    1102:	60 95       	com	r22
    1104:	70 95       	com	r23
    1106:	80 95       	com	r24
    1108:	90 95       	com	r25
    110a:	9b 01       	movw	r18, r22
    110c:	ac 01       	movw	r20, r24
    110e:	bd 01       	movw	r22, r26
    1110:	cf 01       	movw	r24, r30
    1112:	08 95       	ret

00001114 <printf>:
    1114:	a0 e0       	ldi	r26, 0x00	; 0
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e0 e9       	ldi	r30, 0x90	; 144
    111a:	f8 e0       	ldi	r31, 0x08	; 8
    111c:	0c 94 26 0b 	jmp	0x164c	; 0x164c <__prologue_saves__+0x20>
    1120:	fe 01       	movw	r30, r28
    1122:	35 96       	adiw	r30, 0x05	; 5
    1124:	61 91       	ld	r22, Z+
    1126:	71 91       	ld	r23, Z+
    1128:	af 01       	movw	r20, r30
    112a:	80 91 06 02 	lds	r24, 0x0206
    112e:	90 91 07 02 	lds	r25, 0x0207
    1132:	0e 94 9e 08 	call	0x113c	; 0x113c <vfprintf>
    1136:	e2 e0       	ldi	r30, 0x02	; 2
    1138:	0c 94 42 0b 	jmp	0x1684	; 0x1684 <__epilogue_restores__+0x20>

0000113c <vfprintf>:
    113c:	ac e0       	ldi	r26, 0x0C	; 12
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	e4 ea       	ldi	r30, 0xA4	; 164
    1142:	f8 e0       	ldi	r31, 0x08	; 8
    1144:	0c 94 16 0b 	jmp	0x162c	; 0x162c <__prologue_saves__>
    1148:	7c 01       	movw	r14, r24
    114a:	6b 01       	movw	r12, r22
    114c:	8a 01       	movw	r16, r20
    114e:	fc 01       	movw	r30, r24
    1150:	17 82       	std	Z+7, r1	; 0x07
    1152:	16 82       	std	Z+6, r1	; 0x06
    1154:	83 81       	ldd	r24, Z+3	; 0x03
    1156:	81 ff       	sbrs	r24, 1
    1158:	bd c1       	rjmp	.+890    	; 0x14d4 <vfprintf+0x398>
    115a:	ce 01       	movw	r24, r28
    115c:	01 96       	adiw	r24, 0x01	; 1
    115e:	4c 01       	movw	r8, r24
    1160:	f7 01       	movw	r30, r14
    1162:	93 81       	ldd	r25, Z+3	; 0x03
    1164:	f6 01       	movw	r30, r12
    1166:	93 fd       	sbrc	r25, 3
    1168:	85 91       	lpm	r24, Z+
    116a:	93 ff       	sbrs	r25, 3
    116c:	81 91       	ld	r24, Z+
    116e:	6f 01       	movw	r12, r30
    1170:	88 23       	and	r24, r24
    1172:	09 f4       	brne	.+2      	; 0x1176 <vfprintf+0x3a>
    1174:	ab c1       	rjmp	.+854    	; 0x14cc <vfprintf+0x390>
    1176:	85 32       	cpi	r24, 0x25	; 37
    1178:	39 f4       	brne	.+14     	; 0x1188 <vfprintf+0x4c>
    117a:	93 fd       	sbrc	r25, 3
    117c:	85 91       	lpm	r24, Z+
    117e:	93 ff       	sbrs	r25, 3
    1180:	81 91       	ld	r24, Z+
    1182:	6f 01       	movw	r12, r30
    1184:	85 32       	cpi	r24, 0x25	; 37
    1186:	29 f4       	brne	.+10     	; 0x1192 <vfprintf+0x56>
    1188:	b7 01       	movw	r22, r14
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	0e 94 86 0a 	call	0x150c	; 0x150c <fputc>
    1190:	e7 cf       	rjmp	.-50     	; 0x1160 <vfprintf+0x24>
    1192:	51 2c       	mov	r5, r1
    1194:	31 2c       	mov	r3, r1
    1196:	20 e0       	ldi	r18, 0x00	; 0
    1198:	20 32       	cpi	r18, 0x20	; 32
    119a:	a0 f4       	brcc	.+40     	; 0x11c4 <vfprintf+0x88>
    119c:	8b 32       	cpi	r24, 0x2B	; 43
    119e:	69 f0       	breq	.+26     	; 0x11ba <vfprintf+0x7e>
    11a0:	30 f4       	brcc	.+12     	; 0x11ae <vfprintf+0x72>
    11a2:	80 32       	cpi	r24, 0x20	; 32
    11a4:	59 f0       	breq	.+22     	; 0x11bc <vfprintf+0x80>
    11a6:	83 32       	cpi	r24, 0x23	; 35
    11a8:	69 f4       	brne	.+26     	; 0x11c4 <vfprintf+0x88>
    11aa:	20 61       	ori	r18, 0x10	; 16
    11ac:	2c c0       	rjmp	.+88     	; 0x1206 <vfprintf+0xca>
    11ae:	8d 32       	cpi	r24, 0x2D	; 45
    11b0:	39 f0       	breq	.+14     	; 0x11c0 <vfprintf+0x84>
    11b2:	80 33       	cpi	r24, 0x30	; 48
    11b4:	39 f4       	brne	.+14     	; 0x11c4 <vfprintf+0x88>
    11b6:	21 60       	ori	r18, 0x01	; 1
    11b8:	26 c0       	rjmp	.+76     	; 0x1206 <vfprintf+0xca>
    11ba:	22 60       	ori	r18, 0x02	; 2
    11bc:	24 60       	ori	r18, 0x04	; 4
    11be:	23 c0       	rjmp	.+70     	; 0x1206 <vfprintf+0xca>
    11c0:	28 60       	ori	r18, 0x08	; 8
    11c2:	21 c0       	rjmp	.+66     	; 0x1206 <vfprintf+0xca>
    11c4:	27 fd       	sbrc	r18, 7
    11c6:	27 c0       	rjmp	.+78     	; 0x1216 <vfprintf+0xda>
    11c8:	30 ed       	ldi	r19, 0xD0	; 208
    11ca:	38 0f       	add	r19, r24
    11cc:	3a 30       	cpi	r19, 0x0A	; 10
    11ce:	78 f4       	brcc	.+30     	; 0x11ee <vfprintf+0xb2>
    11d0:	26 ff       	sbrs	r18, 6
    11d2:	06 c0       	rjmp	.+12     	; 0x11e0 <vfprintf+0xa4>
    11d4:	fa e0       	ldi	r31, 0x0A	; 10
    11d6:	5f 9e       	mul	r5, r31
    11d8:	30 0d       	add	r19, r0
    11da:	11 24       	eor	r1, r1
    11dc:	53 2e       	mov	r5, r19
    11de:	13 c0       	rjmp	.+38     	; 0x1206 <vfprintf+0xca>
    11e0:	8a e0       	ldi	r24, 0x0A	; 10
    11e2:	38 9e       	mul	r3, r24
    11e4:	30 0d       	add	r19, r0
    11e6:	11 24       	eor	r1, r1
    11e8:	33 2e       	mov	r3, r19
    11ea:	20 62       	ori	r18, 0x20	; 32
    11ec:	0c c0       	rjmp	.+24     	; 0x1206 <vfprintf+0xca>
    11ee:	8e 32       	cpi	r24, 0x2E	; 46
    11f0:	21 f4       	brne	.+8      	; 0x11fa <vfprintf+0xbe>
    11f2:	26 fd       	sbrc	r18, 6
    11f4:	6b c1       	rjmp	.+726    	; 0x14cc <vfprintf+0x390>
    11f6:	20 64       	ori	r18, 0x40	; 64
    11f8:	06 c0       	rjmp	.+12     	; 0x1206 <vfprintf+0xca>
    11fa:	8c 36       	cpi	r24, 0x6C	; 108
    11fc:	11 f4       	brne	.+4      	; 0x1202 <vfprintf+0xc6>
    11fe:	20 68       	ori	r18, 0x80	; 128
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <vfprintf+0xca>
    1202:	88 36       	cpi	r24, 0x68	; 104
    1204:	41 f4       	brne	.+16     	; 0x1216 <vfprintf+0xda>
    1206:	f6 01       	movw	r30, r12
    1208:	93 fd       	sbrc	r25, 3
    120a:	85 91       	lpm	r24, Z+
    120c:	93 ff       	sbrs	r25, 3
    120e:	81 91       	ld	r24, Z+
    1210:	6f 01       	movw	r12, r30
    1212:	81 11       	cpse	r24, r1
    1214:	c1 cf       	rjmp	.-126    	; 0x1198 <vfprintf+0x5c>
    1216:	98 2f       	mov	r25, r24
    1218:	9f 7d       	andi	r25, 0xDF	; 223
    121a:	95 54       	subi	r25, 0x45	; 69
    121c:	93 30       	cpi	r25, 0x03	; 3
    121e:	28 f4       	brcc	.+10     	; 0x122a <vfprintf+0xee>
    1220:	0c 5f       	subi	r16, 0xFC	; 252
    1222:	1f 4f       	sbci	r17, 0xFF	; 255
    1224:	ff e3       	ldi	r31, 0x3F	; 63
    1226:	f9 83       	std	Y+1, r31	; 0x01
    1228:	0d c0       	rjmp	.+26     	; 0x1244 <vfprintf+0x108>
    122a:	83 36       	cpi	r24, 0x63	; 99
    122c:	31 f0       	breq	.+12     	; 0x123a <vfprintf+0xfe>
    122e:	83 37       	cpi	r24, 0x73	; 115
    1230:	71 f0       	breq	.+28     	; 0x124e <vfprintf+0x112>
    1232:	83 35       	cpi	r24, 0x53	; 83
    1234:	09 f0       	breq	.+2      	; 0x1238 <vfprintf+0xfc>
    1236:	5b c0       	rjmp	.+182    	; 0x12ee <vfprintf+0x1b2>
    1238:	22 c0       	rjmp	.+68     	; 0x127e <vfprintf+0x142>
    123a:	f8 01       	movw	r30, r16
    123c:	80 81       	ld	r24, Z
    123e:	89 83       	std	Y+1, r24	; 0x01
    1240:	0e 5f       	subi	r16, 0xFE	; 254
    1242:	1f 4f       	sbci	r17, 0xFF	; 255
    1244:	44 24       	eor	r4, r4
    1246:	43 94       	inc	r4
    1248:	51 2c       	mov	r5, r1
    124a:	54 01       	movw	r10, r8
    124c:	15 c0       	rjmp	.+42     	; 0x1278 <vfprintf+0x13c>
    124e:	38 01       	movw	r6, r16
    1250:	f2 e0       	ldi	r31, 0x02	; 2
    1252:	6f 0e       	add	r6, r31
    1254:	71 1c       	adc	r7, r1
    1256:	f8 01       	movw	r30, r16
    1258:	a0 80       	ld	r10, Z
    125a:	b1 80       	ldd	r11, Z+1	; 0x01
    125c:	26 ff       	sbrs	r18, 6
    125e:	03 c0       	rjmp	.+6      	; 0x1266 <vfprintf+0x12a>
    1260:	65 2d       	mov	r22, r5
    1262:	70 e0       	ldi	r23, 0x00	; 0
    1264:	02 c0       	rjmp	.+4      	; 0x126a <vfprintf+0x12e>
    1266:	6f ef       	ldi	r22, 0xFF	; 255
    1268:	7f ef       	ldi	r23, 0xFF	; 255
    126a:	c5 01       	movw	r24, r10
    126c:	2c 87       	std	Y+12, r18	; 0x0c
    126e:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <strnlen>
    1272:	2c 01       	movw	r4, r24
    1274:	83 01       	movw	r16, r6
    1276:	2c 85       	ldd	r18, Y+12	; 0x0c
    1278:	2f 77       	andi	r18, 0x7F	; 127
    127a:	22 2e       	mov	r2, r18
    127c:	17 c0       	rjmp	.+46     	; 0x12ac <vfprintf+0x170>
    127e:	38 01       	movw	r6, r16
    1280:	f2 e0       	ldi	r31, 0x02	; 2
    1282:	6f 0e       	add	r6, r31
    1284:	71 1c       	adc	r7, r1
    1286:	f8 01       	movw	r30, r16
    1288:	a0 80       	ld	r10, Z
    128a:	b1 80       	ldd	r11, Z+1	; 0x01
    128c:	26 ff       	sbrs	r18, 6
    128e:	03 c0       	rjmp	.+6      	; 0x1296 <vfprintf+0x15a>
    1290:	65 2d       	mov	r22, r5
    1292:	70 e0       	ldi	r23, 0x00	; 0
    1294:	02 c0       	rjmp	.+4      	; 0x129a <vfprintf+0x15e>
    1296:	6f ef       	ldi	r22, 0xFF	; 255
    1298:	7f ef       	ldi	r23, 0xFF	; 255
    129a:	c5 01       	movw	r24, r10
    129c:	2c 87       	std	Y+12, r18	; 0x0c
    129e:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <strnlen_P>
    12a2:	2c 01       	movw	r4, r24
    12a4:	2c 85       	ldd	r18, Y+12	; 0x0c
    12a6:	20 68       	ori	r18, 0x80	; 128
    12a8:	22 2e       	mov	r2, r18
    12aa:	83 01       	movw	r16, r6
    12ac:	23 fc       	sbrc	r2, 3
    12ae:	1b c0       	rjmp	.+54     	; 0x12e6 <vfprintf+0x1aa>
    12b0:	83 2d       	mov	r24, r3
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	48 16       	cp	r4, r24
    12b6:	59 06       	cpc	r5, r25
    12b8:	b0 f4       	brcc	.+44     	; 0x12e6 <vfprintf+0x1aa>
    12ba:	b7 01       	movw	r22, r14
    12bc:	80 e2       	ldi	r24, 0x20	; 32
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	0e 94 86 0a 	call	0x150c	; 0x150c <fputc>
    12c4:	3a 94       	dec	r3
    12c6:	f4 cf       	rjmp	.-24     	; 0x12b0 <vfprintf+0x174>
    12c8:	f5 01       	movw	r30, r10
    12ca:	27 fc       	sbrc	r2, 7
    12cc:	85 91       	lpm	r24, Z+
    12ce:	27 fe       	sbrs	r2, 7
    12d0:	81 91       	ld	r24, Z+
    12d2:	5f 01       	movw	r10, r30
    12d4:	b7 01       	movw	r22, r14
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	0e 94 86 0a 	call	0x150c	; 0x150c <fputc>
    12dc:	31 10       	cpse	r3, r1
    12de:	3a 94       	dec	r3
    12e0:	f1 e0       	ldi	r31, 0x01	; 1
    12e2:	4f 1a       	sub	r4, r31
    12e4:	51 08       	sbc	r5, r1
    12e6:	41 14       	cp	r4, r1
    12e8:	51 04       	cpc	r5, r1
    12ea:	71 f7       	brne	.-36     	; 0x12c8 <vfprintf+0x18c>
    12ec:	e5 c0       	rjmp	.+458    	; 0x14b8 <vfprintf+0x37c>
    12ee:	84 36       	cpi	r24, 0x64	; 100
    12f0:	11 f0       	breq	.+4      	; 0x12f6 <vfprintf+0x1ba>
    12f2:	89 36       	cpi	r24, 0x69	; 105
    12f4:	39 f5       	brne	.+78     	; 0x1344 <vfprintf+0x208>
    12f6:	f8 01       	movw	r30, r16
    12f8:	27 ff       	sbrs	r18, 7
    12fa:	07 c0       	rjmp	.+14     	; 0x130a <vfprintf+0x1ce>
    12fc:	60 81       	ld	r22, Z
    12fe:	71 81       	ldd	r23, Z+1	; 0x01
    1300:	82 81       	ldd	r24, Z+2	; 0x02
    1302:	93 81       	ldd	r25, Z+3	; 0x03
    1304:	0c 5f       	subi	r16, 0xFC	; 252
    1306:	1f 4f       	sbci	r17, 0xFF	; 255
    1308:	08 c0       	rjmp	.+16     	; 0x131a <vfprintf+0x1de>
    130a:	60 81       	ld	r22, Z
    130c:	71 81       	ldd	r23, Z+1	; 0x01
    130e:	88 27       	eor	r24, r24
    1310:	77 fd       	sbrc	r23, 7
    1312:	80 95       	com	r24
    1314:	98 2f       	mov	r25, r24
    1316:	0e 5f       	subi	r16, 0xFE	; 254
    1318:	1f 4f       	sbci	r17, 0xFF	; 255
    131a:	2f 76       	andi	r18, 0x6F	; 111
    131c:	b2 2e       	mov	r11, r18
    131e:	97 ff       	sbrs	r25, 7
    1320:	09 c0       	rjmp	.+18     	; 0x1334 <vfprintf+0x1f8>
    1322:	90 95       	com	r25
    1324:	80 95       	com	r24
    1326:	70 95       	com	r23
    1328:	61 95       	neg	r22
    132a:	7f 4f       	sbci	r23, 0xFF	; 255
    132c:	8f 4f       	sbci	r24, 0xFF	; 255
    132e:	9f 4f       	sbci	r25, 0xFF	; 255
    1330:	20 68       	ori	r18, 0x80	; 128
    1332:	b2 2e       	mov	r11, r18
    1334:	2a e0       	ldi	r18, 0x0A	; 10
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	a4 01       	movw	r20, r8
    133a:	0e 94 b8 0a 	call	0x1570	; 0x1570 <__ultoa_invert>
    133e:	a8 2e       	mov	r10, r24
    1340:	a8 18       	sub	r10, r8
    1342:	44 c0       	rjmp	.+136    	; 0x13cc <vfprintf+0x290>
    1344:	85 37       	cpi	r24, 0x75	; 117
    1346:	29 f4       	brne	.+10     	; 0x1352 <vfprintf+0x216>
    1348:	2f 7e       	andi	r18, 0xEF	; 239
    134a:	b2 2e       	mov	r11, r18
    134c:	2a e0       	ldi	r18, 0x0A	; 10
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	25 c0       	rjmp	.+74     	; 0x139c <vfprintf+0x260>
    1352:	f2 2f       	mov	r31, r18
    1354:	f9 7f       	andi	r31, 0xF9	; 249
    1356:	bf 2e       	mov	r11, r31
    1358:	8f 36       	cpi	r24, 0x6F	; 111
    135a:	c1 f0       	breq	.+48     	; 0x138c <vfprintf+0x250>
    135c:	18 f4       	brcc	.+6      	; 0x1364 <vfprintf+0x228>
    135e:	88 35       	cpi	r24, 0x58	; 88
    1360:	79 f0       	breq	.+30     	; 0x1380 <vfprintf+0x244>
    1362:	b4 c0       	rjmp	.+360    	; 0x14cc <vfprintf+0x390>
    1364:	80 37       	cpi	r24, 0x70	; 112
    1366:	19 f0       	breq	.+6      	; 0x136e <vfprintf+0x232>
    1368:	88 37       	cpi	r24, 0x78	; 120
    136a:	21 f0       	breq	.+8      	; 0x1374 <vfprintf+0x238>
    136c:	af c0       	rjmp	.+350    	; 0x14cc <vfprintf+0x390>
    136e:	2f 2f       	mov	r18, r31
    1370:	20 61       	ori	r18, 0x10	; 16
    1372:	b2 2e       	mov	r11, r18
    1374:	b4 fe       	sbrs	r11, 4
    1376:	0d c0       	rjmp	.+26     	; 0x1392 <vfprintf+0x256>
    1378:	8b 2d       	mov	r24, r11
    137a:	84 60       	ori	r24, 0x04	; 4
    137c:	b8 2e       	mov	r11, r24
    137e:	09 c0       	rjmp	.+18     	; 0x1392 <vfprintf+0x256>
    1380:	24 ff       	sbrs	r18, 4
    1382:	0a c0       	rjmp	.+20     	; 0x1398 <vfprintf+0x25c>
    1384:	9f 2f       	mov	r25, r31
    1386:	96 60       	ori	r25, 0x06	; 6
    1388:	b9 2e       	mov	r11, r25
    138a:	06 c0       	rjmp	.+12     	; 0x1398 <vfprintf+0x25c>
    138c:	28 e0       	ldi	r18, 0x08	; 8
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	05 c0       	rjmp	.+10     	; 0x139c <vfprintf+0x260>
    1392:	20 e1       	ldi	r18, 0x10	; 16
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	02 c0       	rjmp	.+4      	; 0x139c <vfprintf+0x260>
    1398:	20 e1       	ldi	r18, 0x10	; 16
    139a:	32 e0       	ldi	r19, 0x02	; 2
    139c:	f8 01       	movw	r30, r16
    139e:	b7 fe       	sbrs	r11, 7
    13a0:	07 c0       	rjmp	.+14     	; 0x13b0 <vfprintf+0x274>
    13a2:	60 81       	ld	r22, Z
    13a4:	71 81       	ldd	r23, Z+1	; 0x01
    13a6:	82 81       	ldd	r24, Z+2	; 0x02
    13a8:	93 81       	ldd	r25, Z+3	; 0x03
    13aa:	0c 5f       	subi	r16, 0xFC	; 252
    13ac:	1f 4f       	sbci	r17, 0xFF	; 255
    13ae:	06 c0       	rjmp	.+12     	; 0x13bc <vfprintf+0x280>
    13b0:	60 81       	ld	r22, Z
    13b2:	71 81       	ldd	r23, Z+1	; 0x01
    13b4:	80 e0       	ldi	r24, 0x00	; 0
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	0e 5f       	subi	r16, 0xFE	; 254
    13ba:	1f 4f       	sbci	r17, 0xFF	; 255
    13bc:	a4 01       	movw	r20, r8
    13be:	0e 94 b8 0a 	call	0x1570	; 0x1570 <__ultoa_invert>
    13c2:	a8 2e       	mov	r10, r24
    13c4:	a8 18       	sub	r10, r8
    13c6:	fb 2d       	mov	r31, r11
    13c8:	ff 77       	andi	r31, 0x7F	; 127
    13ca:	bf 2e       	mov	r11, r31
    13cc:	b6 fe       	sbrs	r11, 6
    13ce:	0b c0       	rjmp	.+22     	; 0x13e6 <vfprintf+0x2aa>
    13d0:	2b 2d       	mov	r18, r11
    13d2:	2e 7f       	andi	r18, 0xFE	; 254
    13d4:	a5 14       	cp	r10, r5
    13d6:	50 f4       	brcc	.+20     	; 0x13ec <vfprintf+0x2b0>
    13d8:	b4 fe       	sbrs	r11, 4
    13da:	0a c0       	rjmp	.+20     	; 0x13f0 <vfprintf+0x2b4>
    13dc:	b2 fc       	sbrc	r11, 2
    13de:	08 c0       	rjmp	.+16     	; 0x13f0 <vfprintf+0x2b4>
    13e0:	2b 2d       	mov	r18, r11
    13e2:	2e 7e       	andi	r18, 0xEE	; 238
    13e4:	05 c0       	rjmp	.+10     	; 0x13f0 <vfprintf+0x2b4>
    13e6:	7a 2c       	mov	r7, r10
    13e8:	2b 2d       	mov	r18, r11
    13ea:	03 c0       	rjmp	.+6      	; 0x13f2 <vfprintf+0x2b6>
    13ec:	7a 2c       	mov	r7, r10
    13ee:	01 c0       	rjmp	.+2      	; 0x13f2 <vfprintf+0x2b6>
    13f0:	75 2c       	mov	r7, r5
    13f2:	24 ff       	sbrs	r18, 4
    13f4:	0d c0       	rjmp	.+26     	; 0x1410 <vfprintf+0x2d4>
    13f6:	fe 01       	movw	r30, r28
    13f8:	ea 0d       	add	r30, r10
    13fa:	f1 1d       	adc	r31, r1
    13fc:	80 81       	ld	r24, Z
    13fe:	80 33       	cpi	r24, 0x30	; 48
    1400:	11 f4       	brne	.+4      	; 0x1406 <vfprintf+0x2ca>
    1402:	29 7e       	andi	r18, 0xE9	; 233
    1404:	09 c0       	rjmp	.+18     	; 0x1418 <vfprintf+0x2dc>
    1406:	22 ff       	sbrs	r18, 2
    1408:	06 c0       	rjmp	.+12     	; 0x1416 <vfprintf+0x2da>
    140a:	73 94       	inc	r7
    140c:	73 94       	inc	r7
    140e:	04 c0       	rjmp	.+8      	; 0x1418 <vfprintf+0x2dc>
    1410:	82 2f       	mov	r24, r18
    1412:	86 78       	andi	r24, 0x86	; 134
    1414:	09 f0       	breq	.+2      	; 0x1418 <vfprintf+0x2dc>
    1416:	73 94       	inc	r7
    1418:	23 fd       	sbrc	r18, 3
    141a:	13 c0       	rjmp	.+38     	; 0x1442 <vfprintf+0x306>
    141c:	20 ff       	sbrs	r18, 0
    141e:	06 c0       	rjmp	.+12     	; 0x142c <vfprintf+0x2f0>
    1420:	5a 2c       	mov	r5, r10
    1422:	73 14       	cp	r7, r3
    1424:	18 f4       	brcc	.+6      	; 0x142c <vfprintf+0x2f0>
    1426:	53 0c       	add	r5, r3
    1428:	57 18       	sub	r5, r7
    142a:	73 2c       	mov	r7, r3
    142c:	73 14       	cp	r7, r3
    142e:	68 f4       	brcc	.+26     	; 0x144a <vfprintf+0x30e>
    1430:	b7 01       	movw	r22, r14
    1432:	80 e2       	ldi	r24, 0x20	; 32
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	2c 87       	std	Y+12, r18	; 0x0c
    1438:	0e 94 86 0a 	call	0x150c	; 0x150c <fputc>
    143c:	73 94       	inc	r7
    143e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1440:	f5 cf       	rjmp	.-22     	; 0x142c <vfprintf+0x2f0>
    1442:	73 14       	cp	r7, r3
    1444:	10 f4       	brcc	.+4      	; 0x144a <vfprintf+0x30e>
    1446:	37 18       	sub	r3, r7
    1448:	01 c0       	rjmp	.+2      	; 0x144c <vfprintf+0x310>
    144a:	31 2c       	mov	r3, r1
    144c:	24 ff       	sbrs	r18, 4
    144e:	12 c0       	rjmp	.+36     	; 0x1474 <vfprintf+0x338>
    1450:	b7 01       	movw	r22, r14
    1452:	80 e3       	ldi	r24, 0x30	; 48
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	2c 87       	std	Y+12, r18	; 0x0c
    1458:	0e 94 86 0a 	call	0x150c	; 0x150c <fputc>
    145c:	2c 85       	ldd	r18, Y+12	; 0x0c
    145e:	22 ff       	sbrs	r18, 2
    1460:	17 c0       	rjmp	.+46     	; 0x1490 <vfprintf+0x354>
    1462:	21 ff       	sbrs	r18, 1
    1464:	03 c0       	rjmp	.+6      	; 0x146c <vfprintf+0x330>
    1466:	88 e5       	ldi	r24, 0x58	; 88
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <vfprintf+0x334>
    146c:	88 e7       	ldi	r24, 0x78	; 120
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	b7 01       	movw	r22, r14
    1472:	0c c0       	rjmp	.+24     	; 0x148c <vfprintf+0x350>
    1474:	82 2f       	mov	r24, r18
    1476:	86 78       	andi	r24, 0x86	; 134
    1478:	59 f0       	breq	.+22     	; 0x1490 <vfprintf+0x354>
    147a:	21 fd       	sbrc	r18, 1
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <vfprintf+0x346>
    147e:	80 e2       	ldi	r24, 0x20	; 32
    1480:	01 c0       	rjmp	.+2      	; 0x1484 <vfprintf+0x348>
    1482:	8b e2       	ldi	r24, 0x2B	; 43
    1484:	27 fd       	sbrc	r18, 7
    1486:	8d e2       	ldi	r24, 0x2D	; 45
    1488:	b7 01       	movw	r22, r14
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	0e 94 86 0a 	call	0x150c	; 0x150c <fputc>
    1490:	a5 14       	cp	r10, r5
    1492:	38 f4       	brcc	.+14     	; 0x14a2 <vfprintf+0x366>
    1494:	b7 01       	movw	r22, r14
    1496:	80 e3       	ldi	r24, 0x30	; 48
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	0e 94 86 0a 	call	0x150c	; 0x150c <fputc>
    149e:	5a 94       	dec	r5
    14a0:	f7 cf       	rjmp	.-18     	; 0x1490 <vfprintf+0x354>
    14a2:	aa 94       	dec	r10
    14a4:	f4 01       	movw	r30, r8
    14a6:	ea 0d       	add	r30, r10
    14a8:	f1 1d       	adc	r31, r1
    14aa:	80 81       	ld	r24, Z
    14ac:	b7 01       	movw	r22, r14
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	0e 94 86 0a 	call	0x150c	; 0x150c <fputc>
    14b4:	a1 10       	cpse	r10, r1
    14b6:	f5 cf       	rjmp	.-22     	; 0x14a2 <vfprintf+0x366>
    14b8:	33 20       	and	r3, r3
    14ba:	09 f4       	brne	.+2      	; 0x14be <vfprintf+0x382>
    14bc:	51 ce       	rjmp	.-862    	; 0x1160 <vfprintf+0x24>
    14be:	b7 01       	movw	r22, r14
    14c0:	80 e2       	ldi	r24, 0x20	; 32
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	0e 94 86 0a 	call	0x150c	; 0x150c <fputc>
    14c8:	3a 94       	dec	r3
    14ca:	f6 cf       	rjmp	.-20     	; 0x14b8 <vfprintf+0x37c>
    14cc:	f7 01       	movw	r30, r14
    14ce:	86 81       	ldd	r24, Z+6	; 0x06
    14d0:	97 81       	ldd	r25, Z+7	; 0x07
    14d2:	02 c0       	rjmp	.+4      	; 0x14d8 <vfprintf+0x39c>
    14d4:	8f ef       	ldi	r24, 0xFF	; 255
    14d6:	9f ef       	ldi	r25, 0xFF	; 255
    14d8:	2c 96       	adiw	r28, 0x0c	; 12
    14da:	e2 e1       	ldi	r30, 0x12	; 18
    14dc:	0c 94 32 0b 	jmp	0x1664	; 0x1664 <__epilogue_restores__>

000014e0 <strnlen_P>:
    14e0:	fc 01       	movw	r30, r24
    14e2:	05 90       	lpm	r0, Z+
    14e4:	61 50       	subi	r22, 0x01	; 1
    14e6:	70 40       	sbci	r23, 0x00	; 0
    14e8:	01 10       	cpse	r0, r1
    14ea:	d8 f7       	brcc	.-10     	; 0x14e2 <strnlen_P+0x2>
    14ec:	80 95       	com	r24
    14ee:	90 95       	com	r25
    14f0:	8e 0f       	add	r24, r30
    14f2:	9f 1f       	adc	r25, r31
    14f4:	08 95       	ret

000014f6 <strnlen>:
    14f6:	fc 01       	movw	r30, r24
    14f8:	61 50       	subi	r22, 0x01	; 1
    14fa:	70 40       	sbci	r23, 0x00	; 0
    14fc:	01 90       	ld	r0, Z+
    14fe:	01 10       	cpse	r0, r1
    1500:	d8 f7       	brcc	.-10     	; 0x14f8 <strnlen+0x2>
    1502:	80 95       	com	r24
    1504:	90 95       	com	r25
    1506:	8e 0f       	add	r24, r30
    1508:	9f 1f       	adc	r25, r31
    150a:	08 95       	ret

0000150c <fputc>:
    150c:	0f 93       	push	r16
    150e:	1f 93       	push	r17
    1510:	cf 93       	push	r28
    1512:	df 93       	push	r29
    1514:	18 2f       	mov	r17, r24
    1516:	09 2f       	mov	r16, r25
    1518:	eb 01       	movw	r28, r22
    151a:	8b 81       	ldd	r24, Y+3	; 0x03
    151c:	81 fd       	sbrc	r24, 1
    151e:	03 c0       	rjmp	.+6      	; 0x1526 <fputc+0x1a>
    1520:	8f ef       	ldi	r24, 0xFF	; 255
    1522:	9f ef       	ldi	r25, 0xFF	; 255
    1524:	20 c0       	rjmp	.+64     	; 0x1566 <fputc+0x5a>
    1526:	82 ff       	sbrs	r24, 2
    1528:	10 c0       	rjmp	.+32     	; 0x154a <fputc+0x3e>
    152a:	4e 81       	ldd	r20, Y+6	; 0x06
    152c:	5f 81       	ldd	r21, Y+7	; 0x07
    152e:	2c 81       	ldd	r18, Y+4	; 0x04
    1530:	3d 81       	ldd	r19, Y+5	; 0x05
    1532:	42 17       	cp	r20, r18
    1534:	53 07       	cpc	r21, r19
    1536:	7c f4       	brge	.+30     	; 0x1556 <fputc+0x4a>
    1538:	e8 81       	ld	r30, Y
    153a:	f9 81       	ldd	r31, Y+1	; 0x01
    153c:	9f 01       	movw	r18, r30
    153e:	2f 5f       	subi	r18, 0xFF	; 255
    1540:	3f 4f       	sbci	r19, 0xFF	; 255
    1542:	39 83       	std	Y+1, r19	; 0x01
    1544:	28 83       	st	Y, r18
    1546:	10 83       	st	Z, r17
    1548:	06 c0       	rjmp	.+12     	; 0x1556 <fputc+0x4a>
    154a:	e8 85       	ldd	r30, Y+8	; 0x08
    154c:	f9 85       	ldd	r31, Y+9	; 0x09
    154e:	81 2f       	mov	r24, r17
    1550:	09 95       	icall
    1552:	89 2b       	or	r24, r25
    1554:	29 f7       	brne	.-54     	; 0x1520 <fputc+0x14>
    1556:	2e 81       	ldd	r18, Y+6	; 0x06
    1558:	3f 81       	ldd	r19, Y+7	; 0x07
    155a:	2f 5f       	subi	r18, 0xFF	; 255
    155c:	3f 4f       	sbci	r19, 0xFF	; 255
    155e:	3f 83       	std	Y+7, r19	; 0x07
    1560:	2e 83       	std	Y+6, r18	; 0x06
    1562:	81 2f       	mov	r24, r17
    1564:	90 2f       	mov	r25, r16
    1566:	df 91       	pop	r29
    1568:	cf 91       	pop	r28
    156a:	1f 91       	pop	r17
    156c:	0f 91       	pop	r16
    156e:	08 95       	ret

00001570 <__ultoa_invert>:
    1570:	fa 01       	movw	r30, r20
    1572:	aa 27       	eor	r26, r26
    1574:	28 30       	cpi	r18, 0x08	; 8
    1576:	51 f1       	breq	.+84     	; 0x15cc <__ultoa_invert+0x5c>
    1578:	20 31       	cpi	r18, 0x10	; 16
    157a:	81 f1       	breq	.+96     	; 0x15dc <__ultoa_invert+0x6c>
    157c:	e8 94       	clt
    157e:	6f 93       	push	r22
    1580:	6e 7f       	andi	r22, 0xFE	; 254
    1582:	6e 5f       	subi	r22, 0xFE	; 254
    1584:	7f 4f       	sbci	r23, 0xFF	; 255
    1586:	8f 4f       	sbci	r24, 0xFF	; 255
    1588:	9f 4f       	sbci	r25, 0xFF	; 255
    158a:	af 4f       	sbci	r26, 0xFF	; 255
    158c:	b1 e0       	ldi	r27, 0x01	; 1
    158e:	3e d0       	rcall	.+124    	; 0x160c <__ultoa_invert+0x9c>
    1590:	b4 e0       	ldi	r27, 0x04	; 4
    1592:	3c d0       	rcall	.+120    	; 0x160c <__ultoa_invert+0x9c>
    1594:	67 0f       	add	r22, r23
    1596:	78 1f       	adc	r23, r24
    1598:	89 1f       	adc	r24, r25
    159a:	9a 1f       	adc	r25, r26
    159c:	a1 1d       	adc	r26, r1
    159e:	68 0f       	add	r22, r24
    15a0:	79 1f       	adc	r23, r25
    15a2:	8a 1f       	adc	r24, r26
    15a4:	91 1d       	adc	r25, r1
    15a6:	a1 1d       	adc	r26, r1
    15a8:	6a 0f       	add	r22, r26
    15aa:	71 1d       	adc	r23, r1
    15ac:	81 1d       	adc	r24, r1
    15ae:	91 1d       	adc	r25, r1
    15b0:	a1 1d       	adc	r26, r1
    15b2:	20 d0       	rcall	.+64     	; 0x15f4 <__ultoa_invert+0x84>
    15b4:	09 f4       	brne	.+2      	; 0x15b8 <__ultoa_invert+0x48>
    15b6:	68 94       	set
    15b8:	3f 91       	pop	r19
    15ba:	2a e0       	ldi	r18, 0x0A	; 10
    15bc:	26 9f       	mul	r18, r22
    15be:	11 24       	eor	r1, r1
    15c0:	30 19       	sub	r19, r0
    15c2:	30 5d       	subi	r19, 0xD0	; 208
    15c4:	31 93       	st	Z+, r19
    15c6:	de f6       	brtc	.-74     	; 0x157e <__ultoa_invert+0xe>
    15c8:	cf 01       	movw	r24, r30
    15ca:	08 95       	ret
    15cc:	46 2f       	mov	r20, r22
    15ce:	47 70       	andi	r20, 0x07	; 7
    15d0:	40 5d       	subi	r20, 0xD0	; 208
    15d2:	41 93       	st	Z+, r20
    15d4:	b3 e0       	ldi	r27, 0x03	; 3
    15d6:	0f d0       	rcall	.+30     	; 0x15f6 <__ultoa_invert+0x86>
    15d8:	c9 f7       	brne	.-14     	; 0x15cc <__ultoa_invert+0x5c>
    15da:	f6 cf       	rjmp	.-20     	; 0x15c8 <__ultoa_invert+0x58>
    15dc:	46 2f       	mov	r20, r22
    15de:	4f 70       	andi	r20, 0x0F	; 15
    15e0:	40 5d       	subi	r20, 0xD0	; 208
    15e2:	4a 33       	cpi	r20, 0x3A	; 58
    15e4:	18 f0       	brcs	.+6      	; 0x15ec <__ultoa_invert+0x7c>
    15e6:	49 5d       	subi	r20, 0xD9	; 217
    15e8:	31 fd       	sbrc	r19, 1
    15ea:	40 52       	subi	r20, 0x20	; 32
    15ec:	41 93       	st	Z+, r20
    15ee:	02 d0       	rcall	.+4      	; 0x15f4 <__ultoa_invert+0x84>
    15f0:	a9 f7       	brne	.-22     	; 0x15dc <__ultoa_invert+0x6c>
    15f2:	ea cf       	rjmp	.-44     	; 0x15c8 <__ultoa_invert+0x58>
    15f4:	b4 e0       	ldi	r27, 0x04	; 4
    15f6:	a6 95       	lsr	r26
    15f8:	97 95       	ror	r25
    15fa:	87 95       	ror	r24
    15fc:	77 95       	ror	r23
    15fe:	67 95       	ror	r22
    1600:	ba 95       	dec	r27
    1602:	c9 f7       	brne	.-14     	; 0x15f6 <__ultoa_invert+0x86>
    1604:	00 97       	sbiw	r24, 0x00	; 0
    1606:	61 05       	cpc	r22, r1
    1608:	71 05       	cpc	r23, r1
    160a:	08 95       	ret
    160c:	9b 01       	movw	r18, r22
    160e:	ac 01       	movw	r20, r24
    1610:	0a 2e       	mov	r0, r26
    1612:	06 94       	lsr	r0
    1614:	57 95       	ror	r21
    1616:	47 95       	ror	r20
    1618:	37 95       	ror	r19
    161a:	27 95       	ror	r18
    161c:	ba 95       	dec	r27
    161e:	c9 f7       	brne	.-14     	; 0x1612 <__ultoa_invert+0xa2>
    1620:	62 0f       	add	r22, r18
    1622:	73 1f       	adc	r23, r19
    1624:	84 1f       	adc	r24, r20
    1626:	95 1f       	adc	r25, r21
    1628:	a0 1d       	adc	r26, r0
    162a:	08 95       	ret

0000162c <__prologue_saves__>:
    162c:	2f 92       	push	r2
    162e:	3f 92       	push	r3
    1630:	4f 92       	push	r4
    1632:	5f 92       	push	r5
    1634:	6f 92       	push	r6
    1636:	7f 92       	push	r7
    1638:	8f 92       	push	r8
    163a:	9f 92       	push	r9
    163c:	af 92       	push	r10
    163e:	bf 92       	push	r11
    1640:	cf 92       	push	r12
    1642:	df 92       	push	r13
    1644:	ef 92       	push	r14
    1646:	ff 92       	push	r15
    1648:	0f 93       	push	r16
    164a:	1f 93       	push	r17
    164c:	cf 93       	push	r28
    164e:	df 93       	push	r29
    1650:	cd b7       	in	r28, 0x3d	; 61
    1652:	de b7       	in	r29, 0x3e	; 62
    1654:	ca 1b       	sub	r28, r26
    1656:	db 0b       	sbc	r29, r27
    1658:	0f b6       	in	r0, 0x3f	; 63
    165a:	f8 94       	cli
    165c:	de bf       	out	0x3e, r29	; 62
    165e:	0f be       	out	0x3f, r0	; 63
    1660:	cd bf       	out	0x3d, r28	; 61
    1662:	09 94       	ijmp

00001664 <__epilogue_restores__>:
    1664:	2a 88       	ldd	r2, Y+18	; 0x12
    1666:	39 88       	ldd	r3, Y+17	; 0x11
    1668:	48 88       	ldd	r4, Y+16	; 0x10
    166a:	5f 84       	ldd	r5, Y+15	; 0x0f
    166c:	6e 84       	ldd	r6, Y+14	; 0x0e
    166e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1670:	8c 84       	ldd	r8, Y+12	; 0x0c
    1672:	9b 84       	ldd	r9, Y+11	; 0x0b
    1674:	aa 84       	ldd	r10, Y+10	; 0x0a
    1676:	b9 84       	ldd	r11, Y+9	; 0x09
    1678:	c8 84       	ldd	r12, Y+8	; 0x08
    167a:	df 80       	ldd	r13, Y+7	; 0x07
    167c:	ee 80       	ldd	r14, Y+6	; 0x06
    167e:	fd 80       	ldd	r15, Y+5	; 0x05
    1680:	0c 81       	ldd	r16, Y+4	; 0x04
    1682:	1b 81       	ldd	r17, Y+3	; 0x03
    1684:	aa 81       	ldd	r26, Y+2	; 0x02
    1686:	b9 81       	ldd	r27, Y+1	; 0x01
    1688:	ce 0f       	add	r28, r30
    168a:	d1 1d       	adc	r29, r1
    168c:	0f b6       	in	r0, 0x3f	; 63
    168e:	f8 94       	cli
    1690:	de bf       	out	0x3e, r29	; 62
    1692:	0f be       	out	0x3f, r0	; 63
    1694:	cd bf       	out	0x3d, r28	; 61
    1696:	ed 01       	movw	r28, r26
    1698:	08 95       	ret

0000169a <_exit>:
    169a:	f8 94       	cli

0000169c <__stop_program>:
    169c:	ff cf       	rjmp	.-2      	; 0x169c <__stop_program>
