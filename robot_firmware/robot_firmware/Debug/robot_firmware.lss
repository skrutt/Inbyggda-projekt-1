
robot_firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00001562  000015f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001562  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e8  00800122  00800122  00001618  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001618  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000128  00000000  00000000  00001674  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012cb  00000000  00000000  0000179c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000085e  00000000  00000000  00002a67  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000687  00000000  00000000  000032c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000330  00000000  00000000  0000394c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000056e  00000000  00000000  00003c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e15  00000000  00000000  000041ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000100  00000000  00000000  00004fff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
       4:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
       8:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
       c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      10:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      14:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      18:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      1c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      20:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      24:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      28:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      2c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      30:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      34:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      38:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      3c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      40:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      44:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      48:	0c 94 d7 03 	jmp	0x7ae	; 0x7ae <__vector_18>
      4c:	0c 94 99 03 	jmp	0x732	; 0x732 <__vector_19>
      50:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      54:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      58:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      5c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      60:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      64:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <send_string+0x44>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__ctors_end>:
      ea:	11 24       	eor	r1, r1
      ec:	1f be       	out	0x3f, r1	; 63
      ee:	cf ef       	ldi	r28, 0xFF	; 255
      f0:	d8 e0       	ldi	r29, 0x08	; 8
      f2:	de bf       	out	0x3e, r29	; 62
      f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_copy_data>:
      f6:	11 e0       	ldi	r17, 0x01	; 1
      f8:	a0 e0       	ldi	r26, 0x00	; 0
      fa:	b1 e0       	ldi	r27, 0x01	; 1
      fc:	e2 e6       	ldi	r30, 0x62	; 98
      fe:	f5 e1       	ldi	r31, 0x15	; 21
     100:	02 c0       	rjmp	.+4      	; 0x106 <__do_copy_data+0x10>
     102:	05 90       	lpm	r0, Z+
     104:	0d 92       	st	X+, r0
     106:	a2 32       	cpi	r26, 0x22	; 34
     108:	b1 07       	cpc	r27, r17
     10a:	d9 f7       	brne	.-10     	; 0x102 <__do_copy_data+0xc>

0000010c <__do_clear_bss>:
     10c:	22 e0       	ldi	r18, 0x02	; 2
     10e:	a2 e2       	ldi	r26, 0x22	; 34
     110:	b1 e0       	ldi	r27, 0x01	; 1
     112:	01 c0       	rjmp	.+2      	; 0x116 <.do_clear_bss_start>

00000114 <.do_clear_bss_loop>:
     114:	1d 92       	st	X+, r1

00000116 <.do_clear_bss_start>:
     116:	aa 30       	cpi	r26, 0x0A	; 10
     118:	b2 07       	cpc	r27, r18
     11a:	e1 f7       	brne	.-8      	; 0x114 <.do_clear_bss_loop>
     11c:	0e 94 9e 01 	call	0x33c	; 0x33c <main>
     120:	0c 94 af 0a 	jmp	0x155e	; 0x155e <_exit>

00000124 <__bad_interrupt>:
     124:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000128 <motor_pwm_init>:
	
	motor_set_direction(motor, 1);
}

void motor_pwm_init() {
	DDRD |= (1 << PORTD6) | (1 << PORTD5);
     128:	8a b1       	in	r24, 0x0a	; 10
     12a:	80 66       	ori	r24, 0x60	; 96
     12c:	8a b9       	out	0x0a, r24	; 10

	TCCR0A |= (1 << WGM00) | (1 << COM0A1) | (1 << COM0B1);		// PWM, Phase Correct
     12e:	84 b5       	in	r24, 0x24	; 36
     130:	81 6a       	ori	r24, 0xA1	; 161
     132:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS02);										// 256 prescaler (ska väl kanske ändras)
     134:	85 b5       	in	r24, 0x25	; 37
     136:	84 60       	ori	r24, 0x04	; 4
     138:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;													// Reset TCNT0
     13a:	16 bc       	out	0x26, r1	; 38
	
	OCR0A = 0;
     13c:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0;
     13e:	18 bc       	out	0x28, r1	; 40
     140:	08 95       	ret

00000142 <motor_set_throttle>:
}

void motor_set_throttle(Motor *motor, uint8_t th, float scale) 
{
     142:	6f 92       	push	r6
     144:	7f 92       	push	r7
     146:	8f 92       	push	r8
     148:	9f 92       	push	r9
     14a:	af 92       	push	r10
     14c:	bf 92       	push	r11
     14e:	cf 92       	push	r12
     150:	df 92       	push	r13
     152:	ef 92       	push	r14
     154:	ff 92       	push	r15
     156:	0f 93       	push	r16
     158:	1f 93       	push	r17
     15a:	cf 93       	push	r28
     15c:	df 93       	push	r29
     15e:	ec 01       	movw	r28, r24
     160:	76 2e       	mov	r7, r22
     162:	69 01       	movw	r12, r18
     164:	7a 01       	movw	r14, r20
	const float max_in = 127;
	float max_ut = 255 - motor->throttle_offset;
     166:	68 80       	ld	r6, Y
     168:	06 2d       	mov	r16, r6
     16a:	11 27       	eor	r17, r17
     16c:	07 fd       	sbrc	r16, 7
     16e:	10 95       	com	r17
	float	perc = th / max_in;
     170:	70 e0       	ldi	r23, 0x00	; 0
	uint8_t finalThrottle = (perc * max_ut * scale + 0.5) + motor->throttle_offset;
	
	
	
	
	if(th + motor->throttle_offset > 255) {
     172:	c8 01       	movw	r24, r16
     174:	86 0f       	add	r24, r22
     176:	97 1f       	adc	r25, r23
     178:	8f 3f       	cpi	r24, 0xFF	; 255
     17a:	91 05       	cpc	r25, r1
     17c:	09 f0       	breq	.+2      	; 0x180 <motor_set_throttle+0x3e>
     17e:	ec f5       	brge	.+122    	; 0x1fa <motor_set_throttle+0xb8>
		finalThrottle = 255;
	}
	else if(th + motor->throttle_offset < 0) {
     180:	99 23       	and	r25, r25
     182:	ec f1       	brlt	.+122    	; 0x1fe <motor_set_throttle+0xbc>

void motor_set_throttle(Motor *motor, uint8_t th, float scale) 
{
	const float max_in = 127;
	float max_ut = 255 - motor->throttle_offset;
	float	perc = th / max_in;
     184:	88 27       	eor	r24, r24
     186:	77 fd       	sbrc	r23, 7
     188:	80 95       	com	r24
     18a:	98 2f       	mov	r25, r24
     18c:	0e 94 76 05 	call	0xaec	; 0xaec <__floatsisf>
     190:	20 e0       	ldi	r18, 0x00	; 0
     192:	30 e0       	ldi	r19, 0x00	; 0
     194:	4e ef       	ldi	r20, 0xFE	; 254
     196:	52 e4       	ldi	r21, 0x42	; 66
     198:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <__divsf3>
     19c:	4b 01       	movw	r8, r22
     19e:	5c 01       	movw	r10, r24
}

void motor_set_throttle(Motor *motor, uint8_t th, float scale) 
{
	const float max_in = 127;
	float max_ut = 255 - motor->throttle_offset;
     1a0:	6f ef       	ldi	r22, 0xFF	; 255
     1a2:	70 e0       	ldi	r23, 0x00	; 0
     1a4:	60 1b       	sub	r22, r16
     1a6:	71 0b       	sbc	r23, r17
     1a8:	88 27       	eor	r24, r24
     1aa:	77 fd       	sbrc	r23, 7
     1ac:	80 95       	com	r24
     1ae:	98 2f       	mov	r25, r24
     1b0:	0e 94 76 05 	call	0xaec	; 0xaec <__floatsisf>
     1b4:	9b 01       	movw	r18, r22
     1b6:	ac 01       	movw	r20, r24
	float	perc = th / max_in;
	uint8_t finalThrottle = (perc * max_ut * scale + 0.5) + motor->throttle_offset;
     1b8:	c5 01       	movw	r24, r10
     1ba:	b4 01       	movw	r22, r8
     1bc:	0e 94 02 06 	call	0xc04	; 0xc04 <__mulsf3>
     1c0:	a7 01       	movw	r20, r14
     1c2:	96 01       	movw	r18, r12
     1c4:	0e 94 02 06 	call	0xc04	; 0xc04 <__mulsf3>
     1c8:	20 e0       	ldi	r18, 0x00	; 0
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	40 e0       	ldi	r20, 0x00	; 0
     1ce:	5f e3       	ldi	r21, 0x3F	; 63
     1d0:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__addsf3>
     1d4:	6b 01       	movw	r12, r22
     1d6:	7c 01       	movw	r14, r24
     1d8:	66 2d       	mov	r22, r6
     1da:	77 27       	eor	r23, r23
     1dc:	67 fd       	sbrc	r22, 7
     1de:	70 95       	com	r23
     1e0:	87 2f       	mov	r24, r23
     1e2:	97 2f       	mov	r25, r23
     1e4:	0e 94 76 05 	call	0xaec	; 0xaec <__floatsisf>
     1e8:	9b 01       	movw	r18, r22
     1ea:	ac 01       	movw	r20, r24
     1ec:	c7 01       	movw	r24, r14
     1ee:	b6 01       	movw	r22, r12
     1f0:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__addsf3>
     1f4:	0e 94 48 05 	call	0xa90	; 0xa90 <__fixunssfsi>
     1f8:	03 c0       	rjmp	.+6      	; 0x200 <motor_set_throttle+0xbe>
	
	
	
	
	if(th + motor->throttle_offset > 255) {
		finalThrottle = 255;
     1fa:	6f ef       	ldi	r22, 0xFF	; 255
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <motor_set_throttle+0xbe>
	}
	else if(th + motor->throttle_offset < 0) {
		finalThrottle = 0;
     1fe:	60 e0       	ldi	r22, 0x00	; 0
	}
	//Set to stop!
	if (th == 0)
     200:	71 10       	cpse	r7, r1
     202:	01 c0       	rjmp	.+2      	; 0x206 <motor_set_throttle+0xc4>
	{
		finalThrottle = 0;
     204:	60 e0       	ldi	r22, 0x00	; 0
	}
	
	// Reverse PWM output if going in reverse.
	if(motor->direction == 0) {
     206:	8b 81       	ldd	r24, Y+3	; 0x03
     208:	81 11       	cpse	r24, r1
     20a:	01 c0       	rjmp	.+2      	; 0x20e <motor_set_throttle+0xcc>
		finalThrottle = 255 - finalThrottle;
     20c:	60 95       	com	r22
	}
	
	*(motor->OCR) = finalThrottle;
     20e:	e9 81       	ldd	r30, Y+1	; 0x01
     210:	fa 81       	ldd	r31, Y+2	; 0x02
     212:	60 83       	st	Z, r22
}
     214:	df 91       	pop	r29
     216:	cf 91       	pop	r28
     218:	1f 91       	pop	r17
     21a:	0f 91       	pop	r16
     21c:	ff 90       	pop	r15
     21e:	ef 90       	pop	r14
     220:	df 90       	pop	r13
     222:	cf 90       	pop	r12
     224:	bf 90       	pop	r11
     226:	af 90       	pop	r10
     228:	9f 90       	pop	r9
     22a:	8f 90       	pop	r8
     22c:	7f 90       	pop	r7
     22e:	6f 90       	pop	r6
     230:	08 95       	ret

00000232 <motor_set_direction>:

void motor_set_direction(Motor *motor, uint8_t dir) {
     232:	fc 01       	movw	r30, r24
	if(dir == 1) {
     234:	61 30       	cpi	r22, 0x01	; 1
     236:	91 f4       	brne	.+36     	; 0x25c <motor_set_direction+0x2a>
		motor->direction = dir;
     238:	81 e0       	ldi	r24, 0x01	; 1
     23a:	83 83       	std	Z+3, r24	; 0x03
		*(motor->dirPort) &= ~(1 << motor->dirPin);
     23c:	a4 81       	ldd	r26, Z+4	; 0x04
     23e:	b5 81       	ldd	r27, Z+5	; 0x05
     240:	4c 91       	ld	r20, X
     242:	21 e0       	ldi	r18, 0x01	; 1
     244:	30 e0       	ldi	r19, 0x00	; 0
     246:	c9 01       	movw	r24, r18
     248:	06 80       	ldd	r0, Z+6	; 0x06
     24a:	02 c0       	rjmp	.+4      	; 0x250 <motor_set_direction+0x1e>
     24c:	88 0f       	add	r24, r24
     24e:	99 1f       	adc	r25, r25
     250:	0a 94       	dec	r0
     252:	e2 f7       	brpl	.-8      	; 0x24c <motor_set_direction+0x1a>
     254:	80 95       	com	r24
     256:	84 23       	and	r24, r20
     258:	8c 93       	st	X, r24
     25a:	08 95       	ret
	}
	else if(dir == 0) {
     25c:	61 11       	cpse	r22, r1
     25e:	0f c0       	rjmp	.+30     	; 0x27e <motor_set_direction+0x4c>
		motor->direction = dir;
     260:	13 82       	std	Z+3, r1	; 0x03
		*(motor->dirPort) |= (1 << motor->dirPin);
     262:	a4 81       	ldd	r26, Z+4	; 0x04
     264:	b5 81       	ldd	r27, Z+5	; 0x05
     266:	4c 91       	ld	r20, X
     268:	21 e0       	ldi	r18, 0x01	; 1
     26a:	30 e0       	ldi	r19, 0x00	; 0
     26c:	c9 01       	movw	r24, r18
     26e:	06 80       	ldd	r0, Z+6	; 0x06
     270:	02 c0       	rjmp	.+4      	; 0x276 <motor_set_direction+0x44>
     272:	88 0f       	add	r24, r24
     274:	99 1f       	adc	r25, r25
     276:	0a 94       	dec	r0
     278:	e2 f7       	brpl	.-8      	; 0x272 <motor_set_direction+0x40>
     27a:	84 2b       	or	r24, r20
     27c:	8c 93       	st	X, r24
     27e:	08 95       	ret

00000280 <motor_init>:
#include "motor.h"

void motor_init(Motor *motor, uint8_t th_offset, volatile uint8_t *OCR, volatile uint8_t *DDR, volatile uint8_t *dirPort, uint8_t dirPin) {
     280:	ef 92       	push	r14
     282:	ff 92       	push	r15
     284:	0f 93       	push	r16
     286:	1f 93       	push	r17
	motor->throttle_offset = th_offset;
     288:	fc 01       	movw	r30, r24
     28a:	60 83       	st	Z, r22
	motor->OCR = OCR;
     28c:	52 83       	std	Z+2, r21	; 0x02
     28e:	41 83       	std	Z+1, r20	; 0x01
	motor->dirPort = dirPort;
     290:	15 83       	std	Z+5, r17	; 0x05
     292:	04 83       	std	Z+4, r16	; 0x04
	motor->dirPin = dirPin;
     294:	e6 82       	std	Z+6, r14	; 0x06
	*DDR |= (1 << dirPin);
     296:	f9 01       	movw	r30, r18
     298:	60 81       	ld	r22, Z
     29a:	41 e0       	ldi	r20, 0x01	; 1
     29c:	50 e0       	ldi	r21, 0x00	; 0
     29e:	fa 01       	movw	r30, r20
     2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <motor_init+0x26>
     2a2:	ee 0f       	add	r30, r30
     2a4:	ff 1f       	adc	r31, r31
     2a6:	ea 94       	dec	r14
     2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <motor_init+0x22>
     2aa:	7f 01       	movw	r14, r30
     2ac:	e6 2a       	or	r14, r22
     2ae:	f9 01       	movw	r30, r18
     2b0:	e0 82       	st	Z, r14
	
	motor_set_direction(motor, 1);
     2b2:	61 e0       	ldi	r22, 0x01	; 1
     2b4:	0e 94 19 01 	call	0x232	; 0x232 <motor_set_direction>
}
     2b8:	1f 91       	pop	r17
     2ba:	0f 91       	pop	r16
     2bc:	ff 90       	pop	r15
     2be:	ef 90       	pop	r14
     2c0:	08 95       	ret

000002c2 <enable_transmit>:
#define TRANSMIT_PORT_DDR	DDRC

//Set transmit high
void enable_transmit()
{
	TRANSMIT_PORT_DDR |= TRANSMIT_PIN;
     2c2:	3c 9a       	sbi	0x07, 4	; 7
	TRANSMIT_PORT	|= TRANSMIT_PIN;
     2c4:	44 9a       	sbi	0x08, 4	; 8
     2c6:	08 95       	ret

000002c8 <disable_transmit>:
}
//Set transmit low
void disable_transmit()
{
	TRANSMIT_PORT_DDR |= TRANSMIT_PIN;
     2c8:	3c 9a       	sbi	0x07, 4	; 7
	TRANSMIT_PORT	&= ~TRANSMIT_PIN;
     2ca:	88 b1       	in	r24, 0x08	; 8
     2cc:	80 7e       	andi	r24, 0xE0	; 224
     2ce:	88 b9       	out	0x08, r24	; 8
     2d0:	08 95       	ret

000002d2 <uart_putchar>:

FILE mystdout;

int uart_putchar(char c, FILE *stream) 
{ 
	send_c(c);
     2d2:	0e 94 30 04 	call	0x860	; 0x860 <send_c>
	return 0;
}
     2d6:	80 e0       	ldi	r24, 0x00	; 0
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	08 95       	ret

000002dc <irSensor>:
	TRANSMIT_PORT	&= ~TRANSMIT_PIN;
}

uint8_t irSensor(uint16_t adc)
{
	double volt = 0.0035*adc;
     2dc:	bc 01       	movw	r22, r24
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	0e 94 74 05 	call	0xae8	; 0xae8 <__floatunsisf>
     2e6:	22 e4       	ldi	r18, 0x42	; 66
     2e8:	30 e6       	ldi	r19, 0x60	; 96
     2ea:	45 e6       	ldi	r20, 0x65	; 101
     2ec:	5b e3       	ldi	r21, 0x3B	; 59
     2ee:	0e 94 02 06 	call	0xc04	; 0xc04 <__mulsf3>
	
	uint8_t cm = 26.922*pow(volt, -1.245);
     2f2:	29 e2       	ldi	r18, 0x29	; 41
     2f4:	3c e5       	ldi	r19, 0x5C	; 92
     2f6:	4f e9       	ldi	r20, 0x9F	; 159
     2f8:	5f eb       	ldi	r21, 0xBF	; 191
     2fa:	0e 94 65 06 	call	0xcca	; 0xcca <pow>
     2fe:	22 e4       	ldi	r18, 0x42	; 66
     300:	30 e6       	ldi	r19, 0x60	; 96
     302:	47 ed       	ldi	r20, 0xD7	; 215
     304:	51 e4       	ldi	r21, 0x41	; 65
     306:	0e 94 02 06 	call	0xc04	; 0xc04 <__mulsf3>
     30a:	0e 94 48 05 	call	0xa90	; 0xa90 <__fixunssfsi>
     30e:	86 2f       	mov	r24, r22
	
	return cm;
}
     310:	08 95       	ret

00000312 <adc_read>:
	/* adcx is the analog pin we want to use.  ADMUX's first few bits are
	 * the binary representations of the numbers of the pins so we can
	 * just 'OR' the pin's number with ADMUX to select that pin.
	 * We first zero the four bits by setting ADMUX equal to its higher
	 * four bits. */
	ADMUX	&=	0xf0;
     312:	ec e7       	ldi	r30, 0x7C	; 124
     314:	f0 e0       	ldi	r31, 0x00	; 0
     316:	90 81       	ld	r25, Z
     318:	90 7f       	andi	r25, 0xF0	; 240
     31a:	90 83       	st	Z, r25
	ADMUX	|=	adcx;
     31c:	90 81       	ld	r25, Z
     31e:	89 2b       	or	r24, r25
     320:	80 83       	st	Z, r24

	/* This starts the conversion. */
	ADCSRA |= _BV(ADSC);
     322:	ea e7       	ldi	r30, 0x7A	; 122
     324:	f0 e0       	ldi	r31, 0x00	; 0
     326:	80 81       	ld	r24, Z
     328:	80 64       	ori	r24, 0x40	; 64
     32a:	80 83       	st	Z, r24
	/* This is an idle loop that just wait around until the conversion
	 * is finished.  It constantly checks ADCSRA's ADSC bit, which we just
	 * set above, to see if it is still set.  This bit is automatically
	 * reset (zeroed) when the conversion is ready so if we do this in
	 * a loop the loop will just go until the conversion is ready. */
	while ( (ADCSRA & _BV(ADSC)) );
     32c:	80 81       	ld	r24, Z
     32e:	86 fd       	sbrc	r24, 6
     330:	fd cf       	rjmp	.-6      	; 0x32c <adc_read+0x1a>

	/* Finally, we return the converted value to the calling function. */
	return ADC;
     332:	80 91 78 00 	lds	r24, 0x0078
     336:	90 91 79 00 	lds	r25, 0x0079
}
     33a:	08 95       	ret

0000033c <main>:
int main()
{
     33c:	cf 93       	push	r28
     33e:	df 93       	push	r29
     340:	cd b7       	in	r28, 0x3d	; 61
     342:	de b7       	in	r29, 0x3e	; 62
     344:	63 97       	sbiw	r28, 0x13	; 19
     346:	0f b6       	in	r0, 0x3f	; 63
     348:	f8 94       	cli
     34a:	de bf       	out	0x3e, r29	; 62
     34c:	0f be       	out	0x3f, r0	; 63
     34e:	cd bf       	out	0x3d, r28	; 61
	DDRD = 2;					// output
     350:	82 e0       	ldi	r24, 0x02	; 2
     352:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xff;				// input
     354:	8f ef       	ldi	r24, 0xFF	; 255
     356:	84 b9       	out	0x04, r24	; 4
	SETBIT(PORTB,PB0);			// enable pull-up
     358:	28 9a       	sbi	0x05, 0	; 5
	SETBIT(PORTB,PB1);			// enable pull-up
     35a:	29 9a       	sbi	0x05, 1	; 5
	ADCSRA |= _BV(ADEN);		//Enable adc	
     35c:	ea e7       	ldi	r30, 0x7A	; 122
     35e:	f0 e0       	ldi	r31, 0x00	; 0
     360:	80 81       	ld	r24, Z
     362:	80 68       	ori	r24, 0x80	; 128
     364:	80 83       	st	Z, r24
	//Set up motor pwm
	Motor leftMotor;
	Motor rightMotor;
	//left OCA & PD7
	motor_init(&leftMotor, 10, &OCR0A, &DDRD, &PORTD, 7);
     366:	0f 2e       	mov	r0, r31
     368:	f7 e0       	ldi	r31, 0x07	; 7
     36a:	ef 2e       	mov	r14, r31
     36c:	f0 2d       	mov	r31, r0
     36e:	0b e2       	ldi	r16, 0x2B	; 43
     370:	10 e0       	ldi	r17, 0x00	; 0
     372:	2a e2       	ldi	r18, 0x2A	; 42
     374:	30 e0       	ldi	r19, 0x00	; 0
     376:	47 e4       	ldi	r20, 0x47	; 71
     378:	50 e0       	ldi	r21, 0x00	; 0
     37a:	6a e0       	ldi	r22, 0x0A	; 10
     37c:	ce 01       	movw	r24, r28
     37e:	01 96       	adiw	r24, 0x01	; 1
     380:	0e 94 40 01 	call	0x280	; 0x280 <motor_init>
	//right OCB & PB7
	motor_init(&rightMotor, 10, &OCR0B, &DDRB, &PORTB, 7);
     384:	05 e2       	ldi	r16, 0x25	; 37
     386:	10 e0       	ldi	r17, 0x00	; 0
     388:	24 e2       	ldi	r18, 0x24	; 36
     38a:	30 e0       	ldi	r19, 0x00	; 0
     38c:	48 e4       	ldi	r20, 0x48	; 72
     38e:	50 e0       	ldi	r21, 0x00	; 0
     390:	6a e0       	ldi	r22, 0x0A	; 10
     392:	ce 01       	movw	r24, r28
     394:	08 96       	adiw	r24, 0x08	; 8
     396:	0e 94 40 01 	call	0x280	; 0x280 <motor_init>

	motor_pwm_init(); 
     39a:	0e 94 94 00 	call	0x128	; 0x128 <motor_pwm_init>
	
	//Set up superpaketet
	set_link_mode_functions(enable_transmit, disable_transmit);
     39e:	64 e6       	ldi	r22, 0x64	; 100
     3a0:	71 e0       	ldi	r23, 0x01	; 1
     3a2:	81 e6       	ldi	r24, 0x61	; 97
     3a4:	91 e0       	ldi	r25, 0x01	; 1
     3a6:	0e 94 c1 02 	call	0x582	; 0x582 <set_link_mode_functions>
	
	//We are listening here
	disable_transmit();
     3aa:	0e 94 64 01 	call	0x2c8	; 0x2c8 <disable_transmit>
	

	sei();
     3ae:	78 94       	sei
	InitUART(9600);	
     3b0:	80 e8       	ldi	r24, 0x80	; 128
     3b2:	95 e2       	ldi	r25, 0x25	; 37
     3b4:	0e 94 ca 02 	call	0x594	; 0x594 <InitUART>
	
	fdev_setup_stream(&mystdout, uart_putchar, NULL, _FDEV_SETUP_WRITE);
     3b8:	89 e6       	ldi	r24, 0x69	; 105
     3ba:	91 e0       	ldi	r25, 0x01	; 1
     3bc:	90 93 33 01 	sts	0x0133, r25
     3c0:	80 93 32 01 	sts	0x0132, r24
     3c4:	10 92 35 01 	sts	0x0135, r1
     3c8:	10 92 34 01 	sts	0x0134, r1
     3cc:	82 e0       	ldi	r24, 0x02	; 2
     3ce:	80 93 2d 01 	sts	0x012D, r24
     3d2:	10 92 37 01 	sts	0x0137, r1
     3d6:	10 92 36 01 	sts	0x0136, r1
	stdout = &mystdout;			
     3da:	8a e2       	ldi	r24, 0x2A	; 42
     3dc:	91 e0       	ldi	r25, 0x01	; 1
     3de:	90 93 07 02 	sts	0x0207, r25
     3e2:	80 93 06 02 	sts	0x0206, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3e6:	8f e0       	ldi	r24, 0x0F	; 15
     3e8:	97 e2       	ldi	r25, 0x27	; 39
     3ea:	01 97       	sbiw	r24, 0x01	; 1
     3ec:	f1 f7       	brne	.-4      	; 0x3ea <main+0xae>
     3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <main+0xb4>
     3f0:	00 00       	nop
	_delay_ms(5);
	
	send_string(" Wait", 5);
     3f2:	65 e0       	ldi	r22, 0x05	; 5
     3f4:	88 e0       	ldi	r24, 0x08	; 8
     3f6:	91 e0       	ldi	r25, 0x01	; 1
     3f8:	0e 94 50 04 	call	0x8a0	; 0x8a0 <send_string>
	
	int thLeft = 127,  thRight = 127;
     3fc:	0f 2e       	mov	r0, r31
     3fe:	ff e7       	ldi	r31, 0x7F	; 127
     400:	ef 2e       	mov	r14, r31
     402:	f1 2c       	mov	r15, r1
     404:	f0 2d       	mov	r31, r0
     406:	0f e7       	ldi	r16, 0x7F	; 127
     408:	10 e0       	ldi	r17, 0x00	; 0
					thRight = inc.payload[1];
					//printf("Paket! %d & %d\n\r", inc.payload[0], inc.payload[1]);
					break;
				case 2:		//Throttle scaling
					th_scale = *(uint16_t*)inc.payload / 10000.0;
					printf("Paket! %d & %d\n\r", inc.payload[0], inc.payload[1]);
     40a:	0f 2e       	mov	r0, r31
     40c:	fe e0       	ldi	r31, 0x0E	; 14
     40e:	cf 2e       	mov	r12, r31
     410:	f1 e0       	ldi	r31, 0x01	; 1
     412:	df 2e       	mov	r13, r31
     414:	f0 2d       	mov	r31, r0
		}
		
		
		if(thLeft < 127) {
			motor_set_direction(&leftMotor, 0);
			motor_set_throttle(&leftMotor, 127 - thLeft, th_scale);
     416:	0f 2e       	mov	r0, r31
     418:	ff e7       	ldi	r31, 0x7F	; 127
     41a:	bf 2e       	mov	r11, r31
     41c:	f0 2d       	mov	r31, r0
     41e:	8f e6       	ldi	r24, 0x6F	; 111
     420:	97 e1       	ldi	r25, 0x17	; 23
     422:	01 97       	sbiw	r24, 0x01	; 1
     424:	f1 f7       	brne	.-4      	; 0x422 <main+0xe6>
     426:	00 c0       	rjmp	.+0      	; 0x428 <main+0xec>
     428:	00 00       	nop
	
	while(1)
	{
				
 		_delay_ms(3);
		super_paketet inc = check_for_package();
     42a:	0e 94 32 03 	call	0x664	; 0x664 <check_for_package>
     42e:	2f 87       	std	Y+15, r18	; 0x0f
     430:	38 8b       	std	Y+16, r19	; 0x10
     432:	49 8b       	std	Y+17, r20	; 0x11
     434:	5a 8b       	std	Y+18, r21	; 0x12
     436:	6b 8b       	std	Y+19, r22	; 0x13
     438:	a3 2e       	mov	r10, r19
		if (inc.adress != 0)
     43a:	22 23       	and	r18, r18
     43c:	09 f4       	brne	.+2      	; 0x440 <main+0x104>
     43e:	4b c0       	rjmp	.+150    	; 0x4d6 <main+0x19a>
		{
			//Check if package want a response
			if (is_request_type(inc.type))
     440:	33 23       	and	r19, r19
     442:	9c f4       	brge	.+38     	; 0x46a <main+0x12e>
			{
				//Send response
				enable_transmit();
     444:	0e 94 61 01 	call	0x2c2	; 0x2c2 <enable_transmit>
				//Fill data
				//put distance from irsensor into inc.payload here
				inc.payload[0] = irSensor(adc_read(ADC_PIN));
     448:	85 e0       	ldi	r24, 0x05	; 5
     44a:	0e 94 89 01 	call	0x312	; 0x312 <adc_read>
     44e:	0e 94 6e 01 	call	0x2dc	; 0x2dc <irSensor>
     452:	89 8b       	std	Y+17, r24	; 0x11
				send_package(inc);
     454:	4f 85       	ldd	r20, Y+15	; 0x0f
     456:	58 89       	ldd	r21, Y+16	; 0x10
     458:	68 2f       	mov	r22, r24
     45a:	7a 89       	ldd	r23, Y+18	; 0x12
     45c:	8b 89       	ldd	r24, Y+19	; 0x13
     45e:	0e 94 69 03 	call	0x6d2	; 0x6d2 <send_package>
				//wait for send
				flush_usart();
     462:	0e 94 76 04 	call	0x8ec	; 0x8ec <flush_usart>
				disable_transmit();
     466:	0e 94 64 01 	call	0x2c8	; 0x2c8 <disable_transmit>
			}
			switch(inc.type)
     46a:	91 e0       	ldi	r25, 0x01	; 1
     46c:	a9 16       	cp	r10, r25
     46e:	21 f0       	breq	.+8      	; 0x478 <main+0x13c>
     470:	82 e0       	ldi	r24, 0x02	; 2
     472:	a8 16       	cp	r10, r24
     474:	31 f0       	breq	.+12     	; 0x482 <main+0x146>
     476:	2a c0       	rjmp	.+84     	; 0x4cc <main+0x190>
			{
				case 1:
					thLeft = inc.payload[0];
     478:	09 89       	ldd	r16, Y+17	; 0x11
     47a:	10 e0       	ldi	r17, 0x00	; 0
					thRight = inc.payload[1];
     47c:	ea 88       	ldd	r14, Y+18	; 0x12
     47e:	f1 2c       	mov	r15, r1
					//printf("Paket! %d & %d\n\r", inc.payload[0], inc.payload[1]);
					break;
     480:	2a c0       	rjmp	.+84     	; 0x4d6 <main+0x19a>
				case 2:		//Throttle scaling
					th_scale = *(uint16_t*)inc.payload / 10000.0;
     482:	69 89       	ldd	r22, Y+17	; 0x11
     484:	7a 89       	ldd	r23, Y+18	; 0x12
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	0e 94 74 05 	call	0xae8	; 0xae8 <__floatunsisf>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	30 e4       	ldi	r19, 0x40	; 64
     492:	4c e1       	ldi	r20, 0x1C	; 28
     494:	56 e4       	ldi	r21, 0x46	; 70
     496:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <__divsf3>
     49a:	60 93 00 01 	sts	0x0100, r22
     49e:	70 93 01 01 	sts	0x0101, r23
     4a2:	80 93 02 01 	sts	0x0102, r24
     4a6:	90 93 03 01 	sts	0x0103, r25
					printf("Paket! %d & %d\n\r", inc.payload[0], inc.payload[1]);
     4aa:	8a 89       	ldd	r24, Y+18	; 0x12
     4ac:	1f 92       	push	r1
     4ae:	8f 93       	push	r24
     4b0:	89 89       	ldd	r24, Y+17	; 0x11
     4b2:	1f 92       	push	r1
     4b4:	8f 93       	push	r24
     4b6:	df 92       	push	r13
     4b8:	cf 92       	push	r12
     4ba:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <printf>
					break;
     4be:	0f 90       	pop	r0
     4c0:	0f 90       	pop	r0
     4c2:	0f 90       	pop	r0
     4c4:	0f 90       	pop	r0
     4c6:	0f 90       	pop	r0
     4c8:	0f 90       	pop	r0
     4ca:	05 c0       	rjmp	.+10     	; 0x4d6 <main+0x19a>
				default:
					send_string(".", 1);
     4cc:	61 e0       	ldi	r22, 0x01	; 1
     4ce:	8f e1       	ldi	r24, 0x1F	; 31
     4d0:	91 e0       	ldi	r25, 0x01	; 1
     4d2:	0e 94 50 04 	call	0x8a0	; 0x8a0 <send_string>
					break;
			}
		}
		
		
		if(thLeft < 127) {
     4d6:	0f 37       	cpi	r16, 0x7F	; 127
     4d8:	11 05       	cpc	r17, r1
     4da:	a4 f4       	brge	.+40     	; 0x504 <main+0x1c8>
			motor_set_direction(&leftMotor, 0);
     4dc:	60 e0       	ldi	r22, 0x00	; 0
     4de:	ce 01       	movw	r24, r28
     4e0:	01 96       	adiw	r24, 0x01	; 1
     4e2:	0e 94 19 01 	call	0x232	; 0x232 <motor_set_direction>
			motor_set_throttle(&leftMotor, 127 - thLeft, th_scale);
     4e6:	20 91 00 01 	lds	r18, 0x0100
     4ea:	30 91 01 01 	lds	r19, 0x0101
     4ee:	40 91 02 01 	lds	r20, 0x0102
     4f2:	50 91 03 01 	lds	r21, 0x0103
     4f6:	6b 2d       	mov	r22, r11
     4f8:	60 1b       	sub	r22, r16
     4fa:	ce 01       	movw	r24, r28
     4fc:	01 96       	adiw	r24, 0x01	; 1
     4fe:	0e 94 a1 00 	call	0x142	; 0x142 <motor_set_throttle>
     502:	13 c0       	rjmp	.+38     	; 0x52a <main+0x1ee>
		}
		else 
		{
			motor_set_direction(&leftMotor, 1);
     504:	61 e0       	ldi	r22, 0x01	; 1
     506:	ce 01       	movw	r24, r28
     508:	01 96       	adiw	r24, 0x01	; 1
     50a:	0e 94 19 01 	call	0x232	; 0x232 <motor_set_direction>
			motor_set_throttle(&leftMotor, thLeft - 127, th_scale);
     50e:	20 91 00 01 	lds	r18, 0x0100
     512:	30 91 01 01 	lds	r19, 0x0101
     516:	40 91 02 01 	lds	r20, 0x0102
     51a:	50 91 03 01 	lds	r21, 0x0103
     51e:	61 e8       	ldi	r22, 0x81	; 129
     520:	60 0f       	add	r22, r16
     522:	ce 01       	movw	r24, r28
     524:	01 96       	adiw	r24, 0x01	; 1
     526:	0e 94 a1 00 	call	0x142	; 0x142 <motor_set_throttle>
		}
		
		if(thRight < 127) {
     52a:	9f e7       	ldi	r25, 0x7F	; 127
     52c:	e9 16       	cp	r14, r25
     52e:	f1 04       	cpc	r15, r1
     530:	a4 f4       	brge	.+40     	; 0x55a <main+0x21e>
			motor_set_direction(&rightMotor, 0);
     532:	60 e0       	ldi	r22, 0x00	; 0
     534:	ce 01       	movw	r24, r28
     536:	08 96       	adiw	r24, 0x08	; 8
     538:	0e 94 19 01 	call	0x232	; 0x232 <motor_set_direction>
			motor_set_throttle(&rightMotor, 127 - thRight, th_scale);
     53c:	20 91 00 01 	lds	r18, 0x0100
     540:	30 91 01 01 	lds	r19, 0x0101
     544:	40 91 02 01 	lds	r20, 0x0102
     548:	50 91 03 01 	lds	r21, 0x0103
     54c:	6b 2d       	mov	r22, r11
     54e:	6e 19       	sub	r22, r14
     550:	ce 01       	movw	r24, r28
     552:	08 96       	adiw	r24, 0x08	; 8
     554:	0e 94 a1 00 	call	0x142	; 0x142 <motor_set_throttle>
     558:	62 cf       	rjmp	.-316    	; 0x41e <main+0xe2>
		}
		else {
			motor_set_direction(&rightMotor, 1);
     55a:	61 e0       	ldi	r22, 0x01	; 1
     55c:	ce 01       	movw	r24, r28
     55e:	08 96       	adiw	r24, 0x08	; 8
     560:	0e 94 19 01 	call	0x232	; 0x232 <motor_set_direction>
			motor_set_throttle(&rightMotor, thRight - 127, th_scale);
     564:	20 91 00 01 	lds	r18, 0x0100
     568:	30 91 01 01 	lds	r19, 0x0101
     56c:	40 91 02 01 	lds	r20, 0x0102
     570:	50 91 03 01 	lds	r21, 0x0103
     574:	61 e8       	ldi	r22, 0x81	; 129
     576:	6e 0d       	add	r22, r14
     578:	ce 01       	movw	r24, r28
     57a:	08 96       	adiw	r24, 0x08	; 8
     57c:	0e 94 a1 00 	call	0x142	; 0x142 <motor_set_throttle>
		}
		
	}
     580:	4e cf       	rjmp	.-356    	; 0x41e <main+0xe2>

00000582 <set_link_mode_functions>:
void (*disable_transmit_func)();

//Init function for controlling radio module
void set_link_mode_functions(void (*enable_transmit), void (*disable_transmit))
{
	enable_transmit_func = enable_transmit;
     582:	90 93 39 01 	sts	0x0139, r25
     586:	80 93 38 01 	sts	0x0138, r24
	disable_transmit_func = disable_transmit;
     58a:	70 93 3b 01 	sts	0x013B, r23
     58e:	60 93 3a 01 	sts	0x013A, r22
     592:	08 95       	ret

00000594 <InitUART>:
}


void InitUART( unsigned int baud )
{
	int baudfactor = (F_CPU/16/baud-1);
     594:	9c 01       	movw	r18, r24
     596:	40 e0       	ldi	r20, 0x00	; 0
     598:	50 e0       	ldi	r21, 0x00	; 0
     59a:	60 e2       	ldi	r22, 0x20	; 32
     59c:	71 ea       	ldi	r23, 0xA1	; 161
     59e:	87 e0       	ldi	r24, 0x07	; 7
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	0e 94 ca 07 	call	0xf94	; 0xf94 <__udivmodsi4>
     5a6:	21 50       	subi	r18, 0x01	; 1
     5a8:	31 09       	sbc	r19, r1
	UBRR0H = (unsigned char)(baudfactor>>8);	//set the baud rate
     5aa:	30 93 c5 00 	sts	0x00C5, r19
	UBRR0L = (unsigned char)baudfactor;
     5ae:	20 93 c4 00 	sts	0x00C4, r18
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);			//enable UART receiver and transmitter
     5b2:	e1 ec       	ldi	r30, 0xC1	; 193
     5b4:	f0 e0       	ldi	r31, 0x00	; 0
     5b6:	88 e1       	ldi	r24, 0x18	; 24
     5b8:	80 83       	st	Z, r24
	/* Set frame format: 8data */
	UCSR0C = (3<<UCSZ00);
     5ba:	86 e0       	ldi	r24, 0x06	; 6
     5bc:	80 93 c2 00 	sts	0x00C2, r24
	//Activate interrupts
	UCSR0B |= (1 << UDRIE0) + (1 << RXCIE0);
     5c0:	80 81       	ld	r24, Z
     5c2:	80 6a       	ori	r24, 0xA0	; 160
     5c4:	80 83       	st	Z, r24
     5c6:	08 95       	ret

000005c8 <do_crc>:

//make crc checksum
uint8_t do_crc(uint8_t in_data[], uint8_t length)
{
	uint8_t ret = 0;
	for (int i = 0; i < length; i++)
     5c8:	70 e0       	ldi	r23, 0x00	; 0
     5ca:	16 16       	cp	r1, r22
     5cc:	17 06       	cpc	r1, r23
     5ce:	6c f4       	brge	.+26     	; 0x5ea <do_crc+0x22>
     5d0:	e8 2f       	mov	r30, r24
     5d2:	f9 2f       	mov	r31, r25
     5d4:	20 e0       	ldi	r18, 0x00	; 0
     5d6:	30 e0       	ldi	r19, 0x00	; 0


//make crc checksum
uint8_t do_crc(uint8_t in_data[], uint8_t length)
{
	uint8_t ret = 0;
     5d8:	80 e0       	ldi	r24, 0x00	; 0
	for (int i = 0; i < length; i++)
	{
		//xor
		ret ^= in_data[i];
     5da:	91 91       	ld	r25, Z+
     5dc:	89 27       	eor	r24, r25

//make crc checksum
uint8_t do_crc(uint8_t in_data[], uint8_t length)
{
	uint8_t ret = 0;
	for (int i = 0; i < length; i++)
     5de:	2f 5f       	subi	r18, 0xFF	; 255
     5e0:	3f 4f       	sbci	r19, 0xFF	; 255
     5e2:	26 17       	cp	r18, r22
     5e4:	37 07       	cpc	r19, r23
     5e6:	cc f3       	brlt	.-14     	; 0x5da <do_crc+0x12>
     5e8:	08 95       	ret


//make crc checksum
uint8_t do_crc(uint8_t in_data[], uint8_t length)
{
	uint8_t ret = 0;
     5ea:	80 e0       	ldi	r24, 0x00	; 0
	{
		//xor
		ret ^= in_data[i];
	}
	return ret;
}
     5ec:	08 95       	ret

000005ee <process_data_for_package>:

//Call from isr
super_paketet process_data_for_package(char incomming_byte)
{
     5ee:	1f 93       	push	r17
     5f0:	cf 93       	push	r28
     5f2:	df 93       	push	r29
     5f4:	00 d0       	rcall	.+0      	; 0x5f6 <process_data_for_package+0x8>
     5f6:	00 d0       	rcall	.+0      	; 0x5f8 <process_data_for_package+0xa>
     5f8:	1f 92       	push	r1
     5fa:	cd b7       	in	r28, 0x3d	; 61
     5fc:	de b7       	in	r29, 0x3e	; 62
     5fe:	18 2f       	mov	r17, r24
	//static uint8_t		counter = 0;
	super_paketet *package = (super_paketet *)buffer;
	super_paketet *new_package = (super_paketet *)(buffer + 1);
	
	//move into last place in buffer
	buffer[PACKAGE_SIZE] = incomming_byte;
     600:	80 93 27 01 	sts	0x0127, r24
	//counter++;
	
	//Copy new content
	*package = *new_package;
     604:	95 e0       	ldi	r25, 0x05	; 5
     606:	e3 e2       	ldi	r30, 0x23	; 35
     608:	f1 e0       	ldi	r31, 0x01	; 1
     60a:	a2 e2       	ldi	r26, 0x22	; 34
     60c:	b1 e0       	ldi	r27, 0x01	; 1
     60e:	01 90       	ld	r0, Z+
     610:	0d 92       	st	X+, r0
     612:	9a 95       	dec	r25
     614:	e1 f7       	brne	.-8      	; 0x60e <process_data_for_package+0x20>
	//check for package
	
	
	if (package->adress == ADRESS)
     616:	80 91 22 01 	lds	r24, 0x0122
     61a:	86 36       	cpi	r24, 0x66	; 102
     61c:	89 f4       	brne	.+34     	; 0x640 <process_data_for_package+0x52>
	{
		//Woo paket!
		//Crc osv
		if (package->crc == do_crc((uint8_t*)package, PACKAGE_SIZE - 1))
     61e:	64 e0       	ldi	r22, 0x04	; 4
     620:	82 e2       	ldi	r24, 0x22	; 34
     622:	91 e0       	ldi	r25, 0x01	; 1
     624:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <do_crc>
     628:	18 13       	cpse	r17, r24
     62a:	0a c0       	rjmp	.+20     	; 0x640 <process_data_for_package+0x52>
		{
			return *package;
     62c:	85 e0       	ldi	r24, 0x05	; 5
     62e:	e2 e2       	ldi	r30, 0x22	; 34
     630:	f1 e0       	ldi	r31, 0x01	; 1
     632:	de 01       	movw	r26, r28
     634:	11 96       	adiw	r26, 0x01	; 1
     636:	01 90       	ld	r0, Z+
     638:	0d 92       	st	X+, r0
     63a:	8a 95       	dec	r24
     63c:	e1 f7       	brne	.-8      	; 0x636 <process_data_for_package+0x48>
     63e:	01 c0       	rjmp	.+2      	; 0x642 <process_data_for_package+0x54>
		}
	}
	super_paketet fail_return;
	fail_return.adress = 0;
	
	return fail_return;
     640:	19 82       	std	Y+1, r1	; 0x01
     642:	29 81       	ldd	r18, Y+1	; 0x01
     644:	3a 81       	ldd	r19, Y+2	; 0x02
     646:	4b 81       	ldd	r20, Y+3	; 0x03
     648:	5c 81       	ldd	r21, Y+4	; 0x04
     64a:	6d 81       	ldd	r22, Y+5	; 0x05
}
     64c:	70 e0       	ldi	r23, 0x00	; 0
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	0f 90       	pop	r0
     654:	0f 90       	pop	r0
     656:	0f 90       	pop	r0
     658:	0f 90       	pop	r0
     65a:	0f 90       	pop	r0
     65c:	df 91       	pop	r29
     65e:	cf 91       	pop	r28
     660:	1f 91       	pop	r17
     662:	08 95       	ret

00000664 <check_for_package>:

//Fetch new packages if there is one
super_paketet check_for_package()
{
     664:	cf 93       	push	r28
     666:	df 93       	push	r29
     668:	cd b7       	in	r28, 0x3d	; 61
     66a:	de b7       	in	r29, 0x3e	; 62
     66c:	2b 97       	sbiw	r28, 0x0b	; 11
     66e:	0f b6       	in	r0, 0x3f	; 63
     670:	f8 94       	cli
     672:	de bf       	out	0x3e, r29	; 62
     674:	0f be       	out	0x3f, r0	; 63
     676:	cd bf       	out	0x3d, r28	; 61
	char incomming_byte;
	//Check if we have data
	while (ReceiveByte(&incomming_byte))
     678:	14 c0       	rjmp	.+40     	; 0x6a2 <check_for_package+0x3e>
	{
		super_paketet incomming_package;
		//Send new data for processing
		incomming_package = process_data_for_package(incomming_byte);
     67a:	8e 81       	ldd	r24, Y+6	; 0x06
     67c:	0e 94 f7 02 	call	0x5ee	; 0x5ee <process_data_for_package>
     680:	2f 83       	std	Y+7, r18	; 0x07
     682:	38 87       	std	Y+8, r19	; 0x08
     684:	49 87       	std	Y+9, r20	; 0x09
     686:	5a 87       	std	Y+10, r21	; 0x0a
     688:	6b 87       	std	Y+11, r22	; 0x0b
		//Check if we got a package
		if (incomming_package.adress != 0)
     68a:	22 23       	and	r18, r18
     68c:	51 f0       	breq	.+20     	; 0x6a2 <check_for_package+0x3e>
		{
			return incomming_package;
     68e:	85 e0       	ldi	r24, 0x05	; 5
     690:	fe 01       	movw	r30, r28
     692:	37 96       	adiw	r30, 0x07	; 7
     694:	de 01       	movw	r26, r28
     696:	11 96       	adiw	r26, 0x01	; 1
     698:	01 90       	ld	r0, Z+
     69a:	0d 92       	st	X+, r0
     69c:	8a 95       	dec	r24
     69e:	e1 f7       	brne	.-8      	; 0x698 <check_for_package+0x34>
     6a0:	07 c0       	rjmp	.+14     	; 0x6b0 <check_for_package+0x4c>
//Fetch new packages if there is one
super_paketet check_for_package()
{
	char incomming_byte;
	//Check if we have data
	while (ReceiveByte(&incomming_byte))
     6a2:	ce 01       	movw	r24, r28
     6a4:	06 96       	adiw	r24, 0x06	; 6
     6a6:	0e 94 0f 04 	call	0x81e	; 0x81e <ReceiveByte>
     6aa:	81 11       	cpse	r24, r1
     6ac:	e6 cf       	rjmp	.-52     	; 0x67a <check_for_package+0x16>
		}
	}
	super_paketet fail_return;
	fail_return.adress = 0;
	
	return fail_return;
     6ae:	19 82       	std	Y+1, r1	; 0x01
     6b0:	29 81       	ldd	r18, Y+1	; 0x01
     6b2:	3a 81       	ldd	r19, Y+2	; 0x02
     6b4:	4b 81       	ldd	r20, Y+3	; 0x03
     6b6:	5c 81       	ldd	r21, Y+4	; 0x04
     6b8:	6d 81       	ldd	r22, Y+5	; 0x05
}
     6ba:	70 e0       	ldi	r23, 0x00	; 0
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	2b 96       	adiw	r28, 0x0b	; 11
     6c2:	0f b6       	in	r0, 0x3f	; 63
     6c4:	f8 94       	cli
     6c6:	de bf       	out	0x3e, r29	; 62
     6c8:	0f be       	out	0x3f, r0	; 63
     6ca:	cd bf       	out	0x3d, r28	; 61
     6cc:	df 91       	pop	r29
     6ce:	cf 91       	pop	r28
     6d0:	08 95       	ret

000006d2 <send_package>:
//pad package and send over usart
void send_package(super_paketet outgoing_package)
{
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
     6d6:	cd b7       	in	r28, 0x3d	; 61
     6d8:	de b7       	in	r29, 0x3e	; 62
     6da:	2c 97       	sbiw	r28, 0x0c	; 12
     6dc:	0f b6       	in	r0, 0x3f	; 63
     6de:	f8 94       	cli
     6e0:	de bf       	out	0x3e, r29	; 62
     6e2:	0f be       	out	0x3f, r0	; 63
     6e4:	cd bf       	out	0x3d, r28	; 61
     6e6:	48 87       	std	Y+8, r20	; 0x08
     6e8:	59 87       	std	Y+9, r21	; 0x09
     6ea:	6a 87       	std	Y+10, r22	; 0x0a
     6ec:	7b 87       	std	Y+11, r23	; 0x0b
     6ee:	8c 87       	std	Y+12, r24	; 0x0c
	outgoing_package.crc = do_crc((uint8_t*)&outgoing_package, PACKAGE_SIZE-1);
     6f0:	64 e0       	ldi	r22, 0x04	; 4
     6f2:	ce 01       	movw	r24, r28
     6f4:	08 96       	adiw	r24, 0x08	; 8
     6f6:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <do_crc>
     6fa:	8c 87       	std	Y+12, r24	; 0x0c
	const int outgoing_data_length = sizeof(super_paketet) + 2;
	
	char outgoing_data[outgoing_data_length]; // package + preamble
	
	*(uint16_t*)outgoing_data = PREAMBLE;
     6fc:	8f ef       	ldi	r24, 0xFF	; 255
     6fe:	95 e5       	ldi	r25, 0x55	; 85
     700:	9a 83       	std	Y+2, r25	; 0x02
     702:	89 83       	std	Y+1, r24	; 0x01
	*(super_paketet*)(outgoing_data + 2) = outgoing_package;
     704:	85 e0       	ldi	r24, 0x05	; 5
     706:	fe 01       	movw	r30, r28
     708:	38 96       	adiw	r30, 0x08	; 8
     70a:	de 01       	movw	r26, r28
     70c:	13 96       	adiw	r26, 0x03	; 3
     70e:	01 90       	ld	r0, Z+
     710:	0d 92       	st	X+, r0
     712:	8a 95       	dec	r24
     714:	e1 f7       	brne	.-8      	; 0x70e <send_package+0x3c>
	
	send_string(outgoing_data, outgoing_data_length);
     716:	67 e0       	ldi	r22, 0x07	; 7
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	0e 94 50 04 	call	0x8a0	; 0x8a0 <send_string>
}
     720:	2c 96       	adiw	r28, 0x0c	; 12
     722:	0f b6       	in	r0, 0x3f	; 63
     724:	f8 94       	cli
     726:	de bf       	out	0x3e, r29	; 62
     728:	0f be       	out	0x3f, r0	; 63
     72a:	cd bf       	out	0x3d, r28	; 61
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	08 95       	ret

00000732 <__vector_19>:
#define release_lock()	sei()

//Usart transmit interrupt
//This interrupt is always called when UDR is empty
ISR(USART_UDRE_vect)
{
     732:	1f 92       	push	r1
     734:	0f 92       	push	r0
     736:	0f b6       	in	r0, 0x3f	; 63
     738:	0f 92       	push	r0
     73a:	11 24       	eor	r1, r1
     73c:	2f 93       	push	r18
     73e:	8f 93       	push	r24
     740:	9f 93       	push	r25
     742:	ef 93       	push	r30
     744:	ff 93       	push	r31
	// check for empty transmit buffer	and if we have data
	if ( 0 != outgoing_data_counter)
     746:	80 91 29 01 	lds	r24, 0x0129
     74a:	88 23       	and	r24, r24
     74c:	09 f1       	breq	.+66     	; 0x790 <__vector_19+0x5e>
	{
		outgoing_data_counter--;
     74e:	80 91 29 01 	lds	r24, 0x0129
     752:	81 50       	subi	r24, 0x01	; 1
     754:	80 93 29 01 	sts	0x0129, r24
		UDR0 = *outgoing_data_head; 		// start transmition
     758:	e0 91 06 01 	lds	r30, 0x0106
     75c:	f0 91 07 01 	lds	r31, 0x0107
     760:	80 81       	ld	r24, Z
     762:	80 93 c6 00 	sts	0x00C6, r24
		outgoing_data_head++;
     766:	80 91 06 01 	lds	r24, 0x0106
     76a:	90 91 07 01 	lds	r25, 0x0107
     76e:	01 96       	adiw	r24, 0x01	; 1
		if (outgoing_data_head >= (outgoing_data + USART_TX_BUFFER_SIZE))
     770:	22 e0       	ldi	r18, 0x02	; 2
     772:	84 30       	cpi	r24, 0x04	; 4
     774:	92 07       	cpc	r25, r18
     776:	28 f4       	brcc	.+10     	; 0x782 <__vector_19+0x50>
	// check for empty transmit buffer	and if we have data
	if ( 0 != outgoing_data_counter)
	{
		outgoing_data_counter--;
		UDR0 = *outgoing_data_head; 		// start transmition
		outgoing_data_head++;
     778:	90 93 07 01 	sts	0x0107, r25
     77c:	80 93 06 01 	sts	0x0106, r24
     780:	0c c0       	rjmp	.+24     	; 0x79a <__vector_19+0x68>
		if (outgoing_data_head >= (outgoing_data + USART_TX_BUFFER_SIZE))
		{
			outgoing_data_head = outgoing_data;	//reset ring buffer
     782:	80 ea       	ldi	r24, 0xA0	; 160
     784:	91 e0       	ldi	r25, 0x01	; 1
     786:	90 93 07 01 	sts	0x0107, r25
     78a:	80 93 06 01 	sts	0x0106, r24
     78e:	05 c0       	rjmp	.+10     	; 0x79a <__vector_19+0x68>
		}
	}else{
		//Inactivate interrupt
		UCSR0B &= ~(1 << UDRIE0);
     790:	e1 ec       	ldi	r30, 0xC1	; 193
     792:	f0 e0       	ldi	r31, 0x00	; 0
     794:	80 81       	ld	r24, Z
     796:	8f 7d       	andi	r24, 0xDF	; 223
     798:	80 83       	st	Z, r24
		
	}
}
     79a:	ff 91       	pop	r31
     79c:	ef 91       	pop	r30
     79e:	9f 91       	pop	r25
     7a0:	8f 91       	pop	r24
     7a2:	2f 91       	pop	r18
     7a4:	0f 90       	pop	r0
     7a6:	0f be       	out	0x3f, r0	; 63
     7a8:	0f 90       	pop	r0
     7aa:	1f 90       	pop	r1
     7ac:	18 95       	reti

000007ae <__vector_18>:
//Usart receive interrupt
ISR(USART_RX_vect)
{
     7ae:	1f 92       	push	r1
     7b0:	0f 92       	push	r0
     7b2:	0f b6       	in	r0, 0x3f	; 63
     7b4:	0f 92       	push	r0
     7b6:	11 24       	eor	r1, r1
     7b8:	2f 93       	push	r18
     7ba:	8f 93       	push	r24
     7bc:	9f 93       	push	r25
     7be:	ef 93       	push	r30
     7c0:	ff 93       	push	r31
	//place char into buffer
	*incomming_data_head = UDR0;	//Read from UDR gets RX byte
     7c2:	e0 91 04 01 	lds	r30, 0x0104
     7c6:	f0 91 05 01 	lds	r31, 0x0105
     7ca:	80 91 c6 00 	lds	r24, 0x00C6
     7ce:	80 83       	st	Z, r24
	
	//increase head
	incomming_data_head++;
     7d0:	80 91 04 01 	lds	r24, 0x0104
     7d4:	90 91 05 01 	lds	r25, 0x0105
     7d8:	01 96       	adiw	r24, 0x01	; 1
	
	
	//Check for overflow head
	if (incomming_data_head >= (incomming_data + USART_RX_BUFFER_SIZE))
     7da:	21 e0       	ldi	r18, 0x01	; 1
     7dc:	80 3a       	cpi	r24, 0xA0	; 160
     7de:	92 07       	cpc	r25, r18
     7e0:	28 f4       	brcc	.+10     	; 0x7ec <__vector_18+0x3e>
{
	//place char into buffer
	*incomming_data_head = UDR0;	//Read from UDR gets RX byte
	
	//increase head
	incomming_data_head++;
     7e2:	90 93 05 01 	sts	0x0105, r25
     7e6:	80 93 04 01 	sts	0x0104, r24
     7ea:	06 c0       	rjmp	.+12     	; 0x7f8 <__vector_18+0x4a>
	
	//Check for overflow head
	if (incomming_data_head >= (incomming_data + USART_RX_BUFFER_SIZE))
	{
		//End of ring, go around
		incomming_data_head = incomming_data;
     7ec:	8c e3       	ldi	r24, 0x3C	; 60
     7ee:	91 e0       	ldi	r25, 0x01	; 1
     7f0:	90 93 05 01 	sts	0x0105, r25
     7f4:	80 93 04 01 	sts	0x0104, r24
	}
	//Check for overflow counter
	if(incomming_data_counter < USART_RX_BUFFER_SIZE)
     7f8:	80 91 28 01 	lds	r24, 0x0128
     7fc:	84 36       	cpi	r24, 0x64	; 100
     7fe:	28 f4       	brcc	.+10     	; 0x80a <__vector_18+0x5c>
	{
		incomming_data_counter++;
     800:	80 91 28 01 	lds	r24, 0x0128
     804:	8f 5f       	subi	r24, 0xFF	; 255
     806:	80 93 28 01 	sts	0x0128, r24
	}
}
     80a:	ff 91       	pop	r31
     80c:	ef 91       	pop	r30
     80e:	9f 91       	pop	r25
     810:	8f 91       	pop	r24
     812:	2f 91       	pop	r18
     814:	0f 90       	pop	r0
     816:	0f be       	out	0x3f, r0	; 63
     818:	0f 90       	pop	r0
     81a:	1f 90       	pop	r1
     81c:	18 95       	reti

0000081e <ReceiveByte>:

/* Read and write functions */
char ReceiveByte(char * result)
{
	get_lock();
     81e:	f8 94       	cli
	//If we have data
	if (incomming_data_counter > 0)
     820:	20 91 28 01 	lds	r18, 0x0128
     824:	22 23       	and	r18, r18
     826:	c9 f0       	breq	.+50     	; 0x85a <ReceiveByte+0x3c>
	{
		//Assign pointer to data 
		//Read buffer in reverse because we add positive
		volatile char * temp = incomming_data_head - incomming_data_counter;
     828:	20 91 28 01 	lds	r18, 0x0128
     82c:	e0 91 04 01 	lds	r30, 0x0104
     830:	f0 91 05 01 	lds	r31, 0x0105
     834:	e2 1b       	sub	r30, r18
     836:	f1 09       	sbc	r31, r1
		
		//Check pointer for overflow
		if (temp < incomming_data )
     838:	21 e0       	ldi	r18, 0x01	; 1
     83a:	ec 33       	cpi	r30, 0x3C	; 60
     83c:	f2 07       	cpc	r31, r18
     83e:	10 f4       	brcc	.+4      	; 0x844 <ReceiveByte+0x26>
		{
			temp += USART_RX_BUFFER_SIZE;	//Wrap around
     840:	ec 59       	subi	r30, 0x9C	; 156
     842:	ff 4f       	sbci	r31, 0xFF	; 255
		}
		//Decrease counter
		incomming_data_counter--;
     844:	20 91 28 01 	lds	r18, 0x0128
     848:	21 50       	subi	r18, 0x01	; 1
     84a:	20 93 28 01 	sts	0x0128, r18

		//return that data
		*result = *temp;
     84e:	20 81       	ld	r18, Z
     850:	fc 01       	movw	r30, r24
     852:	20 83       	st	Z, r18
		release_lock();
     854:	78 94       	sei
		
		return 1;
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	08 95       	ret
	} 
	else
	{
		//Else fail
		release_lock();
     85a:	78 94       	sei
		return 0;								// return the data
     85c:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     85e:	08 95       	ret

00000860 <send_c>:
	return temp;
}

void send_c(char c)
{
	get_lock();
     860:	f8 94       	cli
	//Check if there is space in the buffer
	if (outgoing_data_counter < USART_TX_BUFFER_SIZE)
     862:	90 91 29 01 	lds	r25, 0x0129
     866:	94 36       	cpi	r25, 0x64	; 100
     868:	c8 f4       	brcc	.+50     	; 0x89c <send_c+0x3c>
	{
		volatile char * temp = (outgoing_data_head + outgoing_data_counter);
     86a:	90 91 29 01 	lds	r25, 0x0129
     86e:	e0 91 06 01 	lds	r30, 0x0106
     872:	f0 91 07 01 	lds	r31, 0x0107
     876:	e9 0f       	add	r30, r25
     878:	f1 1d       	adc	r31, r1
	
		//Check for overflow
		if (temp >= (outgoing_data + USART_TX_BUFFER_SIZE))
     87a:	92 e0       	ldi	r25, 0x02	; 2
     87c:	e4 30       	cpi	r30, 0x04	; 4
     87e:	f9 07       	cpc	r31, r25
     880:	10 f0       	brcs	.+4      	; 0x886 <send_c+0x26>
		{
			temp -= USART_TX_BUFFER_SIZE;
     882:	e4 56       	subi	r30, 0x64	; 100
     884:	f1 09       	sbc	r31, r1
		}

		*temp = c;		//add to queue
     886:	80 83       	st	Z, r24
		outgoing_data_counter++;
     888:	80 91 29 01 	lds	r24, 0x0129
     88c:	8f 5f       	subi	r24, 0xFF	; 255
     88e:	80 93 29 01 	sts	0x0129, r24
		//Activate TX interrupt
		UCSR0B |= (1 << UDRIE0);
     892:	e1 ec       	ldi	r30, 0xC1	; 193
     894:	f0 e0       	ldi	r31, 0x00	; 0
     896:	80 81       	ld	r24, Z
     898:	80 62       	ori	r24, 0x20	; 32
     89a:	80 83       	st	Z, r24
	}
	release_lock();
     89c:	78 94       	sei
     89e:	08 95       	ret

000008a0 <send_string>:
}

int8_t send_string(char data[], uint8_t length)
{
     8a0:	0f 93       	push	r16
     8a2:	1f 93       	push	r17
     8a4:	cf 93       	push	r28
     8a6:	df 93       	push	r29
     8a8:	06 2f       	mov	r16, r22
	if (data == 0)	//Check for valid pointer
     8aa:	00 97       	sbiw	r24, 0x00	; 0
     8ac:	99 f0       	breq	.+38     	; 0x8d4 <send_string+0x34>
	{
		return -1;
	}
	//Check for space in buffer
	if ((length + outgoing_data_counter )>= USART_TX_BUFFER_SIZE)
     8ae:	20 91 29 01 	lds	r18, 0x0129
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	26 0f       	add	r18, r22
     8b6:	31 1d       	adc	r19, r1
     8b8:	24 36       	cpi	r18, 0x64	; 100
     8ba:	31 05       	cpc	r19, r1
     8bc:	6c f4       	brge	.+26     	; 0x8d8 <send_string+0x38>
	{
		return -2;
	}
	//All good, add to buffer
	for (uint8_t i = 0; i < length; i++ )
     8be:	66 23       	and	r22, r22
     8c0:	69 f0       	breq	.+26     	; 0x8dc <send_string+0x3c>
     8c2:	ec 01       	movw	r28, r24
     8c4:	10 e0       	ldi	r17, 0x00	; 0
	{
		send_c(data[i]);
     8c6:	89 91       	ld	r24, Y+
     8c8:	0e 94 30 04 	call	0x860	; 0x860 <send_c>
	if ((length + outgoing_data_counter )>= USART_TX_BUFFER_SIZE)
	{
		return -2;
	}
	//All good, add to buffer
	for (uint8_t i = 0; i < length; i++ )
     8cc:	1f 5f       	subi	r17, 0xFF	; 255
     8ce:	10 13       	cpse	r17, r16
     8d0:	fa cf       	rjmp	.-12     	; 0x8c6 <send_string+0x26>
     8d2:	06 c0       	rjmp	.+12     	; 0x8e0 <send_string+0x40>

int8_t send_string(char data[], uint8_t length)
{
	if (data == 0)	//Check for valid pointer
	{
		return -1;
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	05 c0       	rjmp	.+10     	; 0x8e2 <send_string+0x42>
	}
	//Check for space in buffer
	if ((length + outgoing_data_counter )>= USART_TX_BUFFER_SIZE)
	{
		return -2;
     8d8:	8e ef       	ldi	r24, 0xFE	; 254
     8da:	03 c0       	rjmp	.+6      	; 0x8e2 <send_string+0x42>
	for (uint8_t i = 0; i < length; i++ )
	{
		send_c(data[i]);
	}
	
	return 0;
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	01 c0       	rjmp	.+2      	; 0x8e2 <send_string+0x42>
     8e0:	80 e0       	ldi	r24, 0x00	; 0
} 
     8e2:	df 91       	pop	r29
     8e4:	cf 91       	pop	r28
     8e6:	1f 91       	pop	r17
     8e8:	0f 91       	pop	r16
     8ea:	08 95       	ret

000008ec <flush_usart>:

void flush_usart()
{
	//Wait for empty buffer
	while(outgoing_data_counter){}
     8ec:	80 91 29 01 	lds	r24, 0x0129
     8f0:	81 11       	cpse	r24, r1
     8f2:	fc cf       	rjmp	.-8      	; 0x8ec <flush_usart>
}
     8f4:	08 95       	ret

000008f6 <__subsf3>:
     8f6:	50 58       	subi	r21, 0x80	; 128

000008f8 <__addsf3>:
     8f8:	bb 27       	eor	r27, r27
     8fa:	aa 27       	eor	r26, r26
     8fc:	0e d0       	rcall	.+28     	; 0x91a <__addsf3x>
     8fe:	48 c1       	rjmp	.+656    	; 0xb90 <__fp_round>
     900:	39 d1       	rcall	.+626    	; 0xb74 <__fp_pscA>
     902:	30 f0       	brcs	.+12     	; 0x910 <__stack+0x11>
     904:	3e d1       	rcall	.+636    	; 0xb82 <__fp_pscB>
     906:	20 f0       	brcs	.+8      	; 0x910 <__stack+0x11>
     908:	31 f4       	brne	.+12     	; 0x916 <__stack+0x17>
     90a:	9f 3f       	cpi	r25, 0xFF	; 255
     90c:	11 f4       	brne	.+4      	; 0x912 <__stack+0x13>
     90e:	1e f4       	brtc	.+6      	; 0x916 <__stack+0x17>
     910:	2e c1       	rjmp	.+604    	; 0xb6e <__fp_nan>
     912:	0e f4       	brtc	.+2      	; 0x916 <__stack+0x17>
     914:	e0 95       	com	r30
     916:	e7 fb       	bst	r30, 7
     918:	24 c1       	rjmp	.+584    	; 0xb62 <__fp_inf>

0000091a <__addsf3x>:
     91a:	e9 2f       	mov	r30, r25
     91c:	4a d1       	rcall	.+660    	; 0xbb2 <__fp_split3>
     91e:	80 f3       	brcs	.-32     	; 0x900 <__stack+0x1>
     920:	ba 17       	cp	r27, r26
     922:	62 07       	cpc	r22, r18
     924:	73 07       	cpc	r23, r19
     926:	84 07       	cpc	r24, r20
     928:	95 07       	cpc	r25, r21
     92a:	18 f0       	brcs	.+6      	; 0x932 <__addsf3x+0x18>
     92c:	71 f4       	brne	.+28     	; 0x94a <__addsf3x+0x30>
     92e:	9e f5       	brtc	.+102    	; 0x996 <__addsf3x+0x7c>
     930:	62 c1       	rjmp	.+708    	; 0xbf6 <__fp_zero>
     932:	0e f4       	brtc	.+2      	; 0x936 <__addsf3x+0x1c>
     934:	e0 95       	com	r30
     936:	0b 2e       	mov	r0, r27
     938:	ba 2f       	mov	r27, r26
     93a:	a0 2d       	mov	r26, r0
     93c:	0b 01       	movw	r0, r22
     93e:	b9 01       	movw	r22, r18
     940:	90 01       	movw	r18, r0
     942:	0c 01       	movw	r0, r24
     944:	ca 01       	movw	r24, r20
     946:	a0 01       	movw	r20, r0
     948:	11 24       	eor	r1, r1
     94a:	ff 27       	eor	r31, r31
     94c:	59 1b       	sub	r21, r25
     94e:	99 f0       	breq	.+38     	; 0x976 <__addsf3x+0x5c>
     950:	59 3f       	cpi	r21, 0xF9	; 249
     952:	50 f4       	brcc	.+20     	; 0x968 <__addsf3x+0x4e>
     954:	50 3e       	cpi	r21, 0xE0	; 224
     956:	68 f1       	brcs	.+90     	; 0x9b2 <__addsf3x+0x98>
     958:	1a 16       	cp	r1, r26
     95a:	f0 40       	sbci	r31, 0x00	; 0
     95c:	a2 2f       	mov	r26, r18
     95e:	23 2f       	mov	r18, r19
     960:	34 2f       	mov	r19, r20
     962:	44 27       	eor	r20, r20
     964:	58 5f       	subi	r21, 0xF8	; 248
     966:	f3 cf       	rjmp	.-26     	; 0x94e <__addsf3x+0x34>
     968:	46 95       	lsr	r20
     96a:	37 95       	ror	r19
     96c:	27 95       	ror	r18
     96e:	a7 95       	ror	r26
     970:	f0 40       	sbci	r31, 0x00	; 0
     972:	53 95       	inc	r21
     974:	c9 f7       	brne	.-14     	; 0x968 <__addsf3x+0x4e>
     976:	7e f4       	brtc	.+30     	; 0x996 <__addsf3x+0x7c>
     978:	1f 16       	cp	r1, r31
     97a:	ba 0b       	sbc	r27, r26
     97c:	62 0b       	sbc	r22, r18
     97e:	73 0b       	sbc	r23, r19
     980:	84 0b       	sbc	r24, r20
     982:	ba f0       	brmi	.+46     	; 0x9b2 <__addsf3x+0x98>
     984:	91 50       	subi	r25, 0x01	; 1
     986:	a1 f0       	breq	.+40     	; 0x9b0 <__addsf3x+0x96>
     988:	ff 0f       	add	r31, r31
     98a:	bb 1f       	adc	r27, r27
     98c:	66 1f       	adc	r22, r22
     98e:	77 1f       	adc	r23, r23
     990:	88 1f       	adc	r24, r24
     992:	c2 f7       	brpl	.-16     	; 0x984 <__addsf3x+0x6a>
     994:	0e c0       	rjmp	.+28     	; 0x9b2 <__addsf3x+0x98>
     996:	ba 0f       	add	r27, r26
     998:	62 1f       	adc	r22, r18
     99a:	73 1f       	adc	r23, r19
     99c:	84 1f       	adc	r24, r20
     99e:	48 f4       	brcc	.+18     	; 0x9b2 <__addsf3x+0x98>
     9a0:	87 95       	ror	r24
     9a2:	77 95       	ror	r23
     9a4:	67 95       	ror	r22
     9a6:	b7 95       	ror	r27
     9a8:	f7 95       	ror	r31
     9aa:	9e 3f       	cpi	r25, 0xFE	; 254
     9ac:	08 f0       	brcs	.+2      	; 0x9b0 <__addsf3x+0x96>
     9ae:	b3 cf       	rjmp	.-154    	; 0x916 <__stack+0x17>
     9b0:	93 95       	inc	r25
     9b2:	88 0f       	add	r24, r24
     9b4:	08 f0       	brcs	.+2      	; 0x9b8 <__addsf3x+0x9e>
     9b6:	99 27       	eor	r25, r25
     9b8:	ee 0f       	add	r30, r30
     9ba:	97 95       	ror	r25
     9bc:	87 95       	ror	r24
     9be:	08 95       	ret

000009c0 <__divsf3>:
     9c0:	0c d0       	rcall	.+24     	; 0x9da <__divsf3x>
     9c2:	e6 c0       	rjmp	.+460    	; 0xb90 <__fp_round>
     9c4:	de d0       	rcall	.+444    	; 0xb82 <__fp_pscB>
     9c6:	40 f0       	brcs	.+16     	; 0x9d8 <__divsf3+0x18>
     9c8:	d5 d0       	rcall	.+426    	; 0xb74 <__fp_pscA>
     9ca:	30 f0       	brcs	.+12     	; 0x9d8 <__divsf3+0x18>
     9cc:	21 f4       	brne	.+8      	; 0x9d6 <__divsf3+0x16>
     9ce:	5f 3f       	cpi	r21, 0xFF	; 255
     9d0:	19 f0       	breq	.+6      	; 0x9d8 <__divsf3+0x18>
     9d2:	c7 c0       	rjmp	.+398    	; 0xb62 <__fp_inf>
     9d4:	51 11       	cpse	r21, r1
     9d6:	10 c1       	rjmp	.+544    	; 0xbf8 <__fp_szero>
     9d8:	ca c0       	rjmp	.+404    	; 0xb6e <__fp_nan>

000009da <__divsf3x>:
     9da:	eb d0       	rcall	.+470    	; 0xbb2 <__fp_split3>
     9dc:	98 f3       	brcs	.-26     	; 0x9c4 <__divsf3+0x4>

000009de <__divsf3_pse>:
     9de:	99 23       	and	r25, r25
     9e0:	c9 f3       	breq	.-14     	; 0x9d4 <__divsf3+0x14>
     9e2:	55 23       	and	r21, r21
     9e4:	b1 f3       	breq	.-20     	; 0x9d2 <__divsf3+0x12>
     9e6:	95 1b       	sub	r25, r21
     9e8:	55 0b       	sbc	r21, r21
     9ea:	bb 27       	eor	r27, r27
     9ec:	aa 27       	eor	r26, r26
     9ee:	62 17       	cp	r22, r18
     9f0:	73 07       	cpc	r23, r19
     9f2:	84 07       	cpc	r24, r20
     9f4:	38 f0       	brcs	.+14     	; 0xa04 <__divsf3_pse+0x26>
     9f6:	9f 5f       	subi	r25, 0xFF	; 255
     9f8:	5f 4f       	sbci	r21, 0xFF	; 255
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	aa 1f       	adc	r26, r26
     a02:	a9 f3       	breq	.-22     	; 0x9ee <__divsf3_pse+0x10>
     a04:	33 d0       	rcall	.+102    	; 0xa6c <__divsf3_pse+0x8e>
     a06:	0e 2e       	mov	r0, r30
     a08:	3a f0       	brmi	.+14     	; 0xa18 <__divsf3_pse+0x3a>
     a0a:	e0 e8       	ldi	r30, 0x80	; 128
     a0c:	30 d0       	rcall	.+96     	; 0xa6e <__divsf3_pse+0x90>
     a0e:	91 50       	subi	r25, 0x01	; 1
     a10:	50 40       	sbci	r21, 0x00	; 0
     a12:	e6 95       	lsr	r30
     a14:	00 1c       	adc	r0, r0
     a16:	ca f7       	brpl	.-14     	; 0xa0a <__divsf3_pse+0x2c>
     a18:	29 d0       	rcall	.+82     	; 0xa6c <__divsf3_pse+0x8e>
     a1a:	fe 2f       	mov	r31, r30
     a1c:	27 d0       	rcall	.+78     	; 0xa6c <__divsf3_pse+0x8e>
     a1e:	66 0f       	add	r22, r22
     a20:	77 1f       	adc	r23, r23
     a22:	88 1f       	adc	r24, r24
     a24:	bb 1f       	adc	r27, r27
     a26:	26 17       	cp	r18, r22
     a28:	37 07       	cpc	r19, r23
     a2a:	48 07       	cpc	r20, r24
     a2c:	ab 07       	cpc	r26, r27
     a2e:	b0 e8       	ldi	r27, 0x80	; 128
     a30:	09 f0       	breq	.+2      	; 0xa34 <__divsf3_pse+0x56>
     a32:	bb 0b       	sbc	r27, r27
     a34:	80 2d       	mov	r24, r0
     a36:	bf 01       	movw	r22, r30
     a38:	ff 27       	eor	r31, r31
     a3a:	93 58       	subi	r25, 0x83	; 131
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	2a f0       	brmi	.+10     	; 0xa4a <__divsf3_pse+0x6c>
     a40:	9e 3f       	cpi	r25, 0xFE	; 254
     a42:	51 05       	cpc	r21, r1
     a44:	68 f0       	brcs	.+26     	; 0xa60 <__divsf3_pse+0x82>
     a46:	8d c0       	rjmp	.+282    	; 0xb62 <__fp_inf>
     a48:	d7 c0       	rjmp	.+430    	; 0xbf8 <__fp_szero>
     a4a:	5f 3f       	cpi	r21, 0xFF	; 255
     a4c:	ec f3       	brlt	.-6      	; 0xa48 <__divsf3_pse+0x6a>
     a4e:	98 3e       	cpi	r25, 0xE8	; 232
     a50:	dc f3       	brlt	.-10     	; 0xa48 <__divsf3_pse+0x6a>
     a52:	86 95       	lsr	r24
     a54:	77 95       	ror	r23
     a56:	67 95       	ror	r22
     a58:	b7 95       	ror	r27
     a5a:	f7 95       	ror	r31
     a5c:	9f 5f       	subi	r25, 0xFF	; 255
     a5e:	c9 f7       	brne	.-14     	; 0xa52 <__divsf3_pse+0x74>
     a60:	88 0f       	add	r24, r24
     a62:	91 1d       	adc	r25, r1
     a64:	96 95       	lsr	r25
     a66:	87 95       	ror	r24
     a68:	97 f9       	bld	r25, 7
     a6a:	08 95       	ret
     a6c:	e1 e0       	ldi	r30, 0x01	; 1
     a6e:	66 0f       	add	r22, r22
     a70:	77 1f       	adc	r23, r23
     a72:	88 1f       	adc	r24, r24
     a74:	bb 1f       	adc	r27, r27
     a76:	62 17       	cp	r22, r18
     a78:	73 07       	cpc	r23, r19
     a7a:	84 07       	cpc	r24, r20
     a7c:	ba 07       	cpc	r27, r26
     a7e:	20 f0       	brcs	.+8      	; 0xa88 <__divsf3_pse+0xaa>
     a80:	62 1b       	sub	r22, r18
     a82:	73 0b       	sbc	r23, r19
     a84:	84 0b       	sbc	r24, r20
     a86:	ba 0b       	sbc	r27, r26
     a88:	ee 1f       	adc	r30, r30
     a8a:	88 f7       	brcc	.-30     	; 0xa6e <__divsf3_pse+0x90>
     a8c:	e0 95       	com	r30
     a8e:	08 95       	ret

00000a90 <__fixunssfsi>:
     a90:	98 d0       	rcall	.+304    	; 0xbc2 <__fp_splitA>
     a92:	88 f0       	brcs	.+34     	; 0xab6 <__fixunssfsi+0x26>
     a94:	9f 57       	subi	r25, 0x7F	; 127
     a96:	90 f0       	brcs	.+36     	; 0xabc <__fixunssfsi+0x2c>
     a98:	b9 2f       	mov	r27, r25
     a9a:	99 27       	eor	r25, r25
     a9c:	b7 51       	subi	r27, 0x17	; 23
     a9e:	a0 f0       	brcs	.+40     	; 0xac8 <__fixunssfsi+0x38>
     aa0:	d1 f0       	breq	.+52     	; 0xad6 <__fixunssfsi+0x46>
     aa2:	66 0f       	add	r22, r22
     aa4:	77 1f       	adc	r23, r23
     aa6:	88 1f       	adc	r24, r24
     aa8:	99 1f       	adc	r25, r25
     aaa:	1a f0       	brmi	.+6      	; 0xab2 <__fixunssfsi+0x22>
     aac:	ba 95       	dec	r27
     aae:	c9 f7       	brne	.-14     	; 0xaa2 <__fixunssfsi+0x12>
     ab0:	12 c0       	rjmp	.+36     	; 0xad6 <__fixunssfsi+0x46>
     ab2:	b1 30       	cpi	r27, 0x01	; 1
     ab4:	81 f0       	breq	.+32     	; 0xad6 <__fixunssfsi+0x46>
     ab6:	9f d0       	rcall	.+318    	; 0xbf6 <__fp_zero>
     ab8:	b1 e0       	ldi	r27, 0x01	; 1
     aba:	08 95       	ret
     abc:	9c c0       	rjmp	.+312    	; 0xbf6 <__fp_zero>
     abe:	67 2f       	mov	r22, r23
     ac0:	78 2f       	mov	r23, r24
     ac2:	88 27       	eor	r24, r24
     ac4:	b8 5f       	subi	r27, 0xF8	; 248
     ac6:	39 f0       	breq	.+14     	; 0xad6 <__fixunssfsi+0x46>
     ac8:	b9 3f       	cpi	r27, 0xF9	; 249
     aca:	cc f3       	brlt	.-14     	; 0xabe <__fixunssfsi+0x2e>
     acc:	86 95       	lsr	r24
     ace:	77 95       	ror	r23
     ad0:	67 95       	ror	r22
     ad2:	b3 95       	inc	r27
     ad4:	d9 f7       	brne	.-10     	; 0xacc <__fixunssfsi+0x3c>
     ad6:	3e f4       	brtc	.+14     	; 0xae6 <__fixunssfsi+0x56>
     ad8:	90 95       	com	r25
     ada:	80 95       	com	r24
     adc:	70 95       	com	r23
     ade:	61 95       	neg	r22
     ae0:	7f 4f       	sbci	r23, 0xFF	; 255
     ae2:	8f 4f       	sbci	r24, 0xFF	; 255
     ae4:	9f 4f       	sbci	r25, 0xFF	; 255
     ae6:	08 95       	ret

00000ae8 <__floatunsisf>:
     ae8:	e8 94       	clt
     aea:	09 c0       	rjmp	.+18     	; 0xafe <__floatsisf+0x12>

00000aec <__floatsisf>:
     aec:	97 fb       	bst	r25, 7
     aee:	3e f4       	brtc	.+14     	; 0xafe <__floatsisf+0x12>
     af0:	90 95       	com	r25
     af2:	80 95       	com	r24
     af4:	70 95       	com	r23
     af6:	61 95       	neg	r22
     af8:	7f 4f       	sbci	r23, 0xFF	; 255
     afa:	8f 4f       	sbci	r24, 0xFF	; 255
     afc:	9f 4f       	sbci	r25, 0xFF	; 255
     afe:	99 23       	and	r25, r25
     b00:	a9 f0       	breq	.+42     	; 0xb2c <__floatsisf+0x40>
     b02:	f9 2f       	mov	r31, r25
     b04:	96 e9       	ldi	r25, 0x96	; 150
     b06:	bb 27       	eor	r27, r27
     b08:	93 95       	inc	r25
     b0a:	f6 95       	lsr	r31
     b0c:	87 95       	ror	r24
     b0e:	77 95       	ror	r23
     b10:	67 95       	ror	r22
     b12:	b7 95       	ror	r27
     b14:	f1 11       	cpse	r31, r1
     b16:	f8 cf       	rjmp	.-16     	; 0xb08 <__floatsisf+0x1c>
     b18:	fa f4       	brpl	.+62     	; 0xb58 <__floatsisf+0x6c>
     b1a:	bb 0f       	add	r27, r27
     b1c:	11 f4       	brne	.+4      	; 0xb22 <__floatsisf+0x36>
     b1e:	60 ff       	sbrs	r22, 0
     b20:	1b c0       	rjmp	.+54     	; 0xb58 <__floatsisf+0x6c>
     b22:	6f 5f       	subi	r22, 0xFF	; 255
     b24:	7f 4f       	sbci	r23, 0xFF	; 255
     b26:	8f 4f       	sbci	r24, 0xFF	; 255
     b28:	9f 4f       	sbci	r25, 0xFF	; 255
     b2a:	16 c0       	rjmp	.+44     	; 0xb58 <__floatsisf+0x6c>
     b2c:	88 23       	and	r24, r24
     b2e:	11 f0       	breq	.+4      	; 0xb34 <__floatsisf+0x48>
     b30:	96 e9       	ldi	r25, 0x96	; 150
     b32:	11 c0       	rjmp	.+34     	; 0xb56 <__floatsisf+0x6a>
     b34:	77 23       	and	r23, r23
     b36:	21 f0       	breq	.+8      	; 0xb40 <__floatsisf+0x54>
     b38:	9e e8       	ldi	r25, 0x8E	; 142
     b3a:	87 2f       	mov	r24, r23
     b3c:	76 2f       	mov	r23, r22
     b3e:	05 c0       	rjmp	.+10     	; 0xb4a <__floatsisf+0x5e>
     b40:	66 23       	and	r22, r22
     b42:	71 f0       	breq	.+28     	; 0xb60 <__floatsisf+0x74>
     b44:	96 e8       	ldi	r25, 0x86	; 134
     b46:	86 2f       	mov	r24, r22
     b48:	70 e0       	ldi	r23, 0x00	; 0
     b4a:	60 e0       	ldi	r22, 0x00	; 0
     b4c:	2a f0       	brmi	.+10     	; 0xb58 <__floatsisf+0x6c>
     b4e:	9a 95       	dec	r25
     b50:	66 0f       	add	r22, r22
     b52:	77 1f       	adc	r23, r23
     b54:	88 1f       	adc	r24, r24
     b56:	da f7       	brpl	.-10     	; 0xb4e <__floatsisf+0x62>
     b58:	88 0f       	add	r24, r24
     b5a:	96 95       	lsr	r25
     b5c:	87 95       	ror	r24
     b5e:	97 f9       	bld	r25, 7
     b60:	08 95       	ret

00000b62 <__fp_inf>:
     b62:	97 f9       	bld	r25, 7
     b64:	9f 67       	ori	r25, 0x7F	; 127
     b66:	80 e8       	ldi	r24, 0x80	; 128
     b68:	70 e0       	ldi	r23, 0x00	; 0
     b6a:	60 e0       	ldi	r22, 0x00	; 0
     b6c:	08 95       	ret

00000b6e <__fp_nan>:
     b6e:	9f ef       	ldi	r25, 0xFF	; 255
     b70:	80 ec       	ldi	r24, 0xC0	; 192
     b72:	08 95       	ret

00000b74 <__fp_pscA>:
     b74:	00 24       	eor	r0, r0
     b76:	0a 94       	dec	r0
     b78:	16 16       	cp	r1, r22
     b7a:	17 06       	cpc	r1, r23
     b7c:	18 06       	cpc	r1, r24
     b7e:	09 06       	cpc	r0, r25
     b80:	08 95       	ret

00000b82 <__fp_pscB>:
     b82:	00 24       	eor	r0, r0
     b84:	0a 94       	dec	r0
     b86:	12 16       	cp	r1, r18
     b88:	13 06       	cpc	r1, r19
     b8a:	14 06       	cpc	r1, r20
     b8c:	05 06       	cpc	r0, r21
     b8e:	08 95       	ret

00000b90 <__fp_round>:
     b90:	09 2e       	mov	r0, r25
     b92:	03 94       	inc	r0
     b94:	00 0c       	add	r0, r0
     b96:	11 f4       	brne	.+4      	; 0xb9c <__fp_round+0xc>
     b98:	88 23       	and	r24, r24
     b9a:	52 f0       	brmi	.+20     	; 0xbb0 <__fp_round+0x20>
     b9c:	bb 0f       	add	r27, r27
     b9e:	40 f4       	brcc	.+16     	; 0xbb0 <__fp_round+0x20>
     ba0:	bf 2b       	or	r27, r31
     ba2:	11 f4       	brne	.+4      	; 0xba8 <__fp_round+0x18>
     ba4:	60 ff       	sbrs	r22, 0
     ba6:	04 c0       	rjmp	.+8      	; 0xbb0 <__fp_round+0x20>
     ba8:	6f 5f       	subi	r22, 0xFF	; 255
     baa:	7f 4f       	sbci	r23, 0xFF	; 255
     bac:	8f 4f       	sbci	r24, 0xFF	; 255
     bae:	9f 4f       	sbci	r25, 0xFF	; 255
     bb0:	08 95       	ret

00000bb2 <__fp_split3>:
     bb2:	57 fd       	sbrc	r21, 7
     bb4:	90 58       	subi	r25, 0x80	; 128
     bb6:	44 0f       	add	r20, r20
     bb8:	55 1f       	adc	r21, r21
     bba:	59 f0       	breq	.+22     	; 0xbd2 <__fp_splitA+0x10>
     bbc:	5f 3f       	cpi	r21, 0xFF	; 255
     bbe:	71 f0       	breq	.+28     	; 0xbdc <__fp_splitA+0x1a>
     bc0:	47 95       	ror	r20

00000bc2 <__fp_splitA>:
     bc2:	88 0f       	add	r24, r24
     bc4:	97 fb       	bst	r25, 7
     bc6:	99 1f       	adc	r25, r25
     bc8:	61 f0       	breq	.+24     	; 0xbe2 <__fp_splitA+0x20>
     bca:	9f 3f       	cpi	r25, 0xFF	; 255
     bcc:	79 f0       	breq	.+30     	; 0xbec <__fp_splitA+0x2a>
     bce:	87 95       	ror	r24
     bd0:	08 95       	ret
     bd2:	12 16       	cp	r1, r18
     bd4:	13 06       	cpc	r1, r19
     bd6:	14 06       	cpc	r1, r20
     bd8:	55 1f       	adc	r21, r21
     bda:	f2 cf       	rjmp	.-28     	; 0xbc0 <__fp_split3+0xe>
     bdc:	46 95       	lsr	r20
     bde:	f1 df       	rcall	.-30     	; 0xbc2 <__fp_splitA>
     be0:	08 c0       	rjmp	.+16     	; 0xbf2 <__fp_splitA+0x30>
     be2:	16 16       	cp	r1, r22
     be4:	17 06       	cpc	r1, r23
     be6:	18 06       	cpc	r1, r24
     be8:	99 1f       	adc	r25, r25
     bea:	f1 cf       	rjmp	.-30     	; 0xbce <__fp_splitA+0xc>
     bec:	86 95       	lsr	r24
     bee:	71 05       	cpc	r23, r1
     bf0:	61 05       	cpc	r22, r1
     bf2:	08 94       	sec
     bf4:	08 95       	ret

00000bf6 <__fp_zero>:
     bf6:	e8 94       	clt

00000bf8 <__fp_szero>:
     bf8:	bb 27       	eor	r27, r27
     bfa:	66 27       	eor	r22, r22
     bfc:	77 27       	eor	r23, r23
     bfe:	cb 01       	movw	r24, r22
     c00:	97 f9       	bld	r25, 7
     c02:	08 95       	ret

00000c04 <__mulsf3>:
     c04:	0b d0       	rcall	.+22     	; 0xc1c <__mulsf3x>
     c06:	c4 cf       	rjmp	.-120    	; 0xb90 <__fp_round>
     c08:	b5 df       	rcall	.-150    	; 0xb74 <__fp_pscA>
     c0a:	28 f0       	brcs	.+10     	; 0xc16 <__mulsf3+0x12>
     c0c:	ba df       	rcall	.-140    	; 0xb82 <__fp_pscB>
     c0e:	18 f0       	brcs	.+6      	; 0xc16 <__mulsf3+0x12>
     c10:	95 23       	and	r25, r21
     c12:	09 f0       	breq	.+2      	; 0xc16 <__mulsf3+0x12>
     c14:	a6 cf       	rjmp	.-180    	; 0xb62 <__fp_inf>
     c16:	ab cf       	rjmp	.-170    	; 0xb6e <__fp_nan>
     c18:	11 24       	eor	r1, r1
     c1a:	ee cf       	rjmp	.-36     	; 0xbf8 <__fp_szero>

00000c1c <__mulsf3x>:
     c1c:	ca df       	rcall	.-108    	; 0xbb2 <__fp_split3>
     c1e:	a0 f3       	brcs	.-24     	; 0xc08 <__mulsf3+0x4>

00000c20 <__mulsf3_pse>:
     c20:	95 9f       	mul	r25, r21
     c22:	d1 f3       	breq	.-12     	; 0xc18 <__mulsf3+0x14>
     c24:	95 0f       	add	r25, r21
     c26:	50 e0       	ldi	r21, 0x00	; 0
     c28:	55 1f       	adc	r21, r21
     c2a:	62 9f       	mul	r22, r18
     c2c:	f0 01       	movw	r30, r0
     c2e:	72 9f       	mul	r23, r18
     c30:	bb 27       	eor	r27, r27
     c32:	f0 0d       	add	r31, r0
     c34:	b1 1d       	adc	r27, r1
     c36:	63 9f       	mul	r22, r19
     c38:	aa 27       	eor	r26, r26
     c3a:	f0 0d       	add	r31, r0
     c3c:	b1 1d       	adc	r27, r1
     c3e:	aa 1f       	adc	r26, r26
     c40:	64 9f       	mul	r22, r20
     c42:	66 27       	eor	r22, r22
     c44:	b0 0d       	add	r27, r0
     c46:	a1 1d       	adc	r26, r1
     c48:	66 1f       	adc	r22, r22
     c4a:	82 9f       	mul	r24, r18
     c4c:	22 27       	eor	r18, r18
     c4e:	b0 0d       	add	r27, r0
     c50:	a1 1d       	adc	r26, r1
     c52:	62 1f       	adc	r22, r18
     c54:	73 9f       	mul	r23, r19
     c56:	b0 0d       	add	r27, r0
     c58:	a1 1d       	adc	r26, r1
     c5a:	62 1f       	adc	r22, r18
     c5c:	83 9f       	mul	r24, r19
     c5e:	a0 0d       	add	r26, r0
     c60:	61 1d       	adc	r22, r1
     c62:	22 1f       	adc	r18, r18
     c64:	74 9f       	mul	r23, r20
     c66:	33 27       	eor	r19, r19
     c68:	a0 0d       	add	r26, r0
     c6a:	61 1d       	adc	r22, r1
     c6c:	23 1f       	adc	r18, r19
     c6e:	84 9f       	mul	r24, r20
     c70:	60 0d       	add	r22, r0
     c72:	21 1d       	adc	r18, r1
     c74:	82 2f       	mov	r24, r18
     c76:	76 2f       	mov	r23, r22
     c78:	6a 2f       	mov	r22, r26
     c7a:	11 24       	eor	r1, r1
     c7c:	9f 57       	subi	r25, 0x7F	; 127
     c7e:	50 40       	sbci	r21, 0x00	; 0
     c80:	8a f0       	brmi	.+34     	; 0xca4 <__mulsf3_pse+0x84>
     c82:	e1 f0       	breq	.+56     	; 0xcbc <__mulsf3_pse+0x9c>
     c84:	88 23       	and	r24, r24
     c86:	4a f0       	brmi	.+18     	; 0xc9a <__mulsf3_pse+0x7a>
     c88:	ee 0f       	add	r30, r30
     c8a:	ff 1f       	adc	r31, r31
     c8c:	bb 1f       	adc	r27, r27
     c8e:	66 1f       	adc	r22, r22
     c90:	77 1f       	adc	r23, r23
     c92:	88 1f       	adc	r24, r24
     c94:	91 50       	subi	r25, 0x01	; 1
     c96:	50 40       	sbci	r21, 0x00	; 0
     c98:	a9 f7       	brne	.-22     	; 0xc84 <__mulsf3_pse+0x64>
     c9a:	9e 3f       	cpi	r25, 0xFE	; 254
     c9c:	51 05       	cpc	r21, r1
     c9e:	70 f0       	brcs	.+28     	; 0xcbc <__mulsf3_pse+0x9c>
     ca0:	60 cf       	rjmp	.-320    	; 0xb62 <__fp_inf>
     ca2:	aa cf       	rjmp	.-172    	; 0xbf8 <__fp_szero>
     ca4:	5f 3f       	cpi	r21, 0xFF	; 255
     ca6:	ec f3       	brlt	.-6      	; 0xca2 <__mulsf3_pse+0x82>
     ca8:	98 3e       	cpi	r25, 0xE8	; 232
     caa:	dc f3       	brlt	.-10     	; 0xca2 <__mulsf3_pse+0x82>
     cac:	86 95       	lsr	r24
     cae:	77 95       	ror	r23
     cb0:	67 95       	ror	r22
     cb2:	b7 95       	ror	r27
     cb4:	f7 95       	ror	r31
     cb6:	e7 95       	ror	r30
     cb8:	9f 5f       	subi	r25, 0xFF	; 255
     cba:	c1 f7       	brne	.-16     	; 0xcac <__mulsf3_pse+0x8c>
     cbc:	fe 2b       	or	r31, r30
     cbe:	88 0f       	add	r24, r24
     cc0:	91 1d       	adc	r25, r1
     cc2:	96 95       	lsr	r25
     cc4:	87 95       	ror	r24
     cc6:	97 f9       	bld	r25, 7
     cc8:	08 95       	ret

00000cca <pow>:
     cca:	fa 01       	movw	r30, r20
     ccc:	ee 0f       	add	r30, r30
     cce:	ff 1f       	adc	r31, r31
     cd0:	30 96       	adiw	r30, 0x00	; 0
     cd2:	21 05       	cpc	r18, r1
     cd4:	31 05       	cpc	r19, r1
     cd6:	99 f1       	breq	.+102    	; 0xd3e <pow+0x74>
     cd8:	61 15       	cp	r22, r1
     cda:	71 05       	cpc	r23, r1
     cdc:	61 f4       	brne	.+24     	; 0xcf6 <pow+0x2c>
     cde:	80 38       	cpi	r24, 0x80	; 128
     ce0:	bf e3       	ldi	r27, 0x3F	; 63
     ce2:	9b 07       	cpc	r25, r27
     ce4:	49 f1       	breq	.+82     	; 0xd38 <pow+0x6e>
     ce6:	68 94       	set
     ce8:	90 38       	cpi	r25, 0x80	; 128
     cea:	81 05       	cpc	r24, r1
     cec:	61 f0       	breq	.+24     	; 0xd06 <pow+0x3c>
     cee:	80 38       	cpi	r24, 0x80	; 128
     cf0:	bf ef       	ldi	r27, 0xFF	; 255
     cf2:	9b 07       	cpc	r25, r27
     cf4:	41 f0       	breq	.+16     	; 0xd06 <pow+0x3c>
     cf6:	99 23       	and	r25, r25
     cf8:	42 f5       	brpl	.+80     	; 0xd4a <pow+0x80>
     cfa:	ff 3f       	cpi	r31, 0xFF	; 255
     cfc:	e1 05       	cpc	r30, r1
     cfe:	31 05       	cpc	r19, r1
     d00:	21 05       	cpc	r18, r1
     d02:	11 f1       	breq	.+68     	; 0xd48 <pow+0x7e>
     d04:	e8 94       	clt
     d06:	08 94       	sec
     d08:	e7 95       	ror	r30
     d0a:	d9 01       	movw	r26, r18
     d0c:	aa 23       	and	r26, r26
     d0e:	29 f4       	brne	.+10     	; 0xd1a <pow+0x50>
     d10:	ab 2f       	mov	r26, r27
     d12:	be 2f       	mov	r27, r30
     d14:	f8 5f       	subi	r31, 0xF8	; 248
     d16:	d0 f3       	brcs	.-12     	; 0xd0c <pow+0x42>
     d18:	10 c0       	rjmp	.+32     	; 0xd3a <pow+0x70>
     d1a:	ff 5f       	subi	r31, 0xFF	; 255
     d1c:	70 f4       	brcc	.+28     	; 0xd3a <pow+0x70>
     d1e:	a6 95       	lsr	r26
     d20:	e0 f7       	brcc	.-8      	; 0xd1a <pow+0x50>
     d22:	f7 39       	cpi	r31, 0x97	; 151
     d24:	50 f0       	brcs	.+20     	; 0xd3a <pow+0x70>
     d26:	19 f0       	breq	.+6      	; 0xd2e <pow+0x64>
     d28:	ff 3a       	cpi	r31, 0xAF	; 175
     d2a:	38 f4       	brcc	.+14     	; 0xd3a <pow+0x70>
     d2c:	9f 77       	andi	r25, 0x7F	; 127
     d2e:	9f 93       	push	r25
     d30:	0c d0       	rcall	.+24     	; 0xd4a <pow+0x80>
     d32:	0f 90       	pop	r0
     d34:	07 fc       	sbrc	r0, 7
     d36:	90 58       	subi	r25, 0x80	; 128
     d38:	08 95       	ret
     d3a:	3e f0       	brts	.+14     	; 0xd4a <pow+0x80>
     d3c:	18 cf       	rjmp	.-464    	; 0xb6e <__fp_nan>
     d3e:	60 e0       	ldi	r22, 0x00	; 0
     d40:	70 e0       	ldi	r23, 0x00	; 0
     d42:	80 e8       	ldi	r24, 0x80	; 128
     d44:	9f e3       	ldi	r25, 0x3F	; 63
     d46:	08 95       	ret
     d48:	4f e7       	ldi	r20, 0x7F	; 127
     d4a:	9f 77       	andi	r25, 0x7F	; 127
     d4c:	5f 93       	push	r21
     d4e:	4f 93       	push	r20
     d50:	3f 93       	push	r19
     d52:	2f 93       	push	r18
     d54:	9e d0       	rcall	.+316    	; 0xe92 <log>
     d56:	2f 91       	pop	r18
     d58:	3f 91       	pop	r19
     d5a:	4f 91       	pop	r20
     d5c:	5f 91       	pop	r21
     d5e:	52 df       	rcall	.-348    	; 0xc04 <__mulsf3>
     d60:	05 c0       	rjmp	.+10     	; 0xd6c <exp>
     d62:	19 f4       	brne	.+6      	; 0xd6a <pow+0xa0>
     d64:	0e f0       	brts	.+2      	; 0xd68 <pow+0x9e>
     d66:	fd ce       	rjmp	.-518    	; 0xb62 <__fp_inf>
     d68:	46 cf       	rjmp	.-372    	; 0xbf6 <__fp_zero>
     d6a:	01 cf       	rjmp	.-510    	; 0xb6e <__fp_nan>

00000d6c <exp>:
     d6c:	2a df       	rcall	.-428    	; 0xbc2 <__fp_splitA>
     d6e:	c8 f3       	brcs	.-14     	; 0xd62 <pow+0x98>
     d70:	96 38       	cpi	r25, 0x86	; 134
     d72:	c0 f7       	brcc	.-16     	; 0xd64 <pow+0x9a>
     d74:	07 f8       	bld	r0, 7
     d76:	0f 92       	push	r0
     d78:	e8 94       	clt
     d7a:	2b e3       	ldi	r18, 0x3B	; 59
     d7c:	3a ea       	ldi	r19, 0xAA	; 170
     d7e:	48 eb       	ldi	r20, 0xB8	; 184
     d80:	5f e7       	ldi	r21, 0x7F	; 127
     d82:	4e df       	rcall	.-356    	; 0xc20 <__mulsf3_pse>
     d84:	0f 92       	push	r0
     d86:	0f 92       	push	r0
     d88:	0f 92       	push	r0
     d8a:	4d b7       	in	r20, 0x3d	; 61
     d8c:	5e b7       	in	r21, 0x3e	; 62
     d8e:	0f 92       	push	r0
     d90:	c0 d0       	rcall	.+384    	; 0xf12 <modf>
     d92:	e8 e6       	ldi	r30, 0x68	; 104
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	16 d0       	rcall	.+44     	; 0xdc4 <__fp_powser>
     d98:	4f 91       	pop	r20
     d9a:	5f 91       	pop	r21
     d9c:	ef 91       	pop	r30
     d9e:	ff 91       	pop	r31
     da0:	e5 95       	asr	r30
     da2:	ee 1f       	adc	r30, r30
     da4:	ff 1f       	adc	r31, r31
     da6:	49 f0       	breq	.+18     	; 0xdba <exp+0x4e>
     da8:	fe 57       	subi	r31, 0x7E	; 126
     daa:	e0 68       	ori	r30, 0x80	; 128
     dac:	44 27       	eor	r20, r20
     dae:	ee 0f       	add	r30, r30
     db0:	44 1f       	adc	r20, r20
     db2:	fa 95       	dec	r31
     db4:	e1 f7       	brne	.-8      	; 0xdae <exp+0x42>
     db6:	41 95       	neg	r20
     db8:	55 0b       	sbc	r21, r21
     dba:	32 d0       	rcall	.+100    	; 0xe20 <ldexp>
     dbc:	0f 90       	pop	r0
     dbe:	07 fe       	sbrs	r0, 7
     dc0:	26 c0       	rjmp	.+76     	; 0xe0e <inverse>
     dc2:	08 95       	ret

00000dc4 <__fp_powser>:
     dc4:	df 93       	push	r29
     dc6:	cf 93       	push	r28
     dc8:	1f 93       	push	r17
     dca:	0f 93       	push	r16
     dcc:	ff 92       	push	r15
     dce:	ef 92       	push	r14
     dd0:	df 92       	push	r13
     dd2:	7b 01       	movw	r14, r22
     dd4:	8c 01       	movw	r16, r24
     dd6:	68 94       	set
     dd8:	05 c0       	rjmp	.+10     	; 0xde4 <__fp_powser+0x20>
     dda:	da 2e       	mov	r13, r26
     ddc:	ef 01       	movw	r28, r30
     dde:	1e df       	rcall	.-452    	; 0xc1c <__mulsf3x>
     de0:	fe 01       	movw	r30, r28
     de2:	e8 94       	clt
     de4:	a5 91       	lpm	r26, Z+
     de6:	25 91       	lpm	r18, Z+
     de8:	35 91       	lpm	r19, Z+
     dea:	45 91       	lpm	r20, Z+
     dec:	55 91       	lpm	r21, Z+
     dee:	ae f3       	brts	.-22     	; 0xdda <__fp_powser+0x16>
     df0:	ef 01       	movw	r28, r30
     df2:	93 dd       	rcall	.-1242   	; 0x91a <__addsf3x>
     df4:	fe 01       	movw	r30, r28
     df6:	97 01       	movw	r18, r14
     df8:	a8 01       	movw	r20, r16
     dfa:	da 94       	dec	r13
     dfc:	79 f7       	brne	.-34     	; 0xddc <__fp_powser+0x18>
     dfe:	df 90       	pop	r13
     e00:	ef 90       	pop	r14
     e02:	ff 90       	pop	r15
     e04:	0f 91       	pop	r16
     e06:	1f 91       	pop	r17
     e08:	cf 91       	pop	r28
     e0a:	df 91       	pop	r29
     e0c:	08 95       	ret

00000e0e <inverse>:
     e0e:	9b 01       	movw	r18, r22
     e10:	ac 01       	movw	r20, r24
     e12:	60 e0       	ldi	r22, 0x00	; 0
     e14:	70 e0       	ldi	r23, 0x00	; 0
     e16:	80 e8       	ldi	r24, 0x80	; 128
     e18:	9f e3       	ldi	r25, 0x3F	; 63
     e1a:	d2 cd       	rjmp	.-1116   	; 0x9c0 <__divsf3>
     e1c:	a2 ce       	rjmp	.-700    	; 0xb62 <__fp_inf>
     e1e:	ac c0       	rjmp	.+344    	; 0xf78 <__fp_mpack>

00000e20 <ldexp>:
     e20:	d0 de       	rcall	.-608    	; 0xbc2 <__fp_splitA>
     e22:	e8 f3       	brcs	.-6      	; 0xe1e <inverse+0x10>
     e24:	99 23       	and	r25, r25
     e26:	d9 f3       	breq	.-10     	; 0xe1e <inverse+0x10>
     e28:	94 0f       	add	r25, r20
     e2a:	51 1d       	adc	r21, r1
     e2c:	bb f3       	brvs	.-18     	; 0xe1c <inverse+0xe>
     e2e:	91 50       	subi	r25, 0x01	; 1
     e30:	50 40       	sbci	r21, 0x00	; 0
     e32:	94 f0       	brlt	.+36     	; 0xe58 <ldexp+0x38>
     e34:	59 f0       	breq	.+22     	; 0xe4c <ldexp+0x2c>
     e36:	88 23       	and	r24, r24
     e38:	32 f0       	brmi	.+12     	; 0xe46 <ldexp+0x26>
     e3a:	66 0f       	add	r22, r22
     e3c:	77 1f       	adc	r23, r23
     e3e:	88 1f       	adc	r24, r24
     e40:	91 50       	subi	r25, 0x01	; 1
     e42:	50 40       	sbci	r21, 0x00	; 0
     e44:	c1 f7       	brne	.-16     	; 0xe36 <ldexp+0x16>
     e46:	9e 3f       	cpi	r25, 0xFE	; 254
     e48:	51 05       	cpc	r21, r1
     e4a:	44 f7       	brge	.-48     	; 0xe1c <inverse+0xe>
     e4c:	88 0f       	add	r24, r24
     e4e:	91 1d       	adc	r25, r1
     e50:	96 95       	lsr	r25
     e52:	87 95       	ror	r24
     e54:	97 f9       	bld	r25, 7
     e56:	08 95       	ret
     e58:	5f 3f       	cpi	r21, 0xFF	; 255
     e5a:	ac f0       	brlt	.+42     	; 0xe86 <ldexp+0x66>
     e5c:	98 3e       	cpi	r25, 0xE8	; 232
     e5e:	9c f0       	brlt	.+38     	; 0xe86 <ldexp+0x66>
     e60:	bb 27       	eor	r27, r27
     e62:	86 95       	lsr	r24
     e64:	77 95       	ror	r23
     e66:	67 95       	ror	r22
     e68:	b7 95       	ror	r27
     e6a:	08 f4       	brcc	.+2      	; 0xe6e <ldexp+0x4e>
     e6c:	b1 60       	ori	r27, 0x01	; 1
     e6e:	93 95       	inc	r25
     e70:	c1 f7       	brne	.-16     	; 0xe62 <ldexp+0x42>
     e72:	bb 0f       	add	r27, r27
     e74:	58 f7       	brcc	.-42     	; 0xe4c <ldexp+0x2c>
     e76:	11 f4       	brne	.+4      	; 0xe7c <ldexp+0x5c>
     e78:	60 ff       	sbrs	r22, 0
     e7a:	e8 cf       	rjmp	.-48     	; 0xe4c <ldexp+0x2c>
     e7c:	6f 5f       	subi	r22, 0xFF	; 255
     e7e:	7f 4f       	sbci	r23, 0xFF	; 255
     e80:	8f 4f       	sbci	r24, 0xFF	; 255
     e82:	9f 4f       	sbci	r25, 0xFF	; 255
     e84:	e3 cf       	rjmp	.-58     	; 0xe4c <ldexp+0x2c>
     e86:	b8 ce       	rjmp	.-656    	; 0xbf8 <__fp_szero>
     e88:	0e f0       	brts	.+2      	; 0xe8c <ldexp+0x6c>
     e8a:	76 c0       	rjmp	.+236    	; 0xf78 <__fp_mpack>
     e8c:	70 ce       	rjmp	.-800    	; 0xb6e <__fp_nan>
     e8e:	68 94       	set
     e90:	68 ce       	rjmp	.-816    	; 0xb62 <__fp_inf>

00000e92 <log>:
     e92:	97 de       	rcall	.-722    	; 0xbc2 <__fp_splitA>
     e94:	c8 f3       	brcs	.-14     	; 0xe88 <ldexp+0x68>
     e96:	99 23       	and	r25, r25
     e98:	d1 f3       	breq	.-12     	; 0xe8e <ldexp+0x6e>
     e9a:	c6 f3       	brts	.-16     	; 0xe8c <ldexp+0x6c>
     e9c:	df 93       	push	r29
     e9e:	cf 93       	push	r28
     ea0:	1f 93       	push	r17
     ea2:	0f 93       	push	r16
     ea4:	ff 92       	push	r15
     ea6:	c9 2f       	mov	r28, r25
     ea8:	dd 27       	eor	r29, r29
     eaa:	88 23       	and	r24, r24
     eac:	2a f0       	brmi	.+10     	; 0xeb8 <log+0x26>
     eae:	21 97       	sbiw	r28, 0x01	; 1
     eb0:	66 0f       	add	r22, r22
     eb2:	77 1f       	adc	r23, r23
     eb4:	88 1f       	adc	r24, r24
     eb6:	da f7       	brpl	.-10     	; 0xeae <log+0x1c>
     eb8:	20 e0       	ldi	r18, 0x00	; 0
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	40 e8       	ldi	r20, 0x80	; 128
     ebe:	5f eb       	ldi	r21, 0xBF	; 191
     ec0:	9f e3       	ldi	r25, 0x3F	; 63
     ec2:	88 39       	cpi	r24, 0x98	; 152
     ec4:	20 f0       	brcs	.+8      	; 0xece <log+0x3c>
     ec6:	80 3e       	cpi	r24, 0xE0	; 224
     ec8:	30 f0       	brcs	.+12     	; 0xed6 <log+0x44>
     eca:	21 96       	adiw	r28, 0x01	; 1
     ecc:	8f 77       	andi	r24, 0x7F	; 127
     ece:	14 dd       	rcall	.-1496   	; 0x8f8 <__addsf3>
     ed0:	e0 e9       	ldi	r30, 0x90	; 144
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	03 c0       	rjmp	.+6      	; 0xedc <log+0x4a>
     ed6:	10 dd       	rcall	.-1504   	; 0x8f8 <__addsf3>
     ed8:	ed eb       	ldi	r30, 0xBD	; 189
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	73 df       	rcall	.-282    	; 0xdc4 <__fp_powser>
     ede:	8b 01       	movw	r16, r22
     ee0:	be 01       	movw	r22, r28
     ee2:	ec 01       	movw	r28, r24
     ee4:	fb 2e       	mov	r15, r27
     ee6:	6f 57       	subi	r22, 0x7F	; 127
     ee8:	71 09       	sbc	r23, r1
     eea:	75 95       	asr	r23
     eec:	77 1f       	adc	r23, r23
     eee:	88 0b       	sbc	r24, r24
     ef0:	99 0b       	sbc	r25, r25
     ef2:	fc dd       	rcall	.-1032   	; 0xaec <__floatsisf>
     ef4:	28 e1       	ldi	r18, 0x18	; 24
     ef6:	32 e7       	ldi	r19, 0x72	; 114
     ef8:	41 e3       	ldi	r20, 0x31	; 49
     efa:	5f e3       	ldi	r21, 0x3F	; 63
     efc:	8f de       	rcall	.-738    	; 0xc1c <__mulsf3x>
     efe:	af 2d       	mov	r26, r15
     f00:	98 01       	movw	r18, r16
     f02:	ae 01       	movw	r20, r28
     f04:	ff 90       	pop	r15
     f06:	0f 91       	pop	r16
     f08:	1f 91       	pop	r17
     f0a:	cf 91       	pop	r28
     f0c:	df 91       	pop	r29
     f0e:	05 dd       	rcall	.-1526   	; 0x91a <__addsf3x>
     f10:	3f ce       	rjmp	.-898    	; 0xb90 <__fp_round>

00000f12 <modf>:
     f12:	fa 01       	movw	r30, r20
     f14:	dc 01       	movw	r26, r24
     f16:	aa 0f       	add	r26, r26
     f18:	bb 1f       	adc	r27, r27
     f1a:	9b 01       	movw	r18, r22
     f1c:	ac 01       	movw	r20, r24
     f1e:	bf 57       	subi	r27, 0x7F	; 127
     f20:	28 f4       	brcc	.+10     	; 0xf2c <modf+0x1a>
     f22:	22 27       	eor	r18, r18
     f24:	33 27       	eor	r19, r19
     f26:	44 27       	eor	r20, r20
     f28:	50 78       	andi	r21, 0x80	; 128
     f2a:	1f c0       	rjmp	.+62     	; 0xf6a <modf+0x58>
     f2c:	b7 51       	subi	r27, 0x17	; 23
     f2e:	88 f4       	brcc	.+34     	; 0xf52 <modf+0x40>
     f30:	ab 2f       	mov	r26, r27
     f32:	00 24       	eor	r0, r0
     f34:	46 95       	lsr	r20
     f36:	37 95       	ror	r19
     f38:	27 95       	ror	r18
     f3a:	01 1c       	adc	r0, r1
     f3c:	a3 95       	inc	r26
     f3e:	d2 f3       	brmi	.-12     	; 0xf34 <modf+0x22>
     f40:	00 20       	and	r0, r0
     f42:	69 f0       	breq	.+26     	; 0xf5e <modf+0x4c>
     f44:	22 0f       	add	r18, r18
     f46:	33 1f       	adc	r19, r19
     f48:	44 1f       	adc	r20, r20
     f4a:	b3 95       	inc	r27
     f4c:	da f3       	brmi	.-10     	; 0xf44 <modf+0x32>
     f4e:	0d d0       	rcall	.+26     	; 0xf6a <modf+0x58>
     f50:	d2 cc       	rjmp	.-1628   	; 0x8f6 <__subsf3>
     f52:	61 30       	cpi	r22, 0x01	; 1
     f54:	71 05       	cpc	r23, r1
     f56:	a0 e8       	ldi	r26, 0x80	; 128
     f58:	8a 07       	cpc	r24, r26
     f5a:	b9 46       	sbci	r27, 0x69	; 105
     f5c:	30 f4       	brcc	.+12     	; 0xf6a <modf+0x58>
     f5e:	9b 01       	movw	r18, r22
     f60:	ac 01       	movw	r20, r24
     f62:	66 27       	eor	r22, r22
     f64:	77 27       	eor	r23, r23
     f66:	88 27       	eor	r24, r24
     f68:	90 78       	andi	r25, 0x80	; 128
     f6a:	30 96       	adiw	r30, 0x00	; 0
     f6c:	21 f0       	breq	.+8      	; 0xf76 <modf+0x64>
     f6e:	20 83       	st	Z, r18
     f70:	31 83       	std	Z+1, r19	; 0x01
     f72:	42 83       	std	Z+2, r20	; 0x02
     f74:	53 83       	std	Z+3, r21	; 0x03
     f76:	08 95       	ret

00000f78 <__fp_mpack>:
     f78:	9f 3f       	cpi	r25, 0xFF	; 255
     f7a:	31 f0       	breq	.+12     	; 0xf88 <__fp_mpack_finite+0xc>

00000f7c <__fp_mpack_finite>:
     f7c:	91 50       	subi	r25, 0x01	; 1
     f7e:	20 f4       	brcc	.+8      	; 0xf88 <__fp_mpack_finite+0xc>
     f80:	87 95       	ror	r24
     f82:	77 95       	ror	r23
     f84:	67 95       	ror	r22
     f86:	b7 95       	ror	r27
     f88:	88 0f       	add	r24, r24
     f8a:	91 1d       	adc	r25, r1
     f8c:	96 95       	lsr	r25
     f8e:	87 95       	ror	r24
     f90:	97 f9       	bld	r25, 7
     f92:	08 95       	ret

00000f94 <__udivmodsi4>:
     f94:	a1 e2       	ldi	r26, 0x21	; 33
     f96:	1a 2e       	mov	r1, r26
     f98:	aa 1b       	sub	r26, r26
     f9a:	bb 1b       	sub	r27, r27
     f9c:	fd 01       	movw	r30, r26
     f9e:	0d c0       	rjmp	.+26     	; 0xfba <__udivmodsi4_ep>

00000fa0 <__udivmodsi4_loop>:
     fa0:	aa 1f       	adc	r26, r26
     fa2:	bb 1f       	adc	r27, r27
     fa4:	ee 1f       	adc	r30, r30
     fa6:	ff 1f       	adc	r31, r31
     fa8:	a2 17       	cp	r26, r18
     faa:	b3 07       	cpc	r27, r19
     fac:	e4 07       	cpc	r30, r20
     fae:	f5 07       	cpc	r31, r21
     fb0:	20 f0       	brcs	.+8      	; 0xfba <__udivmodsi4_ep>
     fb2:	a2 1b       	sub	r26, r18
     fb4:	b3 0b       	sbc	r27, r19
     fb6:	e4 0b       	sbc	r30, r20
     fb8:	f5 0b       	sbc	r31, r21

00000fba <__udivmodsi4_ep>:
     fba:	66 1f       	adc	r22, r22
     fbc:	77 1f       	adc	r23, r23
     fbe:	88 1f       	adc	r24, r24
     fc0:	99 1f       	adc	r25, r25
     fc2:	1a 94       	dec	r1
     fc4:	69 f7       	brne	.-38     	; 0xfa0 <__udivmodsi4_loop>
     fc6:	60 95       	com	r22
     fc8:	70 95       	com	r23
     fca:	80 95       	com	r24
     fcc:	90 95       	com	r25
     fce:	9b 01       	movw	r18, r22
     fd0:	ac 01       	movw	r20, r24
     fd2:	bd 01       	movw	r22, r26
     fd4:	cf 01       	movw	r24, r30
     fd6:	08 95       	ret

00000fd8 <printf>:
     fd8:	a0 e0       	ldi	r26, 0x00	; 0
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	e2 ef       	ldi	r30, 0xF2	; 242
     fde:	f7 e0       	ldi	r31, 0x07	; 7
     fe0:	0c 94 88 0a 	jmp	0x1510	; 0x1510 <__prologue_saves__+0x20>
     fe4:	fe 01       	movw	r30, r28
     fe6:	35 96       	adiw	r30, 0x05	; 5
     fe8:	61 91       	ld	r22, Z+
     fea:	71 91       	ld	r23, Z+
     fec:	af 01       	movw	r20, r30
     fee:	80 91 06 02 	lds	r24, 0x0206
     ff2:	90 91 07 02 	lds	r25, 0x0207
     ff6:	0e 94 00 08 	call	0x1000	; 0x1000 <vfprintf>
     ffa:	e2 e0       	ldi	r30, 0x02	; 2
     ffc:	0c 94 a4 0a 	jmp	0x1548	; 0x1548 <__epilogue_restores__+0x20>

00001000 <vfprintf>:
    1000:	ac e0       	ldi	r26, 0x0C	; 12
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e6 e0       	ldi	r30, 0x06	; 6
    1006:	f8 e0       	ldi	r31, 0x08	; 8
    1008:	0c 94 78 0a 	jmp	0x14f0	; 0x14f0 <__prologue_saves__>
    100c:	7c 01       	movw	r14, r24
    100e:	6b 01       	movw	r12, r22
    1010:	8a 01       	movw	r16, r20
    1012:	fc 01       	movw	r30, r24
    1014:	17 82       	std	Z+7, r1	; 0x07
    1016:	16 82       	std	Z+6, r1	; 0x06
    1018:	83 81       	ldd	r24, Z+3	; 0x03
    101a:	81 ff       	sbrs	r24, 1
    101c:	bd c1       	rjmp	.+890    	; 0x1398 <vfprintf+0x398>
    101e:	ce 01       	movw	r24, r28
    1020:	01 96       	adiw	r24, 0x01	; 1
    1022:	4c 01       	movw	r8, r24
    1024:	f7 01       	movw	r30, r14
    1026:	93 81       	ldd	r25, Z+3	; 0x03
    1028:	f6 01       	movw	r30, r12
    102a:	93 fd       	sbrc	r25, 3
    102c:	85 91       	lpm	r24, Z+
    102e:	93 ff       	sbrs	r25, 3
    1030:	81 91       	ld	r24, Z+
    1032:	6f 01       	movw	r12, r30
    1034:	88 23       	and	r24, r24
    1036:	09 f4       	brne	.+2      	; 0x103a <vfprintf+0x3a>
    1038:	ab c1       	rjmp	.+854    	; 0x1390 <vfprintf+0x390>
    103a:	85 32       	cpi	r24, 0x25	; 37
    103c:	39 f4       	brne	.+14     	; 0x104c <vfprintf+0x4c>
    103e:	93 fd       	sbrc	r25, 3
    1040:	85 91       	lpm	r24, Z+
    1042:	93 ff       	sbrs	r25, 3
    1044:	81 91       	ld	r24, Z+
    1046:	6f 01       	movw	r12, r30
    1048:	85 32       	cpi	r24, 0x25	; 37
    104a:	29 f4       	brne	.+10     	; 0x1056 <vfprintf+0x56>
    104c:	b7 01       	movw	r22, r14
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <fputc>
    1054:	e7 cf       	rjmp	.-50     	; 0x1024 <vfprintf+0x24>
    1056:	51 2c       	mov	r5, r1
    1058:	31 2c       	mov	r3, r1
    105a:	20 e0       	ldi	r18, 0x00	; 0
    105c:	20 32       	cpi	r18, 0x20	; 32
    105e:	a0 f4       	brcc	.+40     	; 0x1088 <vfprintf+0x88>
    1060:	8b 32       	cpi	r24, 0x2B	; 43
    1062:	69 f0       	breq	.+26     	; 0x107e <vfprintf+0x7e>
    1064:	30 f4       	brcc	.+12     	; 0x1072 <vfprintf+0x72>
    1066:	80 32       	cpi	r24, 0x20	; 32
    1068:	59 f0       	breq	.+22     	; 0x1080 <vfprintf+0x80>
    106a:	83 32       	cpi	r24, 0x23	; 35
    106c:	69 f4       	brne	.+26     	; 0x1088 <vfprintf+0x88>
    106e:	20 61       	ori	r18, 0x10	; 16
    1070:	2c c0       	rjmp	.+88     	; 0x10ca <vfprintf+0xca>
    1072:	8d 32       	cpi	r24, 0x2D	; 45
    1074:	39 f0       	breq	.+14     	; 0x1084 <vfprintf+0x84>
    1076:	80 33       	cpi	r24, 0x30	; 48
    1078:	39 f4       	brne	.+14     	; 0x1088 <vfprintf+0x88>
    107a:	21 60       	ori	r18, 0x01	; 1
    107c:	26 c0       	rjmp	.+76     	; 0x10ca <vfprintf+0xca>
    107e:	22 60       	ori	r18, 0x02	; 2
    1080:	24 60       	ori	r18, 0x04	; 4
    1082:	23 c0       	rjmp	.+70     	; 0x10ca <vfprintf+0xca>
    1084:	28 60       	ori	r18, 0x08	; 8
    1086:	21 c0       	rjmp	.+66     	; 0x10ca <vfprintf+0xca>
    1088:	27 fd       	sbrc	r18, 7
    108a:	27 c0       	rjmp	.+78     	; 0x10da <vfprintf+0xda>
    108c:	30 ed       	ldi	r19, 0xD0	; 208
    108e:	38 0f       	add	r19, r24
    1090:	3a 30       	cpi	r19, 0x0A	; 10
    1092:	78 f4       	brcc	.+30     	; 0x10b2 <vfprintf+0xb2>
    1094:	26 ff       	sbrs	r18, 6
    1096:	06 c0       	rjmp	.+12     	; 0x10a4 <vfprintf+0xa4>
    1098:	fa e0       	ldi	r31, 0x0A	; 10
    109a:	5f 9e       	mul	r5, r31
    109c:	30 0d       	add	r19, r0
    109e:	11 24       	eor	r1, r1
    10a0:	53 2e       	mov	r5, r19
    10a2:	13 c0       	rjmp	.+38     	; 0x10ca <vfprintf+0xca>
    10a4:	8a e0       	ldi	r24, 0x0A	; 10
    10a6:	38 9e       	mul	r3, r24
    10a8:	30 0d       	add	r19, r0
    10aa:	11 24       	eor	r1, r1
    10ac:	33 2e       	mov	r3, r19
    10ae:	20 62       	ori	r18, 0x20	; 32
    10b0:	0c c0       	rjmp	.+24     	; 0x10ca <vfprintf+0xca>
    10b2:	8e 32       	cpi	r24, 0x2E	; 46
    10b4:	21 f4       	brne	.+8      	; 0x10be <vfprintf+0xbe>
    10b6:	26 fd       	sbrc	r18, 6
    10b8:	6b c1       	rjmp	.+726    	; 0x1390 <vfprintf+0x390>
    10ba:	20 64       	ori	r18, 0x40	; 64
    10bc:	06 c0       	rjmp	.+12     	; 0x10ca <vfprintf+0xca>
    10be:	8c 36       	cpi	r24, 0x6C	; 108
    10c0:	11 f4       	brne	.+4      	; 0x10c6 <vfprintf+0xc6>
    10c2:	20 68       	ori	r18, 0x80	; 128
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <vfprintf+0xca>
    10c6:	88 36       	cpi	r24, 0x68	; 104
    10c8:	41 f4       	brne	.+16     	; 0x10da <vfprintf+0xda>
    10ca:	f6 01       	movw	r30, r12
    10cc:	93 fd       	sbrc	r25, 3
    10ce:	85 91       	lpm	r24, Z+
    10d0:	93 ff       	sbrs	r25, 3
    10d2:	81 91       	ld	r24, Z+
    10d4:	6f 01       	movw	r12, r30
    10d6:	81 11       	cpse	r24, r1
    10d8:	c1 cf       	rjmp	.-126    	; 0x105c <vfprintf+0x5c>
    10da:	98 2f       	mov	r25, r24
    10dc:	9f 7d       	andi	r25, 0xDF	; 223
    10de:	95 54       	subi	r25, 0x45	; 69
    10e0:	93 30       	cpi	r25, 0x03	; 3
    10e2:	28 f4       	brcc	.+10     	; 0x10ee <vfprintf+0xee>
    10e4:	0c 5f       	subi	r16, 0xFC	; 252
    10e6:	1f 4f       	sbci	r17, 0xFF	; 255
    10e8:	ff e3       	ldi	r31, 0x3F	; 63
    10ea:	f9 83       	std	Y+1, r31	; 0x01
    10ec:	0d c0       	rjmp	.+26     	; 0x1108 <vfprintf+0x108>
    10ee:	83 36       	cpi	r24, 0x63	; 99
    10f0:	31 f0       	breq	.+12     	; 0x10fe <vfprintf+0xfe>
    10f2:	83 37       	cpi	r24, 0x73	; 115
    10f4:	71 f0       	breq	.+28     	; 0x1112 <vfprintf+0x112>
    10f6:	83 35       	cpi	r24, 0x53	; 83
    10f8:	09 f0       	breq	.+2      	; 0x10fc <vfprintf+0xfc>
    10fa:	5b c0       	rjmp	.+182    	; 0x11b2 <vfprintf+0x1b2>
    10fc:	22 c0       	rjmp	.+68     	; 0x1142 <vfprintf+0x142>
    10fe:	f8 01       	movw	r30, r16
    1100:	80 81       	ld	r24, Z
    1102:	89 83       	std	Y+1, r24	; 0x01
    1104:	0e 5f       	subi	r16, 0xFE	; 254
    1106:	1f 4f       	sbci	r17, 0xFF	; 255
    1108:	44 24       	eor	r4, r4
    110a:	43 94       	inc	r4
    110c:	51 2c       	mov	r5, r1
    110e:	54 01       	movw	r10, r8
    1110:	15 c0       	rjmp	.+42     	; 0x113c <vfprintf+0x13c>
    1112:	38 01       	movw	r6, r16
    1114:	f2 e0       	ldi	r31, 0x02	; 2
    1116:	6f 0e       	add	r6, r31
    1118:	71 1c       	adc	r7, r1
    111a:	f8 01       	movw	r30, r16
    111c:	a0 80       	ld	r10, Z
    111e:	b1 80       	ldd	r11, Z+1	; 0x01
    1120:	26 ff       	sbrs	r18, 6
    1122:	03 c0       	rjmp	.+6      	; 0x112a <vfprintf+0x12a>
    1124:	65 2d       	mov	r22, r5
    1126:	70 e0       	ldi	r23, 0x00	; 0
    1128:	02 c0       	rjmp	.+4      	; 0x112e <vfprintf+0x12e>
    112a:	6f ef       	ldi	r22, 0xFF	; 255
    112c:	7f ef       	ldi	r23, 0xFF	; 255
    112e:	c5 01       	movw	r24, r10
    1130:	2c 87       	std	Y+12, r18	; 0x0c
    1132:	0e 94 dd 09 	call	0x13ba	; 0x13ba <strnlen>
    1136:	2c 01       	movw	r4, r24
    1138:	83 01       	movw	r16, r6
    113a:	2c 85       	ldd	r18, Y+12	; 0x0c
    113c:	2f 77       	andi	r18, 0x7F	; 127
    113e:	22 2e       	mov	r2, r18
    1140:	17 c0       	rjmp	.+46     	; 0x1170 <vfprintf+0x170>
    1142:	38 01       	movw	r6, r16
    1144:	f2 e0       	ldi	r31, 0x02	; 2
    1146:	6f 0e       	add	r6, r31
    1148:	71 1c       	adc	r7, r1
    114a:	f8 01       	movw	r30, r16
    114c:	a0 80       	ld	r10, Z
    114e:	b1 80       	ldd	r11, Z+1	; 0x01
    1150:	26 ff       	sbrs	r18, 6
    1152:	03 c0       	rjmp	.+6      	; 0x115a <vfprintf+0x15a>
    1154:	65 2d       	mov	r22, r5
    1156:	70 e0       	ldi	r23, 0x00	; 0
    1158:	02 c0       	rjmp	.+4      	; 0x115e <vfprintf+0x15e>
    115a:	6f ef       	ldi	r22, 0xFF	; 255
    115c:	7f ef       	ldi	r23, 0xFF	; 255
    115e:	c5 01       	movw	r24, r10
    1160:	2c 87       	std	Y+12, r18	; 0x0c
    1162:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <strnlen_P>
    1166:	2c 01       	movw	r4, r24
    1168:	2c 85       	ldd	r18, Y+12	; 0x0c
    116a:	20 68       	ori	r18, 0x80	; 128
    116c:	22 2e       	mov	r2, r18
    116e:	83 01       	movw	r16, r6
    1170:	23 fc       	sbrc	r2, 3
    1172:	1b c0       	rjmp	.+54     	; 0x11aa <vfprintf+0x1aa>
    1174:	83 2d       	mov	r24, r3
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	48 16       	cp	r4, r24
    117a:	59 06       	cpc	r5, r25
    117c:	b0 f4       	brcc	.+44     	; 0x11aa <vfprintf+0x1aa>
    117e:	b7 01       	movw	r22, r14
    1180:	80 e2       	ldi	r24, 0x20	; 32
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <fputc>
    1188:	3a 94       	dec	r3
    118a:	f4 cf       	rjmp	.-24     	; 0x1174 <vfprintf+0x174>
    118c:	f5 01       	movw	r30, r10
    118e:	27 fc       	sbrc	r2, 7
    1190:	85 91       	lpm	r24, Z+
    1192:	27 fe       	sbrs	r2, 7
    1194:	81 91       	ld	r24, Z+
    1196:	5f 01       	movw	r10, r30
    1198:	b7 01       	movw	r22, r14
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <fputc>
    11a0:	31 10       	cpse	r3, r1
    11a2:	3a 94       	dec	r3
    11a4:	f1 e0       	ldi	r31, 0x01	; 1
    11a6:	4f 1a       	sub	r4, r31
    11a8:	51 08       	sbc	r5, r1
    11aa:	41 14       	cp	r4, r1
    11ac:	51 04       	cpc	r5, r1
    11ae:	71 f7       	brne	.-36     	; 0x118c <vfprintf+0x18c>
    11b0:	e5 c0       	rjmp	.+458    	; 0x137c <vfprintf+0x37c>
    11b2:	84 36       	cpi	r24, 0x64	; 100
    11b4:	11 f0       	breq	.+4      	; 0x11ba <vfprintf+0x1ba>
    11b6:	89 36       	cpi	r24, 0x69	; 105
    11b8:	39 f5       	brne	.+78     	; 0x1208 <vfprintf+0x208>
    11ba:	f8 01       	movw	r30, r16
    11bc:	27 ff       	sbrs	r18, 7
    11be:	07 c0       	rjmp	.+14     	; 0x11ce <vfprintf+0x1ce>
    11c0:	60 81       	ld	r22, Z
    11c2:	71 81       	ldd	r23, Z+1	; 0x01
    11c4:	82 81       	ldd	r24, Z+2	; 0x02
    11c6:	93 81       	ldd	r25, Z+3	; 0x03
    11c8:	0c 5f       	subi	r16, 0xFC	; 252
    11ca:	1f 4f       	sbci	r17, 0xFF	; 255
    11cc:	08 c0       	rjmp	.+16     	; 0x11de <vfprintf+0x1de>
    11ce:	60 81       	ld	r22, Z
    11d0:	71 81       	ldd	r23, Z+1	; 0x01
    11d2:	88 27       	eor	r24, r24
    11d4:	77 fd       	sbrc	r23, 7
    11d6:	80 95       	com	r24
    11d8:	98 2f       	mov	r25, r24
    11da:	0e 5f       	subi	r16, 0xFE	; 254
    11dc:	1f 4f       	sbci	r17, 0xFF	; 255
    11de:	2f 76       	andi	r18, 0x6F	; 111
    11e0:	b2 2e       	mov	r11, r18
    11e2:	97 ff       	sbrs	r25, 7
    11e4:	09 c0       	rjmp	.+18     	; 0x11f8 <vfprintf+0x1f8>
    11e6:	90 95       	com	r25
    11e8:	80 95       	com	r24
    11ea:	70 95       	com	r23
    11ec:	61 95       	neg	r22
    11ee:	7f 4f       	sbci	r23, 0xFF	; 255
    11f0:	8f 4f       	sbci	r24, 0xFF	; 255
    11f2:	9f 4f       	sbci	r25, 0xFF	; 255
    11f4:	20 68       	ori	r18, 0x80	; 128
    11f6:	b2 2e       	mov	r11, r18
    11f8:	2a e0       	ldi	r18, 0x0A	; 10
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	a4 01       	movw	r20, r8
    11fe:	0e 94 1a 0a 	call	0x1434	; 0x1434 <__ultoa_invert>
    1202:	a8 2e       	mov	r10, r24
    1204:	a8 18       	sub	r10, r8
    1206:	44 c0       	rjmp	.+136    	; 0x1290 <vfprintf+0x290>
    1208:	85 37       	cpi	r24, 0x75	; 117
    120a:	29 f4       	brne	.+10     	; 0x1216 <vfprintf+0x216>
    120c:	2f 7e       	andi	r18, 0xEF	; 239
    120e:	b2 2e       	mov	r11, r18
    1210:	2a e0       	ldi	r18, 0x0A	; 10
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	25 c0       	rjmp	.+74     	; 0x1260 <vfprintf+0x260>
    1216:	f2 2f       	mov	r31, r18
    1218:	f9 7f       	andi	r31, 0xF9	; 249
    121a:	bf 2e       	mov	r11, r31
    121c:	8f 36       	cpi	r24, 0x6F	; 111
    121e:	c1 f0       	breq	.+48     	; 0x1250 <vfprintf+0x250>
    1220:	18 f4       	brcc	.+6      	; 0x1228 <vfprintf+0x228>
    1222:	88 35       	cpi	r24, 0x58	; 88
    1224:	79 f0       	breq	.+30     	; 0x1244 <vfprintf+0x244>
    1226:	b4 c0       	rjmp	.+360    	; 0x1390 <vfprintf+0x390>
    1228:	80 37       	cpi	r24, 0x70	; 112
    122a:	19 f0       	breq	.+6      	; 0x1232 <vfprintf+0x232>
    122c:	88 37       	cpi	r24, 0x78	; 120
    122e:	21 f0       	breq	.+8      	; 0x1238 <vfprintf+0x238>
    1230:	af c0       	rjmp	.+350    	; 0x1390 <vfprintf+0x390>
    1232:	2f 2f       	mov	r18, r31
    1234:	20 61       	ori	r18, 0x10	; 16
    1236:	b2 2e       	mov	r11, r18
    1238:	b4 fe       	sbrs	r11, 4
    123a:	0d c0       	rjmp	.+26     	; 0x1256 <vfprintf+0x256>
    123c:	8b 2d       	mov	r24, r11
    123e:	84 60       	ori	r24, 0x04	; 4
    1240:	b8 2e       	mov	r11, r24
    1242:	09 c0       	rjmp	.+18     	; 0x1256 <vfprintf+0x256>
    1244:	24 ff       	sbrs	r18, 4
    1246:	0a c0       	rjmp	.+20     	; 0x125c <vfprintf+0x25c>
    1248:	9f 2f       	mov	r25, r31
    124a:	96 60       	ori	r25, 0x06	; 6
    124c:	b9 2e       	mov	r11, r25
    124e:	06 c0       	rjmp	.+12     	; 0x125c <vfprintf+0x25c>
    1250:	28 e0       	ldi	r18, 0x08	; 8
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	05 c0       	rjmp	.+10     	; 0x1260 <vfprintf+0x260>
    1256:	20 e1       	ldi	r18, 0x10	; 16
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <vfprintf+0x260>
    125c:	20 e1       	ldi	r18, 0x10	; 16
    125e:	32 e0       	ldi	r19, 0x02	; 2
    1260:	f8 01       	movw	r30, r16
    1262:	b7 fe       	sbrs	r11, 7
    1264:	07 c0       	rjmp	.+14     	; 0x1274 <vfprintf+0x274>
    1266:	60 81       	ld	r22, Z
    1268:	71 81       	ldd	r23, Z+1	; 0x01
    126a:	82 81       	ldd	r24, Z+2	; 0x02
    126c:	93 81       	ldd	r25, Z+3	; 0x03
    126e:	0c 5f       	subi	r16, 0xFC	; 252
    1270:	1f 4f       	sbci	r17, 0xFF	; 255
    1272:	06 c0       	rjmp	.+12     	; 0x1280 <vfprintf+0x280>
    1274:	60 81       	ld	r22, Z
    1276:	71 81       	ldd	r23, Z+1	; 0x01
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	0e 5f       	subi	r16, 0xFE	; 254
    127e:	1f 4f       	sbci	r17, 0xFF	; 255
    1280:	a4 01       	movw	r20, r8
    1282:	0e 94 1a 0a 	call	0x1434	; 0x1434 <__ultoa_invert>
    1286:	a8 2e       	mov	r10, r24
    1288:	a8 18       	sub	r10, r8
    128a:	fb 2d       	mov	r31, r11
    128c:	ff 77       	andi	r31, 0x7F	; 127
    128e:	bf 2e       	mov	r11, r31
    1290:	b6 fe       	sbrs	r11, 6
    1292:	0b c0       	rjmp	.+22     	; 0x12aa <vfprintf+0x2aa>
    1294:	2b 2d       	mov	r18, r11
    1296:	2e 7f       	andi	r18, 0xFE	; 254
    1298:	a5 14       	cp	r10, r5
    129a:	50 f4       	brcc	.+20     	; 0x12b0 <vfprintf+0x2b0>
    129c:	b4 fe       	sbrs	r11, 4
    129e:	0a c0       	rjmp	.+20     	; 0x12b4 <vfprintf+0x2b4>
    12a0:	b2 fc       	sbrc	r11, 2
    12a2:	08 c0       	rjmp	.+16     	; 0x12b4 <vfprintf+0x2b4>
    12a4:	2b 2d       	mov	r18, r11
    12a6:	2e 7e       	andi	r18, 0xEE	; 238
    12a8:	05 c0       	rjmp	.+10     	; 0x12b4 <vfprintf+0x2b4>
    12aa:	7a 2c       	mov	r7, r10
    12ac:	2b 2d       	mov	r18, r11
    12ae:	03 c0       	rjmp	.+6      	; 0x12b6 <vfprintf+0x2b6>
    12b0:	7a 2c       	mov	r7, r10
    12b2:	01 c0       	rjmp	.+2      	; 0x12b6 <vfprintf+0x2b6>
    12b4:	75 2c       	mov	r7, r5
    12b6:	24 ff       	sbrs	r18, 4
    12b8:	0d c0       	rjmp	.+26     	; 0x12d4 <vfprintf+0x2d4>
    12ba:	fe 01       	movw	r30, r28
    12bc:	ea 0d       	add	r30, r10
    12be:	f1 1d       	adc	r31, r1
    12c0:	80 81       	ld	r24, Z
    12c2:	80 33       	cpi	r24, 0x30	; 48
    12c4:	11 f4       	brne	.+4      	; 0x12ca <vfprintf+0x2ca>
    12c6:	29 7e       	andi	r18, 0xE9	; 233
    12c8:	09 c0       	rjmp	.+18     	; 0x12dc <vfprintf+0x2dc>
    12ca:	22 ff       	sbrs	r18, 2
    12cc:	06 c0       	rjmp	.+12     	; 0x12da <vfprintf+0x2da>
    12ce:	73 94       	inc	r7
    12d0:	73 94       	inc	r7
    12d2:	04 c0       	rjmp	.+8      	; 0x12dc <vfprintf+0x2dc>
    12d4:	82 2f       	mov	r24, r18
    12d6:	86 78       	andi	r24, 0x86	; 134
    12d8:	09 f0       	breq	.+2      	; 0x12dc <vfprintf+0x2dc>
    12da:	73 94       	inc	r7
    12dc:	23 fd       	sbrc	r18, 3
    12de:	13 c0       	rjmp	.+38     	; 0x1306 <vfprintf+0x306>
    12e0:	20 ff       	sbrs	r18, 0
    12e2:	06 c0       	rjmp	.+12     	; 0x12f0 <vfprintf+0x2f0>
    12e4:	5a 2c       	mov	r5, r10
    12e6:	73 14       	cp	r7, r3
    12e8:	18 f4       	brcc	.+6      	; 0x12f0 <vfprintf+0x2f0>
    12ea:	53 0c       	add	r5, r3
    12ec:	57 18       	sub	r5, r7
    12ee:	73 2c       	mov	r7, r3
    12f0:	73 14       	cp	r7, r3
    12f2:	68 f4       	brcc	.+26     	; 0x130e <vfprintf+0x30e>
    12f4:	b7 01       	movw	r22, r14
    12f6:	80 e2       	ldi	r24, 0x20	; 32
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	2c 87       	std	Y+12, r18	; 0x0c
    12fc:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <fputc>
    1300:	73 94       	inc	r7
    1302:	2c 85       	ldd	r18, Y+12	; 0x0c
    1304:	f5 cf       	rjmp	.-22     	; 0x12f0 <vfprintf+0x2f0>
    1306:	73 14       	cp	r7, r3
    1308:	10 f4       	brcc	.+4      	; 0x130e <vfprintf+0x30e>
    130a:	37 18       	sub	r3, r7
    130c:	01 c0       	rjmp	.+2      	; 0x1310 <vfprintf+0x310>
    130e:	31 2c       	mov	r3, r1
    1310:	24 ff       	sbrs	r18, 4
    1312:	12 c0       	rjmp	.+36     	; 0x1338 <vfprintf+0x338>
    1314:	b7 01       	movw	r22, r14
    1316:	80 e3       	ldi	r24, 0x30	; 48
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	2c 87       	std	Y+12, r18	; 0x0c
    131c:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <fputc>
    1320:	2c 85       	ldd	r18, Y+12	; 0x0c
    1322:	22 ff       	sbrs	r18, 2
    1324:	17 c0       	rjmp	.+46     	; 0x1354 <vfprintf+0x354>
    1326:	21 ff       	sbrs	r18, 1
    1328:	03 c0       	rjmp	.+6      	; 0x1330 <vfprintf+0x330>
    132a:	88 e5       	ldi	r24, 0x58	; 88
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <vfprintf+0x334>
    1330:	88 e7       	ldi	r24, 0x78	; 120
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	b7 01       	movw	r22, r14
    1336:	0c c0       	rjmp	.+24     	; 0x1350 <vfprintf+0x350>
    1338:	82 2f       	mov	r24, r18
    133a:	86 78       	andi	r24, 0x86	; 134
    133c:	59 f0       	breq	.+22     	; 0x1354 <vfprintf+0x354>
    133e:	21 fd       	sbrc	r18, 1
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <vfprintf+0x346>
    1342:	80 e2       	ldi	r24, 0x20	; 32
    1344:	01 c0       	rjmp	.+2      	; 0x1348 <vfprintf+0x348>
    1346:	8b e2       	ldi	r24, 0x2B	; 43
    1348:	27 fd       	sbrc	r18, 7
    134a:	8d e2       	ldi	r24, 0x2D	; 45
    134c:	b7 01       	movw	r22, r14
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <fputc>
    1354:	a5 14       	cp	r10, r5
    1356:	38 f4       	brcc	.+14     	; 0x1366 <vfprintf+0x366>
    1358:	b7 01       	movw	r22, r14
    135a:	80 e3       	ldi	r24, 0x30	; 48
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <fputc>
    1362:	5a 94       	dec	r5
    1364:	f7 cf       	rjmp	.-18     	; 0x1354 <vfprintf+0x354>
    1366:	aa 94       	dec	r10
    1368:	f4 01       	movw	r30, r8
    136a:	ea 0d       	add	r30, r10
    136c:	f1 1d       	adc	r31, r1
    136e:	80 81       	ld	r24, Z
    1370:	b7 01       	movw	r22, r14
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <fputc>
    1378:	a1 10       	cpse	r10, r1
    137a:	f5 cf       	rjmp	.-22     	; 0x1366 <vfprintf+0x366>
    137c:	33 20       	and	r3, r3
    137e:	09 f4       	brne	.+2      	; 0x1382 <vfprintf+0x382>
    1380:	51 ce       	rjmp	.-862    	; 0x1024 <vfprintf+0x24>
    1382:	b7 01       	movw	r22, r14
    1384:	80 e2       	ldi	r24, 0x20	; 32
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <fputc>
    138c:	3a 94       	dec	r3
    138e:	f6 cf       	rjmp	.-20     	; 0x137c <vfprintf+0x37c>
    1390:	f7 01       	movw	r30, r14
    1392:	86 81       	ldd	r24, Z+6	; 0x06
    1394:	97 81       	ldd	r25, Z+7	; 0x07
    1396:	02 c0       	rjmp	.+4      	; 0x139c <vfprintf+0x39c>
    1398:	8f ef       	ldi	r24, 0xFF	; 255
    139a:	9f ef       	ldi	r25, 0xFF	; 255
    139c:	2c 96       	adiw	r28, 0x0c	; 12
    139e:	e2 e1       	ldi	r30, 0x12	; 18
    13a0:	0c 94 94 0a 	jmp	0x1528	; 0x1528 <__epilogue_restores__>

000013a4 <strnlen_P>:
    13a4:	fc 01       	movw	r30, r24
    13a6:	05 90       	lpm	r0, Z+
    13a8:	61 50       	subi	r22, 0x01	; 1
    13aa:	70 40       	sbci	r23, 0x00	; 0
    13ac:	01 10       	cpse	r0, r1
    13ae:	d8 f7       	brcc	.-10     	; 0x13a6 <strnlen_P+0x2>
    13b0:	80 95       	com	r24
    13b2:	90 95       	com	r25
    13b4:	8e 0f       	add	r24, r30
    13b6:	9f 1f       	adc	r25, r31
    13b8:	08 95       	ret

000013ba <strnlen>:
    13ba:	fc 01       	movw	r30, r24
    13bc:	61 50       	subi	r22, 0x01	; 1
    13be:	70 40       	sbci	r23, 0x00	; 0
    13c0:	01 90       	ld	r0, Z+
    13c2:	01 10       	cpse	r0, r1
    13c4:	d8 f7       	brcc	.-10     	; 0x13bc <strnlen+0x2>
    13c6:	80 95       	com	r24
    13c8:	90 95       	com	r25
    13ca:	8e 0f       	add	r24, r30
    13cc:	9f 1f       	adc	r25, r31
    13ce:	08 95       	ret

000013d0 <fputc>:
    13d0:	0f 93       	push	r16
    13d2:	1f 93       	push	r17
    13d4:	cf 93       	push	r28
    13d6:	df 93       	push	r29
    13d8:	18 2f       	mov	r17, r24
    13da:	09 2f       	mov	r16, r25
    13dc:	eb 01       	movw	r28, r22
    13de:	8b 81       	ldd	r24, Y+3	; 0x03
    13e0:	81 fd       	sbrc	r24, 1
    13e2:	03 c0       	rjmp	.+6      	; 0x13ea <fputc+0x1a>
    13e4:	8f ef       	ldi	r24, 0xFF	; 255
    13e6:	9f ef       	ldi	r25, 0xFF	; 255
    13e8:	20 c0       	rjmp	.+64     	; 0x142a <fputc+0x5a>
    13ea:	82 ff       	sbrs	r24, 2
    13ec:	10 c0       	rjmp	.+32     	; 0x140e <fputc+0x3e>
    13ee:	4e 81       	ldd	r20, Y+6	; 0x06
    13f0:	5f 81       	ldd	r21, Y+7	; 0x07
    13f2:	2c 81       	ldd	r18, Y+4	; 0x04
    13f4:	3d 81       	ldd	r19, Y+5	; 0x05
    13f6:	42 17       	cp	r20, r18
    13f8:	53 07       	cpc	r21, r19
    13fa:	7c f4       	brge	.+30     	; 0x141a <fputc+0x4a>
    13fc:	e8 81       	ld	r30, Y
    13fe:	f9 81       	ldd	r31, Y+1	; 0x01
    1400:	9f 01       	movw	r18, r30
    1402:	2f 5f       	subi	r18, 0xFF	; 255
    1404:	3f 4f       	sbci	r19, 0xFF	; 255
    1406:	39 83       	std	Y+1, r19	; 0x01
    1408:	28 83       	st	Y, r18
    140a:	10 83       	st	Z, r17
    140c:	06 c0       	rjmp	.+12     	; 0x141a <fputc+0x4a>
    140e:	e8 85       	ldd	r30, Y+8	; 0x08
    1410:	f9 85       	ldd	r31, Y+9	; 0x09
    1412:	81 2f       	mov	r24, r17
    1414:	09 95       	icall
    1416:	89 2b       	or	r24, r25
    1418:	29 f7       	brne	.-54     	; 0x13e4 <fputc+0x14>
    141a:	2e 81       	ldd	r18, Y+6	; 0x06
    141c:	3f 81       	ldd	r19, Y+7	; 0x07
    141e:	2f 5f       	subi	r18, 0xFF	; 255
    1420:	3f 4f       	sbci	r19, 0xFF	; 255
    1422:	3f 83       	std	Y+7, r19	; 0x07
    1424:	2e 83       	std	Y+6, r18	; 0x06
    1426:	81 2f       	mov	r24, r17
    1428:	90 2f       	mov	r25, r16
    142a:	df 91       	pop	r29
    142c:	cf 91       	pop	r28
    142e:	1f 91       	pop	r17
    1430:	0f 91       	pop	r16
    1432:	08 95       	ret

00001434 <__ultoa_invert>:
    1434:	fa 01       	movw	r30, r20
    1436:	aa 27       	eor	r26, r26
    1438:	28 30       	cpi	r18, 0x08	; 8
    143a:	51 f1       	breq	.+84     	; 0x1490 <__ultoa_invert+0x5c>
    143c:	20 31       	cpi	r18, 0x10	; 16
    143e:	81 f1       	breq	.+96     	; 0x14a0 <__ultoa_invert+0x6c>
    1440:	e8 94       	clt
    1442:	6f 93       	push	r22
    1444:	6e 7f       	andi	r22, 0xFE	; 254
    1446:	6e 5f       	subi	r22, 0xFE	; 254
    1448:	7f 4f       	sbci	r23, 0xFF	; 255
    144a:	8f 4f       	sbci	r24, 0xFF	; 255
    144c:	9f 4f       	sbci	r25, 0xFF	; 255
    144e:	af 4f       	sbci	r26, 0xFF	; 255
    1450:	b1 e0       	ldi	r27, 0x01	; 1
    1452:	3e d0       	rcall	.+124    	; 0x14d0 <__ultoa_invert+0x9c>
    1454:	b4 e0       	ldi	r27, 0x04	; 4
    1456:	3c d0       	rcall	.+120    	; 0x14d0 <__ultoa_invert+0x9c>
    1458:	67 0f       	add	r22, r23
    145a:	78 1f       	adc	r23, r24
    145c:	89 1f       	adc	r24, r25
    145e:	9a 1f       	adc	r25, r26
    1460:	a1 1d       	adc	r26, r1
    1462:	68 0f       	add	r22, r24
    1464:	79 1f       	adc	r23, r25
    1466:	8a 1f       	adc	r24, r26
    1468:	91 1d       	adc	r25, r1
    146a:	a1 1d       	adc	r26, r1
    146c:	6a 0f       	add	r22, r26
    146e:	71 1d       	adc	r23, r1
    1470:	81 1d       	adc	r24, r1
    1472:	91 1d       	adc	r25, r1
    1474:	a1 1d       	adc	r26, r1
    1476:	20 d0       	rcall	.+64     	; 0x14b8 <__ultoa_invert+0x84>
    1478:	09 f4       	brne	.+2      	; 0x147c <__ultoa_invert+0x48>
    147a:	68 94       	set
    147c:	3f 91       	pop	r19
    147e:	2a e0       	ldi	r18, 0x0A	; 10
    1480:	26 9f       	mul	r18, r22
    1482:	11 24       	eor	r1, r1
    1484:	30 19       	sub	r19, r0
    1486:	30 5d       	subi	r19, 0xD0	; 208
    1488:	31 93       	st	Z+, r19
    148a:	de f6       	brtc	.-74     	; 0x1442 <__ultoa_invert+0xe>
    148c:	cf 01       	movw	r24, r30
    148e:	08 95       	ret
    1490:	46 2f       	mov	r20, r22
    1492:	47 70       	andi	r20, 0x07	; 7
    1494:	40 5d       	subi	r20, 0xD0	; 208
    1496:	41 93       	st	Z+, r20
    1498:	b3 e0       	ldi	r27, 0x03	; 3
    149a:	0f d0       	rcall	.+30     	; 0x14ba <__ultoa_invert+0x86>
    149c:	c9 f7       	brne	.-14     	; 0x1490 <__ultoa_invert+0x5c>
    149e:	f6 cf       	rjmp	.-20     	; 0x148c <__ultoa_invert+0x58>
    14a0:	46 2f       	mov	r20, r22
    14a2:	4f 70       	andi	r20, 0x0F	; 15
    14a4:	40 5d       	subi	r20, 0xD0	; 208
    14a6:	4a 33       	cpi	r20, 0x3A	; 58
    14a8:	18 f0       	brcs	.+6      	; 0x14b0 <__ultoa_invert+0x7c>
    14aa:	49 5d       	subi	r20, 0xD9	; 217
    14ac:	31 fd       	sbrc	r19, 1
    14ae:	40 52       	subi	r20, 0x20	; 32
    14b0:	41 93       	st	Z+, r20
    14b2:	02 d0       	rcall	.+4      	; 0x14b8 <__ultoa_invert+0x84>
    14b4:	a9 f7       	brne	.-22     	; 0x14a0 <__ultoa_invert+0x6c>
    14b6:	ea cf       	rjmp	.-44     	; 0x148c <__ultoa_invert+0x58>
    14b8:	b4 e0       	ldi	r27, 0x04	; 4
    14ba:	a6 95       	lsr	r26
    14bc:	97 95       	ror	r25
    14be:	87 95       	ror	r24
    14c0:	77 95       	ror	r23
    14c2:	67 95       	ror	r22
    14c4:	ba 95       	dec	r27
    14c6:	c9 f7       	brne	.-14     	; 0x14ba <__ultoa_invert+0x86>
    14c8:	00 97       	sbiw	r24, 0x00	; 0
    14ca:	61 05       	cpc	r22, r1
    14cc:	71 05       	cpc	r23, r1
    14ce:	08 95       	ret
    14d0:	9b 01       	movw	r18, r22
    14d2:	ac 01       	movw	r20, r24
    14d4:	0a 2e       	mov	r0, r26
    14d6:	06 94       	lsr	r0
    14d8:	57 95       	ror	r21
    14da:	47 95       	ror	r20
    14dc:	37 95       	ror	r19
    14de:	27 95       	ror	r18
    14e0:	ba 95       	dec	r27
    14e2:	c9 f7       	brne	.-14     	; 0x14d6 <__ultoa_invert+0xa2>
    14e4:	62 0f       	add	r22, r18
    14e6:	73 1f       	adc	r23, r19
    14e8:	84 1f       	adc	r24, r20
    14ea:	95 1f       	adc	r25, r21
    14ec:	a0 1d       	adc	r26, r0
    14ee:	08 95       	ret

000014f0 <__prologue_saves__>:
    14f0:	2f 92       	push	r2
    14f2:	3f 92       	push	r3
    14f4:	4f 92       	push	r4
    14f6:	5f 92       	push	r5
    14f8:	6f 92       	push	r6
    14fa:	7f 92       	push	r7
    14fc:	8f 92       	push	r8
    14fe:	9f 92       	push	r9
    1500:	af 92       	push	r10
    1502:	bf 92       	push	r11
    1504:	cf 92       	push	r12
    1506:	df 92       	push	r13
    1508:	ef 92       	push	r14
    150a:	ff 92       	push	r15
    150c:	0f 93       	push	r16
    150e:	1f 93       	push	r17
    1510:	cf 93       	push	r28
    1512:	df 93       	push	r29
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
    1518:	ca 1b       	sub	r28, r26
    151a:	db 0b       	sbc	r29, r27
    151c:	0f b6       	in	r0, 0x3f	; 63
    151e:	f8 94       	cli
    1520:	de bf       	out	0x3e, r29	; 62
    1522:	0f be       	out	0x3f, r0	; 63
    1524:	cd bf       	out	0x3d, r28	; 61
    1526:	09 94       	ijmp

00001528 <__epilogue_restores__>:
    1528:	2a 88       	ldd	r2, Y+18	; 0x12
    152a:	39 88       	ldd	r3, Y+17	; 0x11
    152c:	48 88       	ldd	r4, Y+16	; 0x10
    152e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1530:	6e 84       	ldd	r6, Y+14	; 0x0e
    1532:	7d 84       	ldd	r7, Y+13	; 0x0d
    1534:	8c 84       	ldd	r8, Y+12	; 0x0c
    1536:	9b 84       	ldd	r9, Y+11	; 0x0b
    1538:	aa 84       	ldd	r10, Y+10	; 0x0a
    153a:	b9 84       	ldd	r11, Y+9	; 0x09
    153c:	c8 84       	ldd	r12, Y+8	; 0x08
    153e:	df 80       	ldd	r13, Y+7	; 0x07
    1540:	ee 80       	ldd	r14, Y+6	; 0x06
    1542:	fd 80       	ldd	r15, Y+5	; 0x05
    1544:	0c 81       	ldd	r16, Y+4	; 0x04
    1546:	1b 81       	ldd	r17, Y+3	; 0x03
    1548:	aa 81       	ldd	r26, Y+2	; 0x02
    154a:	b9 81       	ldd	r27, Y+1	; 0x01
    154c:	ce 0f       	add	r28, r30
    154e:	d1 1d       	adc	r29, r1
    1550:	0f b6       	in	r0, 0x3f	; 63
    1552:	f8 94       	cli
    1554:	de bf       	out	0x3e, r29	; 62
    1556:	0f be       	out	0x3f, r0	; 63
    1558:	cd bf       	out	0x3d, r28	; 61
    155a:	ed 01       	movw	r28, r26
    155c:	08 95       	ret

0000155e <_exit>:
    155e:	f8 94       	cli

00001560 <__stop_program>:
    1560:	ff cf       	rjmp	.-2      	; 0x1560 <__stop_program>
